
When you write a Scala "for expression", it will contain one or more of the following...

1) Generator/Receiver - The "<-" operator in a for expression separates the generator and
                        the receiver.  The generator appears on the RIGHT SIDE of the "<-"
                        operator, and the receiver appears on the LEFT SIDE of the "<-"
                        operator.  The generator references the collection that the for loop
                        iterates through.  The receiver is basically a "val" that gets
                        assigned the current element of the collection.

                        In the following for expression "people" is the generator and "p" is the receiver.

                        for (p <- people)  // "people" is the GENERATOR, "p" is the RECEIVER.
                          println(s"Person = $p")

                        When a for loop is embedded within another for loop, the for expression
                        will contain multiple generator/receiver pairs.

2) Definition - A definition is basically a "val" declaration contained within a for loop.  For each
                element in the collection (each iteration of the for loop), this val gets assigned
                some part of that element.  This val can then be referenced in a for expression's
                FILTER or YIELD section to make the code more readable.  A definition is OPTIONAL
                in a for expression--it's not required.

3) Filter - A filter is a Boolean expression contained within a for expression.  Each element of the
            collection for which this filter expression returns False will NOT be returned by the for
            expression.  Thus, it acts to filter/remove certain elements of the collection from the
            for expression's result.  A filter is OPTIONAL in a for expression--it's not required.

4) yield - "yield" is a Scala keyword that appears at the tail-end of a for expression.
           The expression that appears after the "yield" keyword is used to alter the
           result returned by the for expression.  So both the FILTER expression and the
           YIELD expression are used to alter the result returned by a for expression.
           The "yield" keyword is OPTIONAL in a for expression--it's not required.

The following two code samples demonstrate how to write some basic for expressions.
Read comments for details.
============================================================================
object Demo
{
  case class Person(name:String, yearBorn:Int)

  def main(args: Array[String]): Unit =
  {
    val people:List[Person] = List(Person("Jim", 1975), Person("Sue", 1988),
                                   Person("Tom", 1999), Person("Tony", 1944))
    println("PART 1) =====================")
    for (p <- people)  // "people" is the GENERATOR, "p" is the RECEIVER.
      println(s"Person = $p") // PRINTS: Person = Person(Jim,1975)
                              //         Person = Person(Sue,1988)
                              //         Person = Person(Tom,1999)
                              //         Person = Person(Tony,1944)

    println("PART 2) =====================")
    val result:List[String] =
      for {
        p <- people               // "people" is the GENERATOR, "p" is the RECEIVER
        name = p.name             // DEFINITION
        if (name startsWith "To") // FILTER - Return only people whose names start with "To".
      } yield name                // YIELD - Return only the Person.name member of the class Person.


    // The Scala API supplies the foreach() method for every collection.  Use the foreach()
    // method to print the result returned by the above for expression.
    result.foreach(println) // PRINTS: Tom
                            //         Tony
  }
}
============================================================================
object Demo
{
  case class Person(firstName:String, lastName:String)

  def main(args:Array[String]): Unit =
  {
    val states:List[String] = List("Alabama", "Alaska", "Wisconsin", "Wyoming")

    var statesCapitalized:List[String]  = for (x <- states) yield x.toUpperCase
    println(statesCapitalized) // PRINTS:  List(ALABAMA, ALASKA, WISCONSIN, WYOMING)

    statesCapitalized = states.map(_.toUpperCase) // This line generates identical results to the above for expression.
    println(statesCapitalized) // PRINTS:  List(ALABAMA, ALASKA, WISCONSIN, WYOMING)

    // =================================================================

    val people:List[Person] = List(Person("Barney", "Rubble"),
                                   Person("Fred", "Flintstone"),
                                   Person("Betty", "Rubble"))

    val firstNamesStartingWithB:List[String] =
        for {
              p <- people                // "p" is the RECEIVER,  "people" is the GENERATOR.
              fname = p.firstName        // This line is the DEFINITION.
              if (fname.startsWith("B")) // This line is the FILTER.
            } yield fname.toUpperCase

    println(firstNamesStartingWithB) // PRINTS: List(BARNEY, BETTY)
  }
}
============================================================================

Assume you want use a for expression to iterate through some Scala-defined
collection, such as:

* Array[String]
* List[(Char, Boolean)]
* Map[String, Int]

The Scala compiler will translate the for expression into a series of method calls
that uses one or more of the following four methods.  All Scala-defined collection
classes implement these four methods to ensure they'll work with any for expression
you write.

withFilter() - Enables a collection class to work with a filter in a for expression.
               (This method is called ONLY when a for expression implements a filter.)

foreach()    - Enables a collection class to work with a for expression that DOESN'T use the "yield" keyword.
               This foreach() method will work with a single for expression, or with multiple embedded
               for expressions--as long as NONE of them implement the "yield" keyword.

map()        - Enables a collection class to work with a for expression that DOES use the "yield" keyword.
               This map() method works only with a single for expression, not with multiple embedded
               for expressions.  When a collection class must work with multiple embedded for expressions,
               the collection class MUST contain this map() method, AND the flatMap() method mentioned below.

flatMap()    - Enables a collection class to work with multiple embedded for expressions that also
               implement the "yield" keyword.

If you write your own collection class and want to make it work with any type of for expression,
you must write the above four methods and make them members of your collection class.  The
four methods would have signatures corresponding to the method definitions shown here:

abstract class CustomCollectionClass[A]
{
  def foreach(func: A => Unit):Unit
  def map[B](func: A => B):CustomCollectionClass[B]
  def flatMap[B](func: A => CustomCollectionClass[B]):CustomCollectionClass[B]
  def withFilter(func: A => Boolean):CustomCollectionClass[A]
}

================================================================================

The code sample below defines a case class named Sequence, which is used to hold
a collection of generic data types.  To make this Sequence collection class work
with any kind of for expression, it implements the four methods mentioned above
(foreach(), map(), flatMap(), and withFilter()).

import scala.collection.mutable.ListBuffer
object Demo
{
  case class Person(firstName:String, lastName:String)
  case class Sequence[A](private val initialElems: A*) // A* designates a variable number of args of type A.
  {
    // The val elems below is the collection that this Sequence class represents.
    // The val elems is defined as a generic type, so it can hold any data type.
    // See the main() method below to see how an instance of this Sequence class
    // gets instantiated.
    private val elems:ListBuffer[A] = ListBuffer[A]()
    elems ++= initialElems // The ++= operator for the ListBuffer class appends multiple elements.
    // The above line "elems ++= initialElems" could be replaced with this commented-out line:
    // for { x <- initialElems } elems += x

    /*********************************************************
    * 
    *********************************************************/
    def foreach(block: A => Unit):Unit =
    {
      // The following println is for testing/debugging:
      // println("Sequence.foreach() method called.")

      elems.foreach(block)
    }

    /*********************************************************
    * 
    *********************************************************/
    def map[B](func: A=>B):Sequence[B] =
    {
      // The following println is for testing/debugging:
      // println("Sequence.map() method called.")

      // Invoke the func argument passed to this method on each element
      // of the the Sequence.elems member.
      val listBuf:ListBuffer[B] = elems.map(func)

      // Return a new Sequence class.  The ":_*" text below designates a variable
      // number of arguments are passed to the Sequence class constructor.
      Sequence(listBuf.toSeq:_*)
    }

    /*********************************************************
    *
    *********************************************************/
    def flatMap[B](func: A => Sequence[B]):Sequence[B] =
    {
      // The following println is for testing/debugging:
      // println("Sequence.flatMap() method called.")

      // Create an EMPTY resultListBuf, which will have new elements appended to it below.
      val resultListBuf:ListBuffer[B] = ListBuffer[B]()

      // The following 2 for() loops replicate the behavior of Scala's flatMap() method,
      // which is a standard method for Scala collection classes.  For each member
      // of a collection, the flatMap() method invokes the map() method first;
      // then the flatten() method is invoked, and a result is returned. 
      //
      // The following for() loop invokes map(func), which returns
      // a new Sequence class.  Each element of that Sequence class
      // is used to build resultListBuf.
      for (tempSequence:Sequence[B] <- map(func))
      {
        // Iterate through the tempSequence class to build the resultListBuf.
        for (elem <- tempSequence)
        {
          resultListBuf += elem
        }
      }

      // Create and return a new Sequence class, which is the final result of
      // this flatMap() method.  The ":_*" text below designates a variable
      // number of arguments are passed to the Sequence class constructor.
      Sequence(resultListBuf.toSeq:_*)
    }

    /*********************************************************
    *
    *********************************************************/
    def withFilter(func: A => Boolean):Sequence[A] =
    {
      // The following println is for testing/debugging:
      // println("Sequence.withFilter() method called.")

      // Invoke the func passed to this withFilter() method on all
      // elements of the Sequence.elems member.
      val tempSequence:ListBuffer[A] = elems.filter(func)

      // Create and return a new Sequence class, which is the final result of
      // this withFilter() method.  The ":_*" text below designates a variable
      //       number of arguments are passed to the Sequence class constructor.
      Sequence(tempSequence.toSeq:_*)
    }
  } // END: case class Sequence[A]


  /*********************************************************
   *
   ********************************************************/
  def main(args:Array[String]): Unit =
  {
    // The following 2 lines invoke the above Sequence constructor, which
    // can be passed a variable number of arguments of any data type.
    val myFriends:Sequence[Person]   = Sequence(Person("Jack",   "Daniels"),  Person("Johnny", "Walker"), Person("Jim", "Beam"))
    val joesFriends:Sequence[Person] = Sequence(Person("Joseph", "Schlitz"),  Person("George", "Jones"),  Person("Jim", "Beam"))


    // The following for expression invokes these 3 methods defined above:
    // 1) map() 
    // 2) flatMap()
    // 3) withFilter()
    val mutualFriends:Sequence[Person] =
    for {
          myFriend   <- myFriends   // "myFriend" is a RECEIVER.    "myFriends" is a GENERATOR.
          joesFriend <- joesFriends // "joesFriend" is a RECEIVER.  "joesFriends" is a GENERATOR.
          if (myFriend.firstName == joesFriend.firstName &&  myFriend.lastName  == joesFriend.lastName)
        } yield myFriend

    println("mutualFriends = " + mutualFriends) // PRINTS: mutualFriends = Sequence(List(Person(Jim,Beam)))

    // The following line of code invokes the foreach() method defined above.
    mutualFriends.foreach(println) // PRINTS: Person(Jim,Beam)
  }
}

================================================================================
Below are more examples of how to write for() expressions.

object Demo {
  case class Person(name:String, isMale:Boolean, children:Person*)

  def removeDuplicates[A](xs:List[A]):List[A] = {
    if (xs.isEmpty) xs
    else xs.head :: removeDuplicates(xs.tail.filter(x => x != xs.head))
  }

  /************************************
   * main()
   ***********************************/
  def main(args: Array[String]): Unit = {
    val lara = Person("Lara", false)
    val bob  = Person("Bob",  true)
    val julie = Person("Julie", false, lara, bob)
    val persons = List(lara, bob, julie)

    // EXAMPLE 1:
    var result1:List[(String, String)] = persons.filter(p => !p.isMale).flatMap(p => p.children.map(c => (p.name, c.name)))
    println(result1) // PRINTS: List((Julie,Lara), (Julie,Bob))

    // EXAMPLE 2: Identical to EXAMPLE 1 except persons.filter() is replaced with persons.withFilter().
    result1 = persons.withFilter(p => !p.isMale).flatMap(p => p.children.map(c => (p.name, c.name)))
    println(result1) // PRINTS: List((Julie,Lara), (Julie,Bob))

    // EXAMPLE 3: Identical results as EXAMPLE 1 and EXAMPLE 2.
    result1 = for (p <- persons; if !p.isMale; c <- p.children) yield (p.name, c.name)
    println(result1) // PRINTS: List((Julie,Lara), (Julie,Bob))

    // EXAMPLE 4:
    var result2:List[String] = for {
                        p <- persons
                        n = p.name
                        if (n.startsWith("Bo"))
                      } yield n
    println(result2) // PRINTS: List(Bob)

    // EXAMPLE 5:
    // NOTE: The following for() expression generates a result DIFFERENT than EXAMPLE 4.
    var result3:List[Person] = for {
                                     p <- persons
                                     if p.name.startsWith("Bo")
                                   } yield p
    println(result3) // PRINTS: List(Person(Bob,true,WrappedArray()))

    // EXAMPLE 6:
    var result4:List[(Int,String)] = for (x <- List(1,2); y <- List("one","two")) yield (x,y)
    println(result4) // PRINTS: List((1,one), (1,two), (2,one), (2,two))

    // EXAMPLE 7:
    case class Book(title:String, authors:String *)
    val books:List[Book] = List(Book("Structure of Computer Programs", "Abelson", "Sussman"),
                                Book("Principles of Compiler Design", "Aho", "Alfred", "Ullman"),
                                Book("Programming in Modula-2", "Wirth", "Worthless"),
                                Book("ML Programming", "Ullman", "Gookers"),
                                Book("The Java Language Specs", "Joy", "Gosling", "Steele"))
    var result5:List[String] = for (b <- books; a <- b.authors;  if a.startsWith("Gosling")) yield b.title
    println(result5) // PRINTS: List(The Java Language Specs)

    result2 = for (b <- books; if b.title.indexOf("Program") >= 0) yield b.title
    println(result2) // PRINTS: List(Structure of Computer Programs, Programming in Modula-2, ML Programming)

    // This example finds all authors that have written 2 or more books.
    // Unfortunately, it returns the author's name multiple times.
    result2 = for (b1 <- books;      b2 <- books;      if (b1 != b2);
                   a1 <- b1.authors; a2 <- b2.authors; if (a1 == a2)) yield a1
    println(result2) // PRINTS: List(Ullman, Ullman)

    // Here we remove the duplicates from result2.
    result2 = removeDuplicates(result2)
    println(result2) // PRINTS: List(Ullman)
  }
}

================================================================================
