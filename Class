Scala provides three (3) constructs for creating user-defined types:

1) trait
2) object (Scala has two kinds of object: "case object" and "object")
3) class  (Scala has two kinds of class:  "case class" and "class")

Use a Scala class (or object) to represent a "thing" or an "object",
such as Person, Automobile, Aircraft, Animal, etc.

Use a Scala trait to represent a "behavior", such as
talk, ride, fly, walk, etc.

A Scala object always represents a "singleton."  A Scala object
wouldn't be used to represent a person because you'd probably want
the capability to generate multiple persons.  So you'd use a Scala
class to represent a person.  A Scala object would be used to
represent planet Earth because only one exists (it's a singleton).
It wouldn't make sense to create multiple planet Earth objects or
classes.

Unlike Scala classes, Scala objects are never instantiated and CAN'T
be defined to accept arguments.  This means a Scala object CAN'T have
a parameter list.  (A Scala class can have a parameter list containing
arguments.)  Quite often, a Scala object is used as a "companion
object" to a regular Scala class.  NOTE: Companion objects are used
ONLY for regular Scala classes.  You wouldn't create a companion object
for a Scala "case class".

When a Scala object is a "companion object" to a regular Scala class,
it must meet the following criteria:

1) The companion object MUST have the identical name as the class.
2) The companion object MUST be contained in the same file as the class.
3) The companion object MUST contain an apply() method.  This apply()
   method is automatically invoked by Scala when you construct a new class.
4) If you want to perform pattern matching on the class, the companion object
   MUST contain an unapply() method.  The unapply() method is automatically
   invoked by Scala when pattern matching occurs.  A class does NOT need
   an unapply() method if pattern matching isn't performed on the class.

Scala also has the following type of classes.  This page we won't be concerned
with these class types.

* Anonymous class
* Generic class
* Implicit class
* Inner class

Below are some examples of how to use Scala classes and objects.

===============================================================================
There are three (3) main levels of visibility in Scala, they are:

1) public (default) - There does NOT exist a public keyword in Scala.  If you want
                      something public, it's public BY DEFAULT, which means you
                      wouldn't use the private or protected keyword.  If the
                      visibility level is public, a class's val/var member or
                      method is accessible by code inside, or outside, the class.
2) private - A "private" declaration means a class's val/var member or method
             can be accessed only inside the class.  If you prefix a declaration
             inside a class with the private keyword, that member will be visible
             to that class only.  This means a private method is NOT made avaiable
             to subclasses.
3) protected - A protected declaration is much like private, except protected class
               members are also accessible in subtypes (children) of the class.
               This means a protected method IS made available to subclasses.

===============================================================================

object Demo
{
  // When a regular class (not a case class) is defined to accept
  // arguments like the following class Person, all arguments in the
  // class definition MUST be preceded with Scala keyword "val" or "var".
  class Person(val firstName: String, val lastName: String)

  /**************************************************
   *  When you define a regular class (not a case class) that accepts
   *  constructor argument(s), you must also define a companion object.
   *  In this example, the following object Person becomes the
   *  companion object to the Person class defined above.
   *  A companion object must always meet the following criteria:
   *  1) The companion object MUST have the identical name as the class.
   *  2) The companion object MUST be contained in the same file as the class.
   *  3) The companion object MUST contain an apply() method.  The apply()
   *     method is automatically called by Scala when you construct a new class.
   *  4) If you want to perform pattern matching on the class, the companion object
   *     MUST contain an unapply() method.  The unapply() method is automatically
   *     called by Scala when pattern matching occurs.  A class does NOT need
   *     an unapply() method if pattern matching isn't performed on the class.
   **************************************************/
  object Person {
    // Scala automatically invokes this apply() method
    // when a new Person class is constructed.
    def apply(firstName:String, lastName:String): Person = {
      Person(firstName, lastName)
    }
    // Scala automatically invokes this unapply() method when
    // pattern matching is performed on a Person class.
    def unapply(person:Person):Some[(String, String)] = {
      Some(person.firstName, person.lastName)
    }
  }

  /**************************************************
  * main()
  **************************************************/
  def main(args: Array[String]): Unit = {
    val joe:Person = new Person("Joe", "Blow") // Person.apply() gets called.
    println(s"1) joe.firstName = ${joe.firstName},  joe.lastName = ${joe.lastName}")
    // PRINTS: 1) joe.firstName = Joe,  joe.lastName = Blow

    // The following match statement DOESN'T require the Person.unapply() method!
    joe match {
      case x => println(s"2) x.firstName = ${x.firstName},  x.lastName = ${x.lastName}")
      // PRINTS: 2) x.firstName = Joe,  x.lastName = Blow
      case _ => println("NO PATTERN MATCH")
    }

    // The following line of code WON'T COMPILE without the Person.unapply() method.
    // The following match statement automatically invokes the Person.unapply() method.
    joe match {
      case Person(fn, ln) => println(s"3) fn = $fn,  ln = $ln") // PRINTS: 3) fn = Joe,  ln = Blow
      case _ => println("NO PATTERN MATCH")
    }

    // The following line of code WON'T COMPILE without the Person.unapply() method.
    // The following line of code doesn't seem to make sense because it's NOT
    // very intuitive.  The following line of code is an assignment statement
    // which performs a pattern match on "val joe" by automatically invoking
    // the Person.unapply() method.  The Person.unapply() method extracts
    // joe.firstName and joe.lastName from val joe, then assigns them to the
    // vals "first" and "last" respectively.
    // NOTE: If the following line contained the keyword var instead of val,
    //       then first and last would become vars instead of vals.
    val Person(first, last) = joe
    println(s"4) first = $first,  last = $last") // PRINTS: 4) first = Joe,  last = Blow
  }
}


===============================================================================
When a class is defined to accept arguments when instantiated, and an argument
is NOT preceeded by the "val" or "var" keywords, the argument is "val" by default.

When an argument passed to a class constructor is a "val", it's accessible only inside the class.
When an argument passed to a class constructor is a "var", it's accessible inside and outside the class.

The following sample code demonstrates this behavior.  Read in-line comments
for detailed explanations.

object Demo
{
  // The "name" and "id" arguments accepted by the Person1 class
  // below are of type "val" by default.  The "ssn" and "state"
  // arguments are explicitly specified as "var" types.
  class Person1(name:String, id:Int, var ssn:String, var state:String) {
    // The following line shows that all arguments passed to the Person1 class
    // (whether of type "val" or "var") are accessible within the Person1 class.
    println(s"Result 1) name = $name,  id = $id, ssn = $ssn,  state = $state")
    // PRINTS: Result 1) name = Tom,  id = -4321, ssn = 987-65-4321,  state = Wisconsin
  }

  // The following Person2 class is similar (but not identical) to the Person1
  // class above.  Person2 contains the same member names (having the same data
  // types) as the Person1 class.  But those members aren't passed as arguments.
  // Instead, those members must get initialized to the same values every time
  // a Person2 class is instantiated.
  class Person2 {
    val name:String  = "Joe"
    val id:Int       = 666777
    var ssn:String   = "123-666-9999"
    var state:String = "Wyoming"
  }

  def main(args:Array[String]):Unit =
  {
    val tom:Person1 = new Person1("Tom", -4321, "987-65-4321", "Wisconsin")

    // If the following commented-out line is uncommented it WON'T COMPILE because
    // the "name" and "id" arguments accepted by the Person1 class are "val" types,
    // so they're NOT accessible from outside the Person1 class.
    // println(s"Result 2A) tom.name = ${tom.name},  tom.id = ${tom.id}") // WON'T COMPILE!

    // The following line CAN access the "ssn" and "state" arguments accepted
    // by the Person1 class because they are "var" types.
    println(s"Result 2B) tom.ssn = ${tom.ssn},  tom.state = ${tom.state}")
    // PRINTS: Result 2B) tom.ssn = 987-65-4321,  tom.state = Wisconsin

    // Notice the difference here between the Person1 and Person2 classes.
    // The "val" arguments passed to Person1 are NOT accessible outside
    // the Person1 class.  But "val" members declared inside Person2 ARE
    // accessible outside the Person2 class.
    val joe:Person2 = new Person2
    println(s"Result 3) joe.name = ${joe.name},  joe.id = ${joe.id}, joe.ssn = ${joe.ssn},  joe.state = ${joe.state}")
    // PRINTS: Result 3) joe.name = Joe,  joe.id = 666777, joe.ssn = 123-666-9999,  joe.state = Wyoming
  }
}





===============================================================================
The syntax used for defining getter and setter methods for regular Scala
classes is rather strange.  The following code demonstrates how to use
getter and setter methods for standard Scala classes.  Read the comments
for details.  For more info on Scala classes see:
http://docs.scala-lang.org/tour/classes.html

object Demo
{
  class Point
  {
    private var _x = 0
    private var _y = 0
    private val bound = 100

    def x = { _x } // This is a getter method.
    // The method below is a setter method.  There must be no whitespace before or after the _ character for x_=
    def x_= (newValue: Int): Unit =
    {
      if (newValue < bound) _x = newValue
      else printWarning
    }

    def y = { _y } // This is a getter method.
    // The method below is a setter method.  There must be no whitespace before or after the _ character for y_=
    def y_= (newValue: Int): Unit =
    {
      if (newValue < bound) _y = newValue
      else printWarning
    }

    private def printWarning = println("WARNING: Out of bounds!")
  }

  def main(args: Array[String]) =
  {
    val point1 = new Point

    // The following 2 lines call the above setter methods x_= and y_=
    point1.x = 99  // This line calls the x_= setter method.
    point1.y = 101 // This line calls the y_= setter method.

    // The following 2 lines call the above getter methods x and y
    println("point1.x = " + point1.x) // This line calls the x getter method.
    println("point1.y = " + point1.y) // This line calls the y getter method.
  }
}

==========================================================================
The following sample code shows a difference between a regular class and
a case class.  If the class Student_2 doesn't contain a "val" or "var"
keyword before the name and id arguments, then john_2.name and john_2.id
references in the println() statement will fail to compile.

Without a "val" or "var" preceding an argument in a regular class,
the argument remains only an argument, and doesn't become a member
of the class (as it does in a case class).  Often, you do NOT want
a member of a class visible outside the class.  So when you do NOT
want an argument passed to a class constructor visible outside the
class, you will use a regular class instead of a case class.

You can reference john_1.name john_1.id in case class Student_1 when the
class Student_2 does NOT contain a "val" or "var" keyword!  Because all
arguments passed to a case class become members of the case class, and
are therefore VISIBLE to code outside the case class.
===============================================================================
object Demo
{
  def main(args: Array[String]):Unit =
  {
    val john_1 = new Student_1("John Doe", "0123456")
    val john_2 = new Student_2("John Doe", "0123456")

    println("john_1.name = " + john_1.name + ", john_1.id = " + john_1.id)
    println("john_2.name = " + john_2.name + ", john_2.id = " + john_2.id)
  }

  // All arguments passed to a case class become members of the case class.
  case class Student_1(var name:String, var id:String)

  // If the name and id arguments below are NOT preceded with a "val"
  // or "var" keyword, the above println will fail to compile!  This
  // is because arguments passed to a regular class do NOT become
  // members of the class unless those arguments are preceded with
  the "val" or "var" keyword.
  class Student_2(var name:String, var id:String)
  {
  }
}
===============================================================================

SOME ADVANCED VISIBILITY OPTIONS
================================
In addition to the above-mentioned modifiers, Scala has other visibility modifiers.
The keywords 'private' and 'protected' can be followed by square brackets [], and
the name of an enclosing scope of one of the following...
1) package
2) class
3) trait
4) object
If you want to a make a method available to all members of the current package
(aka, “package scope”), mark the method as being private to the current package,
with the private[packageName] syntax as in this example:

package com.acme.coolapp.model
{
    class Foo
    {
        private[model] def doX {}
        private def doY {}
    }
    class Bar
    {
        val f = new Foo
        f.doX  // compiles
        f.doY  // won't compile
    }
}

These advanced modifiers will make class members publicly visible for everything
at that scope and closer to the declaration.  The benefit of this is that special
access can be attained for closely-related code without making a member public
to the entire world.  For more details regarding scope, go to this URL...
--> https://alvinalexander.com/scala/how-to-control-scala-method-scope-object-private-package

The following code shows how private[this] differs from the standard private declaration.
Read the comments at the top of the Account class definition...

object Demo
{
  def main(args: Array[String]):Unit =
  {
    val myAccount = new Account

    myAccount.deposit(111)
    println("myAccount.bal = " + myAccount.balance) // PRINTS: myAccount.bal = 111

    myAccount.modifyBalDirectly(222)
    println("myAccount.bal = " + myAccount.balance) // PRINTS: myAccount.bal = 222

    myAccount.modifyBalViaArgument(myAccount, 333)  // Read the Account class comments below.
    println("myAccount.bal = " + myAccount.balance) // PRINTS: myAccount.bal = 333
  }

  /**
    * NOTE: If you replace this line of code:  private var bal = 0
    *       with this line of code:            private[this] var bal = 0
    *       the modifyBalViaArgument() function WILL NOT COMPILE cuz it's
    *       attempting to modify bal via an externally-declared class,
    *       which isn't allowed when it's a private[this] declaration.
    */
  class Account
  {
    private var bal = 0
    // private[this] var bal = 0

    def deposit(amount:Int):Boolean =
    {
      if (amount > 0) { bal += amount; true } else false
    }
    def withdraw(amount:Int):Boolean =
    {
      if (amount > 0 && amount < balance) { bal -= amount; true } else false
    }
    def modifyBalDirectly(value:Int):Unit = { bal = value }
    def modifyBalViaArgument(accountA:Account, value:Int):Unit = { accountA.bal = value }
    def balance = bal
  }
}

====================================================================================
AUXILIARY CLASS CONSTRUCTORS
----------------------------
A Scala Class can have multiple constructors.  The "default" constructor
is known as the "primary constructor".  The programmer can create additional
class constructors known as "auxiliary constructors" by defining them inside
the class, using the "this" keyword as the following example shows.
NOTE: The equal sign (=) in the constructor is optional--it's NOT required.

def this(arg1:datatype, arg2:datatype) = { Constructor code here. }

The following code contains TWO (2) auxiliary constructors defined
by the programmer.  The programmer never defines the primary
constructor because Scala defines it by default.


object Demo
{
  class Company
  {
    private var companyName:String = ""
    private var noOfEmployees:Int  = 0

    def show()
    {
      println("Company Name: " + companyName + " - Number of Employees: " + noOfEmployees)
    }

    // This Auxiliary Constructor contains one argument...
    def this(companyName: String)
    {
      this() // Calls the primary constructor, which is always available by default.
      this.companyName = companyName
    }

    // This Auxiliary Constructor contains two arguments...
    def this(companyName:String, noOfEmployees:Int)
    {
      this(companyName) // Calls the Auxiliary Constructor that has one argument.
      this.noOfEmployees = noOfEmployees
    }
  }


  def main(args: Array[String])
  {
    // Calls the Primary Constructor, which contains zero arguments...
    val company1 = new Company()
    company1.show() // PRINTS: Company Name:  - Number of Employees: 0

    // Calls the auxiliary constructor containing one argument...
    val company2 = new Company("Joe's Pipes, Inc.")
    company2.show() // PRINTS: Company Name: Joe's Pipes, Inc. - Number of Employees: 0

    // Calls the auxiliary constructor containing two arguments...
    val company3= new Company("Hard-Rock Cement Company", 42)
    company3.show() // PRINTS: Company Name: Hard-Rock Cement Company - Number of Employees: 42
  }
}
====================================================================================
