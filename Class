Below are some examples of how to use standard Scala classes (not case classes).

==========================================================================
The following sample code shows a difference between a regular class and
a case class.  If the class Student_2 doesn't contain a "val" or "var"
keyword before the name and id arguments, then john_2.name and john_2.id
references in the println() statement will fail to compile.

Without a "val" or "var" preceding an argument in a regular class,
the argument remains only an argument, and doesn't become a member
of the class (as it does in a case class).

You can reference john_1.name john_1.id in case class Student_1 when the
class Student_2 does NOT contain a "val" or "var" keyword!  Because all
arguments passed to a case class become members of the case class.

object Demo
{
  def main(args: Array[String]):Unit =
  {
    val john_1 = new Student_1("John Doe", "0123456")
    val john_2 = new Student_2("John Doe", "0123456")

    println("john_1.name = " + john_1.name + ", john_1.id = " + john_1.id)
    println("john_2.name = " + john_2.name + ", john_2.id = " + john_2.id)
  }

  // All arguments passed to a case class become members of the case class.
  case class Student_1(var name:String, var id:String)

  // If the name and id arguments below are NOT preceded with a "val"
  // or "var" keyword, the above println will fail to compile!  This
  // is because arguments passed to a regular class do NOT become
  // members of the class unless those arguments are preceded with
  the "val" or "var" keyword.
  class Student_2(var name:String, var id:String)
  {
  }
}


========================================================================
The syntax used for defining getter and setter methods for regular Scala
classes is rather strange.  The following code demonstrates how to use
getter and setter methods for standard Scala classes.  Read the comments
for details.  For more info on Scala classes see:
http://docs.scala-lang.org/tour/classes.html

object Demo
{
  class Point
  {
    private var _x = 0
    private var _y = 0
    private val bound = 100

    def x = { _x } // This is a getter method.
    // The method below is a setter method.  There must be no whitespace before or after the _ character for x_=
    def x_= (newValue: Int): Unit =
    {
      if (newValue < bound) _x = newValue
      else printWarning
    }

    def y = { _y } // This is a getter method.
    // The method below is a setter method.  There must be no whitespace before or after the _ character for y_=
    def y_= (newValue: Int): Unit =
    {
      if (newValue < bound) _y = newValue
      else printWarning
    }

    private def printWarning = println("WARNING: Out of bounds!")
  }

  def main(args: Array[String]) =
  {
    val point1 = new Point

    // The following 2 lines call the above setter methods x_= and y_=
    point1.x = 99  // This line calls the x_= setter method.
    point1.y = 101 // This line calls the y_= setter method.

    // The following 2 lines call the above getter methods x and y
    println("point1.x = " + point1.x) // This line calls the x getter method.
    println("point1.y = " + point1.y) // This line calls the y getter method.
  }
}
========================================================================
