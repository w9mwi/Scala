The following sample program shows how to write the bind() function,
which is used to bind the results of these 3 functions into a single
final result...

1) doubleFunc()
2) tripleFunc()
3) quadFunc()

object Demo
{
  /**
   * Pass this bind() method the following 2 arguments:
   *
   * @multiplyFunc - A function that multiplies 2 Int values and returns the Int result.
   * @multiplier   - An Int value.
   *
   * @return  The Int value returned by:  multiplyFunc(multiplier)
   */
  def bind(multiplyFunc:(Int => Int), multiplier:Int):Int = multiplyFunc(multiplier)

  def doubleFunc(number:Int):Int = number * 2
  def tripleFunc(number:Int):Int = number * 3
  def quadFunc(number:Int):Int   = number * 4

  def main(args: Array[String]): Unit =
  {
    val doubleResult:Int = doubleFunc(100)                // doubleResult = 100 * 2 = 200
    val tripleResult:Int = bind(tripleFunc, doubleResult) // tripleResult = 200 * 2 = 400
    val quadResult:Int   = bind(quadFunc, tripleResult)
    println(s"quadResult = $quadResult")  // PRINTS: quadResult = 2400
  }
}


==================================================================================

The following code sample defines and instantiates a class named Wrapper.
The Wrapper class does nothing more than wrap a single data value
(having the parametric type A) inside the Wrapper class.  The Wrapper
class also implements the following two (2) functions, which enables
the Wrapper class to work within a for() expression.

1) Wrapper.flatMap()
2) Wrapper.map()

A for expression will work with ANY DATA TYPE that implements both
the map() and flatMap() functions--it doesn't have to be a class.

object Demo
{
  /**
   *   The ONLY purpose this Wrapper companion object (and its apply() method)
   *   serves is to allow the Wrapper class to be instantiated without using
   *   the 'new' keyword.
   */
  object Wrapper
  {
    def apply[A](value:A) = new Wrapper(value) // The 'new' keyword is REQUIRED here.
  }

  class Wrapper[A](value:A)
  {
    override def toString = value.toString

    def flatMap[B](func:A=>Wrapper[B]):Wrapper[B] =
    {
      println("flatMap() called.")
      func(value)
    }

    def map[B](func:A=>B):Wrapper[B] =
    {
      println("map() called.")
      val myValue:B = func(value)
      Wrapper(myValue)
    }
  }

  def main(args: Array[String]):Unit =
  {
    val wrap:Wrapper[Int]= Wrapper(123)
    println(wrap) // PRINTS: 123

    // The following code shows that the for() expression
    // can be written using parenthesis (), or using braces {}...
    var resultWrapper:Wrapper[Int] = for (x <- Wrapper(1);
                                          y <- Wrapper(2);
                                          z <- Wrapper(3)) yield x+y+z
    println(resultWrapper) // PRINTS: 6

    resultWrapper = for {x <- Wrapper(1)
                         y <- Wrapper(2)
                         z <- Wrapper(3)} yield x+y+z
    println(resultWrapper) // PRINTS: 6
  }
}

==================================================================================

The following code sample is a modified implementation of the sample
code shown immediately ABOVE.  Where the "class Wrapper" defined in
the code ABOVE is changed to "case class Debuggable" in the code BELOW.

Notice that the for() expression in the ABOVE code sample contains this text:
yield x+y+z
While the for() expression in the code BELOW contains the text:
yield z

The reason the ABOVE for() expression contains "yield x+y+z" is because the
x, y, and z values are calculated independent of one another, so they must
be added within the "yield" statement to generate the correct result.

The BELOW for() expression contains only "yield z" because the x result
is passed to tripleFunc(x), which returns a result into the y value.
The y value is then passed to quadFunc(y), which returns the final
result into the z value.

NOTE: Both for() expressions in the below sample code are
      translated into the following for() expression by the
      Scala compiler.  To view this code in IntelliJ, place
      focus on the first "for" expression in the below code,
      right-click  mouse button, then select from the menu
      "Desugar Scala Code..." and run the program.

      finalResult = doubleFunc(100)
            .flatMap((x: Int) =>
              tripleFunc(x)
                .flatMap((y: Int) =>
                  quadFunc(y)
                    .map((z: Int) => z)
          )
      )

      If a for() expression contains only one generator (<-),
      flatMap() is NOT called, ONLY map() is called.  When a
      for() expression contains MULTIPLE GENERATORS, as in
      the code sample below, flatMap() and map() are called
      in this order...

      1) flatMap() is called on the first generator:  x <- doubleFunc(100)
      2) flatMap() is called on second generator:     y <- tripleFunc(x)
      3) map() is called ONLY on the last generator:  z <- quadFunc(y)

object Demo
{
  case class Debuggable(value:Int, message:String)
  {
    def flatMap(func:Int=>Debuggable):Debuggable =
    {
      // println("flatMap() called.")
      val newValue:Debuggable = func(value)
      // NOTE: newValue.message contains the most-recent message.
      Debuggable(newValue.value, message + "\n" + newValue.message)
    }

    def map[B](func:Int=>Int):Debuggable =
    {
      // println("map() called.")
      val newValue:Int = func(value)
      Debuggable(newValue, message)
    }
  }


  def doubleFunc(a:Int):Debuggable =
  {
    val intResult:Int = a * 2
    val message:String = s"doubleFunc: $a * 2 = $intResult"
    Debuggable(intResult, message)
  }

  def tripleFunc(a:Int):Debuggable =
  {
    val intResult:Int = a * 3
    val message:String = s"tripleFunc: $a * 3 = $intResult"
    Debuggable(intResult, message)
  }

  def quadFunc(a:Int):Debuggable =
  {
    val intResult:Int = a * 4
    val message:String = s"quadFunc: $a * 4 = $intResult"
    Debuggable(intResult, message)
  }

  def main(args: Array[String]):Unit =
  {
    // The following 2 for() expressions show that a for() expression
    // can be written using parenthesis (), or using braces {}.
    var finalResult:Debuggable = for (x <- doubleFunc(100);
                                      y <- tripleFunc(x);
                                      z <- quadFunc(y)) yield z
    println(s"finalResult.value   = ${finalResult.value}")
    println(s"finalResult.message = ${finalResult.message}\n")
    // PRINTS: finalResult.value   = 2400
    //         finalResult.message = doubleFunc: 100 * 2 = 200
    //                               tripleFunc: 200 * 3 = 600
    //                               quadFunc:   600 * 4 = 2400

    finalResult = for {x <- doubleFunc(100)
                       y <- tripleFunc(x)
                       z <- quadFunc(y)} yield z
    println(s"finalResult.value   = ${finalResult.value}")
    println(s"finalResult.message = ${finalResult.message}")
    // PRINTS: IDENTICAL TEXT to the text printed above.
  }
}
