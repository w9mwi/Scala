


object Demo
{
  case class Person(name:String, age:Int)

  def main(args: Array[String]): Unit =
  {
    // ***************************************************************
    // Call the listMatcher() function with the List[Int] data type...
    var list:List[Int] = Nil
    listMatcher(list) // PRINTS: 1) intList = Nil = List()
    list = List(1, 2, 3, 4)
    listMatcher(list) // PRINTS: 2) intList = List(1, 2, 3, 4)
    list = List(1, 2, 3, 4, 5, 6, 7, 8, 9)
    listMatcher(list) // PRINTS: 3) intList = List(1, 2, 3, 4, 5, 6, 7, 8, 9)
    list = List(-123, 2)
    listMatcher(list) // PRINTS: 3) intList = List(-123, 2)
    list = List(99, 666, 777, 888)
    listMatcher(list) // PRINTS: 4) head = 99, tail = List(666, 777, 888)
    list = List(-666)
    listMatcher(list) // PRINTS: 5) intList ends with -666
    list = List(44, 33, 22, 11)
    listMatcher(list) // PRINTS: 6) head = 44,  tail = List(33, 22, 11)
    list = 44 :: List(55, 66, 77)
    listMatcher(list) // PRINTS: 6) head = 44,  tail = List(55, 66, 77)
    list = 44 :: Nil
    listMatcher(list) // PRINTS: 6) head = 44,  tail = List()
    println("================================")

    // **********************************************************
    // Call the anyMatcher() function with the Any data type...
    var anyValue:Any = BigInt("98765432101234567890")
    anyMatcher(anyValue) // PRINTS: 1) anyValue = 98765432101234567890
    anyValue = List()
    anyMatcher(anyValue) // PRINTS: 2) anyValue = Nil = List()
    anyValue = Array()
    anyMatcher(anyValue) // PRINTS: 3) anyValue = Array()
    anyValue = Vector(List(1,2,3), Array('X', 'Y', 'Z'), 777)
    anyMatcher(anyValue) // PRINTS: 4) anyValue = Vector(List(1, 2, 3), [C@23a5fd2, 777)
    anyValue = Person("Jack", 13)
    anyMatcher(anyValue) // PRINTS: 5) Jack is 13 years old.
    anyValue = Array("ABC", "DEF", "UVW", "XYZ")
    anyMatcher(anyValue) // PRINTS: 6) anyValue doesn't match one of the coded data types.
    println("================================")

    // *******************************************
    printNumberAsRanking(0)    // PRINTS:   0 = 0th
    printNumberAsRanking(1)    // PRINTS:   1 = 1st
    printNumberAsRanking(2)    // PRINTS:   2 = 2nd
    printNumberAsRanking(3)    // PRINTS:   3 = 3th
    printNumberAsRanking(4)    // PRINTS:   4 = 4th
    printNumberAsRanking(5)    // PRINTS:   5 = 5th
    printNumberAsRanking(6)    // PRINTS:   6 = 6th
    printNumberAsRanking(7)    // PRINTS:   7 = 7th
    printNumberAsRanking(8)    // PRINTS:   8 = 8th
    printNumberAsRanking(9)    // PRINTS:   9 = 9th
    printNumberAsRanking(10)   // PRINTS:  10 = 10th
    printNumberAsRanking(11)   // PRINTS:  11 = 11th
    printNumberAsRanking(12)   // PRINTS:  12 = 12th
    printNumberAsRanking(13)   // PRINTS:  13 = 13th
    printNumberAsRanking(14)   // PRINTS:  14 = 14th
    printNumberAsRanking(15)   // PRINTS:  15 = 15th
    printNumberAsRanking(16)   // PRINTS:  16 = 16th
    printNumberAsRanking(17)   // PRINTS:  17 = 17th
    printNumberAsRanking(18)   // PRINTS:  18 = 18th
    printNumberAsRanking(19)   // PRINTS:  19 = 19th
    printNumberAsRanking(20)   // PRINTS:  20 = 20th
    printNumberAsRanking(21)   // PRINTS:  21 = 21st
    printNumberAsRanking(22)   // PRINTS:  22 = 22nd
    printNumberAsRanking(23)   // PRINTS:  23 = 23rd
    printNumberAsRanking(24)   // PRINTS:  24 = 24th
    printNumberAsRanking(25)   // PRINTS:  25 = 25th
    printNumberAsRanking(99)   // PRINTS:  99 = 99th
    printNumberAsRanking(100)  // PRINTS: 100 = 100th
    printNumberAsRanking(101)  // PRINTS: 101 = 101th
    printNumberAsRanking(102)  // PRINTS: 102 = 102nd
    printNumberAsRanking(103)  // PRINTS: 103 = 103rd
    printNumberAsRanking(104)  // PRINTS: 104 = 104th
  }

  def listMatcher(intList:List[Int]):Unit = {
    intList match {
      case Nil => println("1) intList = Nil = List()")
      case List(_, _, 3, _) => println(s"2) intList = $intList")
      // "_*" designates a variable number of arguments, which matches on zero or more arguments.
      case List(_, 2, _*) => println(s"3) intList = $intList")
      case 99 :: tail => println(s"4) head = 99, tail = $tail")
      // Test that the list ends with -666.
      // "_*" designates a variable number of arguments, which matches on zero or more arguments.
      // ":+" infix operator appends one element to the list.
      case List(_*) :+ -666 => println("5) intList ends with -666")
      case head :: tail => println(s"6) head = $head,  tail = $tail")
    }
  }

  def anyMatcher(anyValue:Any):Unit = {
    anyValue match {
      case _: BigInt => println(s"1) anyValue = $anyValue")
      case Nil => println("2) anyValue = Nil = List()")
      case Array() => println("3) anyValue = Array()")
      case Vector(List(_, 2, 3), _, 777) => println(s"4) anyValue = $anyValue")
      case Person(n, a) => println(s"5) $n is $a years old.")
      case _ => println("6) anyValue doesn't match one of the coded data types.")
    }
  }

  def printNumberAsRanking(number:Int):Unit = {
    println(s"$number = ${numberRankMatcher(number)}")
  }

  def numberRankMatcher(number:Int):String = {
    number match {
      case x if ((x % 10 == 0) || (x > 9 && x < 15)) => (number + "th")
      case x if (x % 10 == 1) => (number + "st")
      case x if (x % 10 == 2) => (number + "nd")
      case x if (x % 10 == 3) => (number + "rd")
      case _ => (number + "th")
    }
  }
}


========================================================================================
========================================================================================
========================================================================================
========================================================================================


How to use pattern matching via the Scala keyword "match"...

NOTE: In the code samples below, the "match" keyword is
      always used with the "case" keyword, but the "case"
      statement can be constructed differently, such as:

      case 1  => println("January") // Matches on the Int value 1
      case Person("Alice",   25) => println("Hi Alice!") // Matches on a specific Person value.
      case z: Double    => "Double" // Matches on the data type specified the value z.

It's possible to perform pattern matching without using the "match" keyword,
by using a single case statement.  To see how to do that, search this page
for this text:  Seq(2,3,4)
That text is contained in sample code near the bottom of this page.

==================================================================================

object Demo
{
  def main(args: Array[String])
  {
    val mySeq:Seq[Int] = Seq(2,3,4)

See below sample code for details on how match can be used.
==================================================================================

object Demo
{
  /**
    * In this program, we demonstrate that the "match" keyword can be used to:
    * 1) Determine a number's data type by calling printNumberType().
    * 2) Determine a number's value by calling printNumber().
    */
  def main(args:Array[String]):Unit = {
    val numberInt:    Int    = 2
    val numberLong:   Long   = 1234L
    val numberFloat:  Float  = 56.78F
    val numberDouble: Double = 9876.5432D

    printNumberType(numberInt)    // PRINTS: number is of type Int   = 2
    printNumberType(numberLong)   // PRINTS: number is of type Long  = 1234
    printNumberType(numberFloat)  // PRINTS: number is of type Float = 56.78
    printNumberType(numberDouble) // PRINTS: number is an unknown data type.

    printNumber(numberInt)    // PRINTS: number = 2
    printNumber(numberLong)   // PRINTS: number = 1234
    printNumber(numberFloat)  // PRINTS: number = 56.78
    printNumber(numberDouble) // PRINTS: number value is unknown.
  }

  def printNumberType(number:Any) // NOTE: number is defined here as type Any.
  {
    number match {
      case x:Int   => println("number is of type Int   = " + x)
      case y:Long  => println("number is of type Long  = " + y)
      case z:Float => println("number is of type Float = " + z)
      case _       => println("number is an unknown data type.")
    }
  }

  def printNumber(number:Any)  // NOTE: number is defined here as type Any.
  {
    number match {
      case 1      => println("number = 1")
      case 2      => println("number = 2")
      case 1233D  => println("number = 1233")
      case 1234D  => println("number = 1234")
      case 56.77F => println("number = 56.77")
      case 56.78F => println("number = 56.78")
      case _      => println("number value is unknown.")
    }
  }
}

==================================================================================

The following sample code shows how to use a case class for pattern matching,
which you can think of as "data type" matching.  As pattern matching is used
here to determine the data type.

object Demo
{
  case class Pops(var tom:Int)

  def main(args: Array[String])
  {
    val tjb = Pops(8765)

    println(performMatch(456.789D))      // PRINTS: This is a Double: 456.789
    println(performMatch(12345))         // PRINTS: This is an Int:   12345
    println(performMatch(-987.65F))      // PRINTS: This is a Float:  -987.65
    println(performMatch("ZZZ XXX YYY")) // PRINTS: This is a String: ZZZ XXX YYY
    println(performMatch('X'))           // PRINTS: The data type is unknown.
    println(performMatch(tjb))           // PRINTS: This is a class of type Pops: Pops(8765)
  }

  /**
    * Using the match keyword, determine the data type of the argument passed
    * to this function.
    */
  def performMatch(dataType:Any):String =
  {
    dataType match
    {
      // NOTE: The name "rox" used below is arbitrary--you can use any name you want.
        //     rox is the name you give to the value, followed by the colon char. (:),
        //     followed by the data type you're matching on.
      case rox:Pops   => s"This is a class of type Pops: $rox"
      case rox:Int    => s"This is an Int:   $rox"
      case rox:Float  => s"This is a Float:  $rox"
      case rox:String => s"This is a String: $rox"
      case rox:Double => s"This is a Double: $rox"
      case _          => s"The data type is unknown."
    }
  }
}

==================================================================================

import scala.annotation.switch

object Demo
{
  def main(args: Array[String]): Unit =
  {
    var monthNumber = 7;
    // NOTE:  Use @switch to issue possible warning at compile time AND to improve performance.
    (monthNumber: @switch) match
    {
      case 1  => println("January")
      case 2  => println("February")
      case 3  => println("March")
      case 4  => println("April")
      case 5  => println("May")
      case 6  => println("June")
      case 7  => println("July")
      case 8  => println("August")
      case 9  => println("September")
      case 10 => println("October")
      case 11 => println("November")
      case 12 => println("December")
      // If monthNumber is invalid, catch it and print it...
      case error => println("Invalid month number: " + error.toString)
    }

    monthNumber = 77

    // NOTE:  Use @switch to issue possible warning at compile time AND to improve performance.
    val monthName:String = (monthNumber: @switch) match
    {
      case 1  => "January"
      case 2  => "February"
      case 3  => "March"
      case 4  => "April"
      case 5  => "May"
      case 6  => "June"
      case 7  => "July"
      case 8  => "August"
      case 9  => "September"
      case 10 => "October"
      case 11 => "November"
      case 12 => "December"
      case _  => "Invalid Month"  // the default, catch-all
    }
    println(s"monthNumber = $monthNumber,  monthName = $monthName")
  }
}

==================================================================================

object Demo
{
  // Create a case class here, which is used for pattern matching.  When
  // a case class's parameters are NOT specified as val or var, they are
  // val (immutable) by default.
  case class Person(name:String, age:Int)

  def main(args: Array[String])
  {
    // NOTE: Because Person is a case class type, you do NOT need to
    //       use the "new" keyword when creating a new Person object.
    val alice   = Person("Alice",   25)
    val bob     = Person("Bob",     32)
    val charlie = Person("Charlie", 44)
    val tom     = Person("Tom",    999)

    // Here, we create a List holding the 4 Person objects we instantiated
    // above.  Then we loop through each Person in the List.  If the Person
    // in the list matches the name + age params  specified below, we print
    // a greeting.  The last case statement below gets executed when none
    // of the other Person objects match.
    for (person <- List(alice, bob, charlie, tom))
    {
      person match
      {
        case Person("Alice",   25) => println("Hi Alice!")
        case Person("Bob",     32) => println("Hi Bob!")
        case Person("Charlie", 44) => println("Hi Charlie!")
        case Person(name,   age)   => println("Hi " + name + "!" + "  Age = " + age)
      }
    }

    // Print the data for each instantiated class of type Person...
    println()
    println("alice.name = "   + alice.name   + ", alice.age = "   + alice.age)
    println("bob.name = "     + bob.name     + ", bob.age = "     + bob.age)
    println("charlie.name = " + charlie.name + ", charlie.age = " + charlie.age)
    println("tom.name = "     + tom.name +     ", tom.age = "     + tom.age)
  }
}

==================================================================================

// The following is a pattern matching example that
// can determine the data type of a val or var.
object Demo
{
  def main(args: Array[String])
  {
    val fruits:Vector[_] = Vector("apple", "banana", "lime", "orange")
    val inches:Float     = 7.89F
    val miles:Double     = 123.45
    val people:Array[_]  = Array("Jack", "Jill", "Joe")
    val screws:Int       = 3
    val veggies:List[_]  = List("beets", "carrots", "spinach")

    println(getClassAsString(fruits))
    println(getClassAsString(inches))
    println(getClassAsString(miles))
    println(getClassAsString(people))
    println(getClassAsString(screws))
    println(getClassAsString(veggies))
  }

  def getClassAsString(x: Any):String = x match
  {
    // NOTE: You can use "case z:" multiple times and all works fine.
    case z: Double    => "Double"
    case z: Float     => "Float"
    case z: Int       => "Int"
    case z: List[_]   => "List"
    case z: String    => "String"
    case z: Vector[_] => "Vector"
    case _            => "Unknown"
  }
}

==================================================================================

// Read the comments in the purchaseFood() function
// to understand how this "match" sample code works.
object Demo
{
  type FoodAndPrice = (String, Float)

  val mealA:FoodAndPrice = ("spinach",         1.23F)
  val mealB:FoodAndPrice = ("brusselSprouts",  2.45F)
  val mealC:FoodAndPrice = ("hamburger",       6.16F)
  val mealD:FoodAndPrice = ("sturgeonEggs",   24.30F)
  val mealE:FoodAndPrice = ("potBrownies",     4.20F)
  val mealF:FoodAndPrice = ("pondScum",        0.39F)

  def main(args: Array[String]):Unit =
  {
    println("purchaseFood(mealA) = " +  purchaseFood(mealA))
    println("purchaseFood(mealB) = " +  purchaseFood(mealB))
    println("purchaseFood(mealC) = " +  purchaseFood(mealC))
    println("purchaseFood(mealD) = " +  purchaseFood(mealD))
    println("purchaseFood(mealE) = " +  purchaseFood(mealE))
    println("purchaseFood(mealF) = " +  purchaseFood(mealF))
  }

  def purchaseFood(meal:FoodAndPrice):Boolean =
    meal match
    {
      // If the meal is hamburger, purchase it ONLY if the cost < 6.00.
      case ("hamburger", cost) if cost < 6.00 =>  true
      // If the meal is spinach, purchase it regardless of price.
      case ("spinach", _) => true
      // If the meal is potBrownies, AND the cost < 20.00, purchase the meal.
      case ("potBrownies", cost) if cost < 20.00 =>  true
      // Purchase any  meal that costs less than 5.50.
      case (_, cost) if cost < 5.50 => true
      // If any other criteria, do NOT purchase the meal.
      case _ => false
    }
}

==================================================================================

object Demo
{
  // By default, a case class's parameters are val types (when you don't specify
  // a val/var type), so they can NOT be changed.  The following CaseClassDemo
  // class has its params declared as var types, so they CAN be changed--even
  // if the instance of CaseClassDemo is declared a val.
  case class CaseClassDemo(var str:String, var integer:Int, var float:Float)

  // NOTE: The Email, SMS, VoiceRecording, and TrashNotify case classes declarations
  //       below all extend the Notification class, which is an abstract class.
  //       Therefore, these 4 case classes can be treated as a Notification class.
  abstract class Notification
  case class Email(sender:String, title:String, body:String) extends Notification
  case class SMS(caller:String, message:String) extends Notification
  case class VoiceRecording(contactName:String, link:String) extends Notification
  case class TrashNotify() extends Notification

  def main(args: Array[String])
  {
    val myClass1 = CaseClassDemo("Tom", 321, 56.789F)
    println("myClass1.str = "        + myClass1.str +
            ",  myClass1.integer = " + myClass1.integer +
            ",  myClass1.float = "   + myClass1.float)

    // NOTE: Even though myClass1 is a val type, notice that we can alter its member
    //       values here cuz the parameters of CaseClassDemo are declared as var.
    myClass1.str     = "Jim"
    myClass1.integer = 666
    myClass1.float   = 345.67F
    println("myClass1.str = "        + myClass1.str +
            ",  myClass1.integer = " + myClass1.integer +
            ",  myClass1.float = "   + myClass1.float)

    // We now show how case classes are used for pattern matching.  The following
    // 4 classes were all defined (above) as subclasses of the Notification class.
    // Therefore, all 4 of these classes can be considered a Notification class,
    // and therefore can be used to match on the Notification class in the
    // showNotification function below.
    val someEmail:Email = Email("Sender Bender", "Titletown, USA", "Hi.  See you later.")
    val someSms:SMS = SMS("12345", "Are you there?")
    val someVoiceRecording:VoiceRecording = VoiceRecording("Tom", "www.420.com")
    val someTrash:TrashNotify = TrashNotify()

    println()
    println(showNotification(someTrash))
    println(showNotification(someVoiceRecording))
    println(showNotification(someEmail))
    println(showNotification(someSms))
  }

  def showNotification(notification:Notification):String =
  {
    notification match
    {
      case Email(email, title, _) => s"You have an email from $email with title: $title"
      case SMS(number, message) =>  s"You have an SMS from $number! Message: $message"
      case VoiceRecording(name, link) =>  s"You received a Voice Recording from $name!  To hear it, click: $link"
      case _ => s"This is some other type of Notification message--trash it!"
    }
  }
}

==================================================================================

object Demo
{
  trait Computer
  {
    def getRAM():String
    def getHDD():String
    def getCPU():String
    // Every class has a toString() method by default.  Here,
    // we override toString() to return what we want.
    override def toString = "RAM = " + getRAM +", HDD = " + getHDD + ", CPU = " + getCPU
  }

  private class PC(val ram:String, val hdd:String, val cpu:String) extends Computer
  { // 3 methods defined here...
    def getRAM():String = ram;   def getHDD():String = hdd;   def getCPU():String = cpu;
  }

  private class Server(val ram:String, val hdd:String, val cpu:String) extends Computer
  { // 3 methods defined here...
    def getRAM():String = ram;    def getHDD():String = hdd;  def getCPU():String = cpu;
  }

  object ComputerFactory
  {
    // NOTE: The apply() method gets invoked automatically by
    //       Scala when the class constructor gets called.
    def apply(compType:String, ram:String, hdd:String, cpu:String):Computer =
    {
      compType.toUpperCase match { case "PC"     => new PC(ram, hdd, cpu)
                                   case "SERVER" => new Server(ram, hdd, cpu)
                                   case _        => null }
    }
  }

  def main(args:Array[String])
  {
    val pc         = ComputerFactory("pc",        " 2 GB", "500 GB", "2.4 GHz")
    val server     = ComputerFactory("server",    "16 GB", "  1 TB", "2.9 GHz")
    val noComputer = ComputerFactory("undefined", " 0 GB", "  0 GB", "0.0 GHz")
    // The following 3 println statements print this:
    // Factory PC Config:     RAM =  2 GB, HDD = 500 GB, CPU = 2.4 GHz
    // Factory Server Config: RAM = 16 GB, HDD =   1 TB, CPU = 2.9 GHz
    // No Computer:           null
    println("Factory PC Config:     " + pc)
    println("Factory Server Config: " + server)
    println("No Computer:           " + noComputer)
  }
}

==================================================================================

It's possible to perfom pattern matching without using the "match" keyword,
by using a single case statement, as shown in the following code...

object Demo
{
  def main(args: Array[String])
  {
    val mySeq:Seq[Int] = Seq(2,3,4)
    println("mySeq = " + mySeq)       // PRINTS: mySeq = List(2, 3, 4)
    val mySeqZip:Seq[(Int,Int)] = mySeq.zipWithIndex
    println("mySeqZip = " + mySeqZip) // PRINTS: mySeqZip = List((2,0), (3,1), (4,2))

    // Every element of mySeqZip contains a List of (Int,Int) tuples.
    // The following line of code loops though each element of that
    // List, and calls the anonymous function contained in the loop.
    // Each (Int,Int) tuple will match on the case statement, which
    // will then invoke println.
    mySeqZip.foreach { case (value, index) => println(s"$index:$value") }
    // PRINTS:
    // 0:2
    // 1:3
    // 2:4

    // All of the above code can be written in this one line of code...
    Seq(2,3,4).zipWithIndex.foreach { case (value, index) => println(s"$index:$value") }
  }
}
