==================================================================================
NOTE: The Scala Vector class is the recommended “go to” class for
      IMMUTABLE, INDEXED SEQUENTIAL collections.

NOTE: The Scala Vector class is the recommended “go to” class for
      IMMUTABLE, INDEXED SEQUENTIAL collections.

NOTE: The Scala ArrayBuffer class is the recommended “go to” class for
      MUTABLE, INDEXED SEQUENTIAL collections.  ArrayBuffer is an indexed,
      sequential collection.  Use ListBuffer if you prefer a linear,
      sequential collection that is MUTABLE.

Use of List is very common in Scala, but it can sometimes be inefficient
for random access because the time complexity of accessing an element is
O(n). Scala provides an alternative collection, Vector, that is optimized
for random access by storing its elements in a tree structure that has
little memory overhead.  All operations on a Vector happen in effectively
constant time, which means that for large collections it can be significantly
more efficient than List.

Scala Vectors are very similar to Scala Lists.  If you only need to process the head
of a List, then use a List.  But if you need to access elements within the List,
as well as process the List's head, use a Vector because accessing indexed elements
in a Vector is more efficient than accessing indexed elements in a List.

A Scala Vector is immutable, whereas a Scala Array is mutable.
A Scala List can be mutable or immutable.

==================================================================================

// THE FOLLOWING CODE COULD USE LISTS IN PLACE OF VECTORS, AND THE RESULTS
// WOULD BE IDENTICAL.
object Demo
{
  def main(args: Array[String])
  {
    val myVector1: Vector[Int] = Vector(999)
    println("myVector1.head = " + myVector1.head) // PRINTS: myVector1.head = 999
    println("myVector1.tail = " + myVector1.tail) // PRINTS: myVector1.tail = Vector()

    val myVector2: Vector[Int] = Vector(333, 666, 999)
    println("myVector2.head = " + myVector1.head) // PRINTS: myVector2.head = 999
    println("myVector2.tail = " + myVector2.tail) // PRINTS: myVector2.tail = Vector(333, 666)
    println("myVector2(1) = " + myVector2(1))     // PRINTS: myVector2(1) = 333
    println("myVector2(2) = " + myVector2(2))     // PRINTS: myVector2(2) = 666
  }
}
==================================================================================
import scala.collection.immutable.Vector

object Demo
{
  def main(args: Array[String]) =
  {
    var vect:Vector[String] = Vector("A", "B", "C", "D", "E", "F")
    println("A) " + vect)              // PRINTS: A) Vector(A, B, C, D, E, F)
    println("B) vect(4) = " + vect(4)) // PRINTS: B) vect(4) = E

    // The updated() method below does NOT alter the contents
    // of vect, as Vectors are immutable.
    println("C) " + vect.updated(1, "X")) // PRINTS: C) Vector(A, X, C, D, E, F)
    println("D) " + vect)                 // PRINTS: D) Vector(A, B, C, D, E, F)

    // To obtain a Vector where the updated() method "changes" the value of a Vector
    // element, you need obtain the new Vector that the updated() method returns...
    vect = vect.updated(1, "X")
    println("E) " + vect) // PRINTS: E) Vector(A, X, C, D, E, F)
  }
}

==================================================================================

The following sample code shows how to override the Vector's toString() method
(using polymorphism) to obtain the actual x, y, and z values represented by
the Vector3D_2 class.

object Demo
{
  class Vect3D_1(val x: Double, val y: Double, val z: Double)

  class Vect3D_2(val x: Double, val y: Double, val z: Double)
  {
    // Override the toString() method, so it prints human-readable information...
    override def toString(): String =
    {
      "Vect3D_2(" + x + ", " + y + ", " + z + ")"
    }
  }


  def main(args: Array[String]): Unit =
  {
        val myVect_1 = new Vect3D_1(1.2, 2.2, 3.3)
        println("myVect_1 = " + myVect_1.toString) // PRINTS: myVect_1 = Demo$Vect3D_1@16c0663d

        val myVect_2 = new Vect3D_2(1.2, 2.2, 3.3)
        println("myVect_2 = " + myVect_2.toString) // PRINTS: myVect_2 = Vect3D_2(1.2, 2.2, 3.3)
  }
}
==================================================================================
