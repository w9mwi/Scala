object Demo
{
  def main(args: Array[String]): Unit =
  {
    println("factorial(16) = " + factorial(16))
  }

  /**
    * THIS IS A RECURSIVE FUNCTION.
    */
  def factorial(x:BigInt):BigInt =
  {
    if (x <= 1) { return(1) }
    else { x * factorial(x-1) }
  }
}
===============================================================================
object Demo
{
  def main(args: Array[String]) =
  {
    val tom:List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

    // The following 3 statements obtain identical results.
    println("sum_1() = " + sum_1(tom)) // PRINTS: sum_1() = 55
    println("sum_2() = " + sum_2(tom)) // PRINTS: sum_2() = 55
    println("tom.sum = " + tom.sum)    // PRINTS: tom.sum = 55

    // The following 2 statements obtain identical results.
    println("tom.map(x => x*2) = " + tom.map(x => x*2)) // PRINTS: tom.map(x => x*2) = List(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
    println("tom.map(_*2)      = " + tom.map(_*2))      // PRINTS: tom.map(_*2)      = List(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
  }

  /**
    * This sum_1() function uses imperative programming, and
    * returns the same result as the sum_2() function below.
    */
  def sum_1(ints:List[Int]):Int =
  {
    var sum = 0
    for (number <- ints)
    {
      sum += number
    }
    sum
  }

  /**
    * THIS IS A RECURSIVE FUNCTION!
    * This sum_2() function uses functional programming, and
    * returns the same result as the sum_1() function above.
    */
  def sum_2(list:List[Int]):Int =
  list match {
               // The value's name "x" below could be changed any valid name you want.
               case Nil => 0
               case x :: tail => x + sum_2(tail)
             }
}
===============================================================================
NOTE: The following 2 lines are examples of FUNCTION LITERALS...
      (a:Int, b:Int) => a+b
      (x:Double)     => x*x

object Demo
{
  // The following 2 vals (add and square) are initialized as functions.
  // The text to the right of the '=' sign would be considered a function
  // literal, if that text stood alone and was NOT assigned to a val or var.
  val add    = (a:Int, b:Int) => a+b
  val square = (x:Double)     => x*x

  // The following 2 functions have behavior identical
  // to the 2 corresponding function literals above.
  def add2(a:Double, b:Double):Double = a+b
  def square2(x: Double):Double       = x*x

  def main(args: Array[String]): Unit =
  {
    println("add(4,5)  = " + add(4,5))
    println("square(7) = " + square(7))

    println("add2(4,5)  = " + add2(4,5))
    println("square2(7) = " + square2(7))
  }
}
===============================================================================
A HIGHER-ORDER FUNCTION is a function that operates on other functions.
In other words, a HIGHER-ORDER FUNCTION is a function that gets passed
a function as a parameter, and/or returns a function.  The following
code defines the compose_1() and compose_2() functions that are
higher-order functions--as they both get passed functions as parameters,
and they both return a function.  Both compose_1() and compose_2()
return the function f(g(x))...

object Demo
{
  val plus5  = (x:Double) => x+5.0  // EQUIVALENT TO:  def plus5(x:Double):Double = x+5.0
  val square = (x:Double) => x*x    // EQUIVALENT TO:  def square(x:Double):Double = x*x

  // The following compose_1() function gets passed 2 functions as params (f and g),
  // and returns a function that gets passed a Double and returns a Double.
  def compose_1(f:Double => Double, g:Double => Double):(Double => Double) = { x => f(g(x)) }
  val compose_2 = (f:Double => Double, g:Double => Double, x:Double) => f(g(x))

  def main(args: Array[String])
  {
    val a:(Double => Double) = compose_1(plus5, square) // EQUIVALENT TO:  val a  = compose_1(plus5, square)
    val b                    = compose_1(square, plus5) // EQUIVALENT TO:  val b:(Double => Double) = compose_1(square, plus5)

    println("a(3) = " + a(3)) // PRINTS: a(3) = 14.0
    println("b(3) = " + b(3)) // PRINTS: b(3) = 64.0

    // The following 2 calls to compose_2() are identical
    // to the above two function calls a(3) and b(3)...
    println("compose_2(plus5,  square, 3) = " + compose_2(plus5, square, 3)) // PRINTS: compose_2(plus5,  square, 3) = 14.0
    println("compose_2(square, plus5,  3) = " + compose_2(square, plus5, 3)) // PRINTS: compose_2(square, plus5,  3) = 64.0
  }
}

===============================================================================
The following code contains a function named "funcOfGunc", which is
a parametric function (not type dependent) that's equivalent to the
function named "compose2" in the FunctionFGX program immediately above.
(Taken from Page 156 of the book.)

object Demo
{
  def main(args:Array[String]): Unit =
  {
    val plus5  = (x:Double) => x+5
    val square = (x:Double) => x*x

    // First, test the plus5 and square functions defined above...
    println("plus5(3)  = " + plus5(3))  // Prints: plus5(3)  = 8.0
    println("square(3) = " + square(3)) // Prints: square(3) = 9.0

    // Next, initialize myFunc so it points to funcOfGunc...
    val myFunc:(Double=>Double) = funcOfGunc(plus5, square)

    // Finally, call myFunc with a numeric value and print the result...
    var result:Double = myFunc(7.0D)
    println("result = " + result) // Prints: result = 54.0  (NOTE: 54.0 = 5.0+(7.0*7.0))

    // Instead of creating an interim myFunc val above, we can call funcOfGunc
    // here in one step by calling it as a curried function...
    result = funcOfGunc(plus5, square)(7.0D)
    println("result = " + result) // Prints: result = 54.0  (NOTE: 54.0 = 5.0+(7.0*7.0))
  }

  def funcOfGunc[A,B,C](func:(B=>A), gunc:(C=>B)):(C=>A) = { x=>func(gunc(x)) }
}

