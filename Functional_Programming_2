object Demo
{
  def main(args: Array[String]): Unit =
  {
    println("factorial(16) = " + factorial(16))
  }

  /**
    * THIS IS A RECURSIVE FUNCTION.
    */
  def factorial(x:BigInt):BigInt =
  {
    if (x <= 1) { return(1) }
    else { x * factorial(x-1) }
  }
}
===============================================================================
object Demo
{
  def main(args: Array[String]) =
  {
    val tom:List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)

    // The following 3 statements obtain identical results.
    println("sum_1() = " + sum_1(tom)) // PRINTS: sum_1() = 55
    println("sum_2() = " + sum_2(tom)) // PRINTS: sum_2() = 55
    println("tom.sum = " + tom.sum)    // PRINTS: tom.sum = 55

    // The following 2 statements obtain identical results.
    println("tom.map(x => x*2) = " + tom.map(x => x*2)) // PRINTS: tom.map(x => x*2) = List(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
    println("tom.map(_*2)      = " + tom.map(_*2))      // PRINTS: tom.map(_*2)      = List(2, 4, 6, 8, 10, 12, 14, 16, 18, 20)
  }

  /**
    * This sum_1() function uses imperative programming, and
    * returns the same result as the sum_2() function below.
    */
  def sum_1(ints:List[Int]):Int =
  {
    var sum = 0
    for (number <- ints)
    {
      sum += number
    }
    sum
  }

  /**
    * THIS IS A RECURSIVE FUNCTION!
    * This sum_2() function uses functional programming, and
    * returns the same result as the sum_1() function above.
    */
  def sum_2(list:List[Int]):Int =
  list match {
               // The value's name "x" below could be changed any valid name you want.
               case Nil => 0
               case x :: tail => x + sum_2(tail)
             }
}
===============================================================================
NOTE: The following 2 lines are examples of FUNCTION LITERALS...
      (a:Int, b:Int) => a+b
      (x:Double)     => x*x

object Demo
{
  // The following 2 vals (add and square) are initialized as functions.
  // The text to the right of the '=' sign would be considered a function
  // literal, if that text stood alone and was NOT assigned to a val or var.
  val add    = (a:Int, b:Int) => a+b
  val square = (x:Double)     => x*x

  // The following 2 functions have behavior identical
  // to the 2 corresponding function literals above.
  def add2(a:Double, b:Double):Double = a+b
  def square2(x: Double):Double       = x*x

  def main(args: Array[String]): Unit =
  {
    println("add(4,5)  = " + add(4,5))
    println("square(7) = " + square(7))

    println("add2(4,5)  = " + add2(4,5))
    println("square2(7) = " + square2(7))
  }
}
===============================================================================
