
A PARAMETRIC FUNCTION is defined to accept any valid data type that can work with
the function.  For example, instead of defining 3 different add() functions to
work with the Int, Float, and Double data types, you can write a single add()
function as a parametric function, so it'll work with all 3 of those data types.
Here's an example:

object Demo
{
  // The following add() function is written as a parametric function,
  // where the parametric type A represents any numeric data type.
  def add[A](x:A, y:A)(implicit numeric:Numeric[A]):A = numeric.plus(x, y)

  def main(args:Array[String]): Unit =
  {
    println("add(1.23F, 4.56F) = " + add(1.23F, 4.56F)) // PRINTS: add(1.23F, 4.56F) = 5.79
    println("add(1.23D, 4.56D) = " + add(1.23D, 4.56D)) // PRINTS: add(1.23D, 4.56S) = 5.789999999999999
    println("add(123, 456)     = " + add(123, 456))     // PRINTS: add(123, 456)     = 579
    println("add(123, 4.56F)   = " + add(123, 4.56F))   // PRINTS: add(123, 456)     = 127.56
  }
}

====================================================================================================

In the sample code below, we make 4 different functions work with multiple data
types by declaring them as parametric functions.

object Demo
{
  def main(args:Array[String]): Unit =
  {
    println(myFunction('X'))           // PRINTS: X
    println(myFunction("My string"))   // PRINTS: My string
    println(myFunction(123.4F))        // PRINTS: 123.4
    println(myFunction(987.6D))        // PRINTS: 987.6

    println(makeTuple(987.6D, 123.4F)) // PRINTS: (987.6,123.4)
    println(makeTuple('A', "zip"))     // PRINTS: (A,zip)

    println(makeThreeElementList('X', 'Y', 'Z'))        // PRINTS: List(X, Y, Z)
    println(makeThreeElementList("Pop", "Stop", "Top")) // PRINTS: List(Pop, Stop, Top)

    val intList:List[Int] = List(1, 2, 3, 4, 5, 6)
    val result_1:Int = ourFold(intList, 0)(_+_)
    println("result_1 = " + result_1) // PRINTS: result_1 = 21

    val stringList:List[String] = List("A", "B", "C")
    val result_2:String = ourFold(stringList, "D")(_ + "" + _)
    println("result_2 = " + result_2) // PRINTS: result_2 = ABCD
  }

  /**
   * NOTE: The first line of this function can be written either of these 2 ways,
   *       and the resulting behavior will be identical:
   *
   *       1) def ourFold[A,B](list:List[B], base:A)(func:(B,A) => A):A =
   *       2) def ourFold[B,A](list:List[A], base:B)(func:(A,B) => B):B =
   *
   * This is a RECURSIVE, CURRIED FUNCTION.  The List passed to this function can
   * be of any data type that works with the '+' operator, such as Int, Float, String,
   * etc.  The data type must work with the '+' operator because both times this
   * ourFold() function gets called (by the main() function) the 'func' parameter
   * passed to it uses the '+' operator.
   *
   * Since both operands used by the '+' operator must be of the same data type,
   * data type A and data type B MUST BE OF THE SAME DATA TYPE.
   *
   * @param list - A Scala List of type A, where A is a parameterized type.
   * @param base - A value of type B, where B is a parameterized type.
   * @param func - A function defined by the programmer that gets passed a value
   *               of type A, and a value of type B.
   * @return - A value of type A.
   */
  def ourFold[A,B](list:List[B], base:A)(func:(B,A) => A):A =
  {
    // This ourFold() function returns the type A because...
    // The below if() statement returns the param named base, which is of type A.
    // The below else() statement returns the param named func, which returns the type A.
    // Therefore, this ourFold() function must be defined above in its signature
    // as returning the type A.

    // NOTE: Every time this ourFold() function gets called recursively below,
    //       the contents of the func param remain UNCHANGED because the func param
    //       keeps getting passed the same value it was originally called with.
    //       Every time this ourFold() function gets called recursively below,
    //       the list param becomes one (1) element smaller, until the if()
    //       statement executes, which terminates the recursion.
    if   (list.isEmpty) base
    else func(list.head, ourFold(list.tail, base)(func))
  }

  // The T character in the myFunction() definition below represents a DATA TYPE.
  // The 't' character in the myFunction() definition below represents a DATA VALUE.
  // NOTE: The return type ":T" text below is OPTIONAL.
  def myFunction[T](t:T):T = t // The return type ":T" text is optional.

  // The below makeTuple() function takes two parameters (one of type A, one of type B),
  // and returns a tuple of type (A, B).
  // NOTE: The return type ":(A, B)" text below is OPTIONAL.
  def makeTuple[A,B](a:A, b:B):(A, B) = (a, b)

  // The below makeThreeElementList() function takes three parameters all of type A,
  // and returns a List of type A, containing the 3 values passed to this function.
  // NOTE: The return type ":List[A]" text below is OPTIONAL.
  def makeThreeElementList[A](a1:A, a2:A, a3:A):List[A] = List(a1, a2, a3)
}

====================================================================================================

The funcXYZ function defined below is a parametric function.  It's also a curried function.
In the funcXYZ definition, the letters in the [A,B,C,D] section can appear in ANY ORDER,
for example:
funcXYZ[A,B,C,D]...
funcXYZ[B,A,D,C]...
funcXYZ[D,C,A,B]...
The order won't affect the behavior of the code, but it's best to always
keep them in alphabetical order.  Following that text in the function
definition, the correct parametric type must be used wherever one
is referenced.  Read the explanation below to determine how these
parametric types are determined for the funcXYZ function.

object Demo
{
  def funcX(x:Int):Int = { x + 10 }
  def funcY(y:Int):Int = { y - 3 }
  def funcZ(z:Int):Int = { z * 4 }

  // funcXYZ is identical to the below funcXYZ_2 function,
  // except funcXYZ_2 has 3 PARAMETER LISTS.
  def funcXYZ[A,B,C,D](funcX:(C=>D), funcY:(B=>C), funcZ:(A=>B)):(A=>D) =
  {
    x => funcX(funcY(funcZ(x)))
  }

  def main(args:Array[String]): Unit =
  {
    var result:Int = funcXYZ(funcX, funcY, funcZ)(5)
    println("result = " + result) // PRINTS: result = 27

    result = funcXYZ_2(funcX)(funcY)(funcZ)(5)
    println("result = " + result) // PRINTS: result = 27
  }
}

The funcXYZ definition uses parametric types to designate several return types.
You can choose any letters for the parametric types, but YOU SHOULD ALWAYS
begin using letter A, followed by B, C, D, etc. so it's easy to follow the order.
This part explains how the parametric return types are determined.

We begin by observing what funcXYZ returns.  We see that funcXYZ returns this...

x => funcX(funcY(funcZ(x)))

That's a function, which takes a single parameter (x), and returns this line of code:

funcX(funcY(funcZ(x)))  // Where x is the param passed to funcZ

When that line of code is executed, the first thing that executes is funcZ.
Let's begin by saying funcZ takes parameter A (representing the x parameter
value passed to funcZ), and it returns the value B, like this:

A=>B   (funcZ return type)

The next thing that executes is funcY.  The parameter fed to funcY comes
from the value returned by funcZ.  So the funcY return type is:

B=>C   (funcY return type)

The next thing that executes is funcX.  The parameter fed to funcX comes
from the value returned by funcY.  So the funcX return type is:

C=>D   (funcX return type)

Finally, we need to designate what funcXYZ returns.  funcXYZ RETURNS A FUNCTION that
takes the parameter x.  Notice that this x parmameter is literally the same value
that gets passed to funcZ.  Since funcZ defined that x value as type A, funcXYZ
must also use that same A value in its return type.  Therefore, the funcXYZ
return type is:

A=>D   (funcXYZ return type)

Now we can write the funcXYZ definition (shown below) using these return types...

funcXYZ returns: A=>D
funcZ   returns: A=>B
funcY   returns: B=>C
funcX   returns: C=>D

Those are the return types that get plugged into the funcXYZ definition, like this:

def funcXYZ[A,B,C,D](funcX:(C=>D), funcY:(B=>C), funcZ:(A=>B)):(A=>D) =
{
  x => funcX(funcY(funcZ(x)))
}

TAKE NOTE: The A value in the funcXYZ return type is literally the same value
           as the A value in the funcZ return type.  When funcXYZ is executed
           (either as a partially-applied or fully-applied function) funcZ
           is ALWAYS the FIRST parameter list executed.

           The D value in the funcXYZ return type is literally the same value
           as the D value in the funcX return type.  When funcXYZ becomes
           fully applied, funcX is ALWAYS the LAST parameter list executed.

=================================================================================
This code sample shows how to declare and use a parametric class
named "Sequence", as well the parametic method named "map".

WARNING: THIS CODE WILL NOT COMPILE USING SCALA VER. 2.13.4
WARNING: THIS CODE WILL NOT COMPILE USING SCALA VER. 2.13.4
WARNING: THIS CODE WILL NOT COMPILE USING SCALA VER. 2.13.4

import scala.collection.mutable.ArrayBuffer
object Demo
{
  case class Person(firstName:String, lastName:String)
  case class Sequence[A](initialElems: A*) // NOTE: The A* designates a variable number of args of data type A.
  {
    // NOTE: Every line of code within a class (i.e., this Sequence class) that is
    //       NOT a method gets executed when the class's constructor is called.
    //       Therefore, the following two lines of code get executed when this
    //       Sequence class's constructor is called.  You might think that because
    //       elems is a val type, the second line below wouldn't compile because
    //       it's the second time elems is being assigned a value.  But that's not
    //       what's happening.  The first line below is only declaring that elems
    //       is an ArrayBuffer of type A.  The only time elems actually gets
    //       assigned a value is in the second line below.
    private val elems = ArrayBuffer[A]()
    elems ++= initialElems // This line of code is equivalent to this:  for { e <- initialElems } elems += e

    def foreach(block: A => Unit):Unit = { elems.foreach(block) }

    def map[B](func: A => B):Sequence[B] =
    {
      val myMap:ArrayBuffer[B] = elems.map(func)
      new Sequence(myMap: _*) // NOTE: _* transforms myMap into multiple arguments, which the case class Sequence accepts.
    }

    def withFilter(p: A => Boolean):Sequence[A] =
    {
      val tempArrayBuffer:ArrayBuffer[A] = elems.filter(p)
      Sequence(tempArrayBuffer: _*) // NOTE: _* transforms tempArrayBuffer into multiple arguments, which the case class Sequence accepts.
    }

    def flatMap[B](func: A => Sequence[B]): Sequence[B] =
    {
      val mapResult:Sequence[Sequence[B]] = map(func)
      flatten(mapResult) // This flatten() method is defined immediately below.
    }

    def flatten[B](seqOfSeq:Sequence[Sequence[B]]):Sequence[B] =
    {
      var arrayBuf:ArrayBuffer[B] = ArrayBuffer[B]()
      for (listB <- seqOfSeq)
      {
        for (e <- listB)
        {
          arrayBuf += e
        }
      }

      // NOTE: _* below transforms arrayBuf into multiple arguments, which the case class Sequence accepts.
      // So this flatten() function "flattens" the Sequence[Sequence[B]] data type passed to it
      // into a Sequence[B] data type which gets returned.  When this flatten() function gets called,
      // it's literally calling the Sequence class's constructor when this line executes!!!
      Sequence(arrayBuf: _*)
    }
  }

  def main(args:Array[String]): Unit =
  {
    // NOTE: The Sequence class can work with different types (i.e., String, Int, Person etc.) because
    //       it's defined as a parametric class, where the data type is determined at run time.
    val strings:Sequence[String] = Sequence("one", "two", "three")
    val numbers:Sequence[Int]    = Sequence(1, 2, 3, 4, 5)
    val names:Sequence[Person]   = Sequence(Person("Joe", "Blow"), Person("Jack", "Smack"), Person("Frank", "Crank"))

    // NOTE: The following 3 for() loops would cause compile errors if the foreach()
    //       and map() methods weren't defined in the above Sequence class.  The
    //       if() statement embedded within the 2nd for() loop below would cause
    //       a compile error if the withFilter() method wasn't defined in the
    //       above Sequence class.  To summarize...
    //       1) The generators shown below (i.e., "for (str < strings)") work cuz Sequence.foreach() is defined above.
    //       2) The below yield statements work because Sequence.map() is defined above.
    //       3) The below "if i > 2" statement works because Sequence.withFilter() is defined above.
    val strResult:Sequence[String]    = for (str <- strings)           yield str
    val intResult:Sequence[Int]       = for { i <- numbers; if i > 2 } yield i*2
    val personResult:Sequence[Person] = for (name <- names)            yield name

    for (str <- strResult) print(str + " ") // PRINTS: one two three
    println
    for (int <- intResult) print(int + " ") // PRINTS: 6 8 10
    println
    for (name <- personResult) print(name + " ") // PRINTS: Person(Joe,Blow) Person(Jack,Smack) Person(Frank,Crank)
    println

    // The following code REQUIRES the flatMap() method to be defined by the above case class named Sequence.
    val myFriends   = Sequence(Person("Jack", "Daniels"),    Person("Johnny", "Walker"), Person("Jim", "Beam"))
    val joesFriends = Sequence(Person("Joseph", "Schlitz"),  Person("George", "Jones"),  Person("Jim", "Beam"))

    // For a class to work with MULTIPLE for() loop generators (as shown here), that class
    // MUST implement a flatMap() method--as in the above-defined Sequence class.
    val mutualFriends = for
                        {
                          myFriend   <- myFriends   // This is a GENERATOR.
                          joesFriend <- joesFriends // This is another GENERATOR.
                          if (myFriend.firstName == joesFriend.firstName &&
                              myFriend.lastName  == joesFriend.lastName)
                        } yield myFriend
    println("mutualFriends = " + mutualFriends) // PRINTS: mutualFriends = Sequence(ArrayBuffer(Person(Jim,Beam)))
  }
}
=================================================================================
See this parametric function...
def map[A,B](func: (A) => B, list:Seq[A]):Seq[B] =
...on this web page. --> https://github.com/w9mwi/Scala/blob/master/Functional_Programming_1
