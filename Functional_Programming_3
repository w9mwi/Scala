The following is an example of how to use a case class as a function.
===============================================================================
object Demo
{
  case class StringToInt(func: String => Int)

  def main(args:Array[String]): Unit =
  {
    val myString:String = "Once upon a slime.";
    println("myString = " + myString) // PRINTS: myString = Once upon a slime.

    // Here we declare stringLen to be a StringToInt case class type, and
    // pass it an anonymous function that converts a String to an Int...
    var stringLen:StringToInt = StringToInt { tom:String => tom.length } // NOTE: Here we use curly braces {}.

    // NOTE: When the following line of code accesses the StringToInt case class's
    //       func parameter, the String to Int conversion occurs...
    var myStringLength:Int = stringLen.func(myString)
    println("myStringLength = " + myStringLength) // PRINTS: myStringLength = 18


    // THE FOLLOWING CODE IS EASIER TO UNDERSTAND THAN THE ABOVE CODE...
    // Instead of passing in-line code directly to the StringToInt case class
    // as was done above, here we attain the exact same results by passing
    // the StringToInt case class the convertStringToLength() function that's
    // defined below.
    stringLen = StringToInt(convertStringToLength) // NOTE: Here we use parenthesis ().
    myStringLength = stringLen.func(myString)
    println("myStringLength = " + myStringLength) // PRINTS: myStringLength = 18
   }

  def convertStringToLength(str:String): Int =
  {
    str.length
  }
}
===============================================================================

object Demo
{
  type IntDoubleTuple = (Int, Double)

  /**
   * main() function
   */
  def main(args:Array[String]): Unit =
  {
    // In the following line of code, the timer() function defined further below gets called.
    // So the timer() function's func parameter will contain ALL CODE shown in the following
    // line between the {} braces.  So we're passing a function to the timer() function.
    val resultTuple:IntDoubleTuple = timer { Thread.sleep(1000); 42 }
    println("resultTuple._1 = " + resultTuple._1 + ", resultTuple._2 = " + resultTuple._2)
  }

  /**
   * timer() function
   *
   * @param func - This param will literally contain the two lines of executable code that
   *               get passed to it when this timer() function gets called via the main()
   *               function.  Thus showing an example of where a function gets passed to
   *               another function as a parameter.
   * @param A - In this code sample, the 3 references to type A below could be replaced with type Int.
   *
   * @return the tuple (A, Double)
   */
  def timer[A](func: => A) = {
      val startTime: Long = System.nanoTime
      // When the following line of code executes, it executes all code contained in the func
      // param passed to this timer() function.  Since the code contained in that func param
      // returns an Int, codeBlock will get assigned an Int value.
      val funcRetValue:A = func
      println("funcRetValue = " + funcRetValue) // PRINTS: funcRetValue = 42

      val stopTime: Long = System.nanoTime
      val delta: Long = stopTime - startTime
      (funcRetValue, delta / 1000000D)
  }
}

===============================================================================
object Demo
{
  case class Transform2ParamsTo1Param[A, B](func: (A, A) => B)

  def main(args:Array[String]): Unit =
  {
    // NOTE: The following two vals (myCaseClassInstance_1 and myCaseClassInstance_2) are instantiated
    //       identically.  But syntactically, the first val uses curly braces {}, the second val uses
    //       regular parenthesis ().
    val myCaseClassInstance_1 = Transform2ParamsTo1Param{ (str1:String, str2:String) => str1.length + str2.length }
    val myCaseClassInstance_2 = Transform2ParamsTo1Param( (str1:String, str2:String) => str1.length + str2.length )

    println(myCaseClassInstance_1.func("Green Bay",           "Wisconsin")) // PRINTS: 18
    println(myCaseClassInstance_2.func("International Falls", "Minnesota")) // PRINTS: 28

    // Because Transform2ParamsTo1Param defines its func to take generic types,
    // it can still function the same when passed different types.  The following
    // line of code passes to it two Int types,
    val myCaseClassInstance_3 = Transform2ParamsTo1Param{ (int_1:Int, int_2:Int) => int_1 + int_2 }
    println(myCaseClassInstance_3.func(44, 66)) // PRINTS: 110
  }
}
===============================================================================
object Demo
{
  case class StringToIntCaseClass(str:String)(funcPassedAsParam: String => Int)
  {
      // Initialize funcCaseClass to the function passed to the case class.
    def funcCaseClass = funcPassedAsParam(str)
  }

  def main(args:Array[String]): Unit =
  {
    // The first param passed to stringToInt() is a String, the second parameter is a function.
    val func_1:Int = stringToInt("North Pole, Alaska") { str:String => str.length }
    println("func_1 = " + func_1) // PRINTS: func_1 = 18

    // The following code does the same as above, except it uses a function
    // defined in the above case class.
    val func_2:StringToIntCaseClass = StringToIntCaseClass("Christmas Tree") { str:String => str.length }
    println("func_2.funcCaseClass = " + func_2.funcCaseClass) // PRINTS: func_2.funcCaseClass = 14
  }

  def stringToInt(str:String)(func: String => Int) = func(str)
}

===============================================================================

INHERITING FROM FUNCTION TYPES - Page 467
=========================================
When you treat an object like a function and pass it value arguments,
Scala expands that to call the apply() method on that object.  But for
the type to really be a function type that can be used in places that
expect functions (like calls to map(), filter(), foreach(), etc.) your
type must actually be a subtype of the function type.  To understand
this, run the following Scala code and read the in-line comments...

object Demo
{
  class MultiplyByTwo() extends (Int => Int)
  {
    def apply(i:Int) = 2*i
  }

  def main(args: Array[String])
  {
    val myList = List(1,2,3)
    val multiplyByTwo = new MultiplyByTwo()

    // The following 2 println() statements WORK WITH OR WITHOUT the "extends (Int => Int)"
    // text in the above "class MultiplyByTwo()" declaration.
    println("multiplyByTwo.apply(5) = " + multiplyByTwo.apply(5)) // PRINTS: multiplyByTwo.apply(5) = 10
    println("multiplyByTwo(5) = " + multiplyByTwo(5))             // PRINTS: multiplyByTwo(5) = 10

    // The following println() will NOT compile if you comment out the "extends (Int => Int)"
    // text in the above "class MultiplyByTwo()" declaration.
    println("myList.map(multiplyByTwo) = " + myList.map(multiplyByTwo)) // PRINTS: myList.map(multiplyByTwo) = List(2, 4, 6)
    println("myList.map((_ * 2) = " + myList.map(_ * 2))                // PRINTS: myList.map((_ * 2) = List(2, 4, 6)
    println("myList.filter((_ > 2) = " + myList.filter(_ > 1))          // PRINTS: myList.filter((_ > 2) = List(2, 3)
  }
}
