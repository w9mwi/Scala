The following sample code shows how to obtain:

1) Environment Variables
2) System Properties

import scala.collection.JavaConverters._
object Demo
{
  /********************************************
   * main() function
   ********************************************/
  def main(args: Array[String])
  {
    println("\n================================================")
    println("PRINT ALL ENVIRONMENT VALUES:")
    var envVars = System.getenv().asScala
    for ((k,v) <- envVars) { println(s"key = $k\nvalue = $v\n") }
    println("================================================")

    println("PRINT ALL SYSTEM PROPERTIES:\n")
    var sysProps = System.getProperties().asScala
    for ((k,v) <- sysProps) { println(s"key = $k\nvalue = $v\n") }
    println("================================================")

    // Obtain a single environment value...
    println("\nUSER = " + envVars.get("USER")) // PRINTS: USER = Some(tjb)

    // Obtain a single system property...
    println("java.version = " + sysProps.get("java.version")) // PRINTS: java.version = Some(11.0.13)
  }
}

===========================================================================
The following sample program demonstrates how to do the following:

1) How to obtain the Scala version being used.
2) How to execute a Linux script file from a Scala program.

import java.io.{File, PrintWriter}
import scala.sys.SystemProperties
import sys.process._
import scala.util.Properties._

object Demo
{
  def main(args: Array[String]): Unit =
  {
    // The following 2 lines of code print the Scala version being used:
    println(versionNumberString) // PRINTS: 2.12.14
    println(versionString)       // PRINTS: version 2.12.14

    val osName:String = sys.props("os.name").toLowerCase
    if (false == osName.contains("linux"))
    {
      println("FAIL - Operating system is not Linux.")
      return
    }
    val tempDir = getTempDirectory()
    if (tempDir == None)
    {
      println("FAIL - Temporary directory not found.")
      return
    }

    // Create a linux script file in the temporary directory.
    val scriptFilename:String = tempDir + "/" + "script.sh"
    val scriptFile = new File(scriptFilename)

    // Write linux command(s) to the script file.
    val pw = new PrintWriter(scriptFile)
    pw.print("ls -la /home/tjb\n")
    scriptFile.setExecutable(true) // Sets the file's Linux user permission to executable.
    pw.flush()
    pw.close()

    // Execute the linux script file.
    var command:Seq[String] = Seq(scriptFilename)

    // NOTE: Calling command.! executes the Linux script.sh file, sending its output to the terminal.
    //       The following line is commented out because we DON'T want to do that in this program.
    // command!

    // Calling command.!! executes the Linux script.sh file, returning its output to a String.
    val result:String = command.!!
    println(result)
    scriptFile.delete // Delete the linux script file.
  }

  def getFilenames(str:String):Array[String] =
  {
    // str contains all text returned by the "ls -la" Linux command.
    // Store each line of that text into an Array[String]
    var array:Array[String] = str.split('\n')

    array = array.drop(3)  // The first 3 elements of array DON'T designate a filename, so drop them.
    array = array.filter(_.startsWith("-"))  // Filter out all filenames that AREN'T regular files.
    array
  }

  def getTempDirectory():String =
  {
    val sysProps:SystemProperties = new SystemProperties()
    val tempDir:Option[String] = sysProps.get("java.io.tmpdir")
    if (tempDir == None) "" else tempDir.get.toString
  }
}

===========================================================================
