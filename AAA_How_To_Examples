The following sample code shows how to obtain:

1) Environment Variables
2) System Properties

import scala.collection.JavaConverters._
object Demo
{
  /********************************************
   * main() function
   ********************************************/
  def main(args: Array[String])
  {
    println("\n================================================")
    println("PRINT ALL ENVIRONMENT VALUES:")
    var envVars = System.getenv().asScala
    for ((k,v) <- envVars) { println(s"key = $k\nvalue = $v\n") }
    println("================================================")

    println("PRINT ALL SYSTEM PROPERTIES:\n")
    var sysProps = System.getProperties().asScala
    for ((k,v) <- sysProps) { println(s"key = $k\nvalue = $v\n") }
    println("================================================")

    // Obtain a single environment value...
    println("\nUSER = " + envVars.get("USER")) // PRINTS: USER = Some(tjb)

    // Obtain a single system property...
    println("java.version = " + sysProps.get("java.version")) // PRINTS: java.version = Some(11.0.13)
  }
}

===========================================================================
The following sample program demonstrates how to do the following:

1) Obtain the Scala version being used.
2) How to execute Linux commands from a Scala program.

import sys.process._
import scala.util.Properties._

object Demo
{
  def main(args: Array[String]): Unit =
  {
    // The following 2 lines of code print the Scala version being used:
    println(versionNumberString) // PRINTS: 2.12.14
    println(versionString)       // PRINTS: version 2.12.14

    // Here we demonstrate how to run a LINUX command in a Scala program.
    // In this example a file named script.sh is created, which contains
    // this text, which represents a LINUX command:  ls -la /home/tjb/Tom
    // Using the chmod LINUX command, you must set the script.sh file
    // to be an executable.
    val command:Seq[String] = Seq("/home/tjb/Tom/script.sh") // script.sh contains the LINUX command(s).
    val osName = sys.props("os.name").toLowerCase // Obtain the name of the Operating System being used.
    if (osName contains "linux")
    {
      command.!! // Execute the LINUX command(s) entered in the script.sh file.
    }
    else
    {
      println("FAIL - Operating system is not Linux.")
    }
  }
}

===========================================================================
