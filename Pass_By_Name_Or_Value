
When a function is called via Pass-By-Value, the function gets a copy of
the variable passed to it, but the function cannot change the variable
that exists in the calling code.

When a function is called via Pass-By-Reference, the function called
can change the value of the param that it gets passed, so its value
in the code that calls the function gets changed.  In other words,
the function can change a value contained in the calling code.  Scala
does NOT have this Pass-By-Reference capability.  Scala allows ONLY
Pass-By-Name and Pass-By-Value.

Pass-By-Value - This is the standard (very common) way a parameter
                is passed to a function.  The following code snips
                are examples of Pass-By-Value:

                val name:String = "Joe Blow"
                val ssn:String = "123-45-6789"

                deleteRecord(name, ssn)
                deleteRecord("Jane Sixpack", "987-65-4321")

                You can also pass a function to another function.  When
                you pass a function to another function, you can pass
                the function as a parameter "by name" or "by value."

                When you pass a function to another function "by value",
                you are passing that function A BLOCK OF SCALA CODE, instead
                of the name of a function that has been defined.  See
                the code examples below for examples of Pass-By-Value
                functions.  Another name for a Pass-By-Value function
                is a "Nullary Function".

Pass-By-Name - In Pass-By-Name, an argument/parameter is NOT passed by value,
               but is passed as the name of a Scala function that has been
               defined via the Scala 'def' keyword.

               Pass-By-Name isn't a very accurate description.  Better names
               for Pass-By-Name (which aren't really used) could be:
                  * Call-On-Access
                  * Evaluate-On-Access
                  * Evaluate-On-Use
                  * Evaluate-When-Accessed
                  * Evaluate-When-Referenced

Below are some sample programs which demonstrate Scala's Pass-By-Name
and Pass-By-Value feature.  Read in-line comments for explanations.
=========================================================================

object Demo
{
  def main(args: Array[String]): Unit = {
    {
      // This section of code demonstrates Pass-By-Value, where blockOfCode
      // is the value passed to the passByValueFunc() function defined below.
      val blockOfCode = { val randomInt = Math.random().toInt; randomInt + 456 }
      val intNumber = passByValueFunc(blockOfCode)
      println("passByValueFunc(blockOfCode) returned: " + intNumber + "\n")

      // This section of code demonstrates Pass-By-Name, where funcRandomDouble (defined
      // below) is the function name that is passed to the passByNameFunc() function.
      passByNameFunc(funcRandomDouble)
    }

    // NOTE: The reason the blockOfCode return type is designated as  " => Int"  below
    //       (instead of something like  "Int => Int")  is because blockOfCode is just a
    //       block of code, so it accepts no param/arg, and thus the blank space before
    //       the "=>" rocket.  The reason for the Int after the "=>" rocket is because
    //       the last line of blockOfCode evaluates to an Int value.  So blockOfCode
    //       accepts no param/arg, while it returns an Int.
    def passByValueFunc(blockOfCode: => Int) =
    {
      println("passByValueFunc(blockOfCode) is called.")
      blockOfCode // This line executes the Scala code passed to the blockOfCode param/arg.
    }

    // When a function is passed to a function as 'Pass-By-Name', empty parenthesis
    // are used to designate that passedFunc is a defined function (see below) with
    // an EMPTY param/arg list.
    def passByNameFunc(passedFunc:() => Double): Unit =
    {
      // NOTE: To execute the function that gets passed to this function,
      //       you MUST call its apply() method.
      println("func(passedFunc) is called, where passedFunc.apply() = " + passedFunc.apply())
    }

    def funcRandomDouble(): Double =
    {
      println("funcRandomDouble() is called.")
      Math.random()
    }
  }
}

=========================================================================
object Demo
{
  /**
   * This forloop_1 function is a recursive function that has
   * TWO (2) argument lists, which is designated by 2 sets of
   * parenthesis... ()()
   *
   * When this forloop_1 function is called, it gets passed 2 Nullary Functions.
   * Where the first argument is a block of Scala code that evaluates to a Boolean.
   * The second argument list is a block of Scala code that evaluates to a
   * Unit, which means its last line of code doesn't evaluate to any value.
   *
   * You can identify a Nullary Function by its def signature.  Where it
   * contains no param/argument parenthesis before the colon (:), and its
   * return type (after the colon) contains a rocket (=>).  But notice
   * there is no data type designated before the rocket (such as:   => Boolean),
   * and the data type after the rocket is designated by whatever the
   * last line of the block of Scala code evaluates to.
   *
   * The reason a Nullary Function contains no parenthesis before
   * the colon (:) is because a Nullary Function is literally a block
   * of Scala code.  And a stand-alone block of Scala code obviously
   * doesn't get passed any params/args.  That's also the same reason
   * why no data type appears before the rocket (=>), because a stand-alone
   * block of Scala code doesn't get passed any params/args.
   *
   * NOTE: A Nullary Function is another name for a Pass-By-Value Function.
   *       So both argument lists passed to this forLoop function are
   *       Pass-By-Value Functions.
   */
  def forloop_1(rule: => Boolean)(body: => Unit):Unit = {
    if (rule)
    {
      // The following line of code executes the Scala code contained
      // in the 'body' parameter passed to this function.
      body

      // The following line of code is a RECURSIVE function call to
      // this forLoop_1 function.  This recursive function call will
      // terminate only when the 'rule' value passed to this function
      // evaluates to false.
      forloop_1(rule)(body)  // Call this function again.
    }
  }

  /**
   * This forloop_2 function has only one argument list containing 2 parameters.
   * But it behaves exactly the same as the above forloop_1 function.
   */
  def forloop_2(rule: => Boolean, body: => Unit):Unit =
  {
    if (rule)
    {
      // The following line of code executes the Scala code contained
      // in the 'body' parameter passed to this function.
      body

      // The following line of code is a RECURSIVE function call to
      // this forLoop_2 function.  This recursive function call will
      // terminate only when the 'rule' value passed to this function
      // evaluates to false.
      forloop_2(rule, body)
    }
  }

  /*****************************************
   *
   *****************************************/
  def main(args: Array[String])
  {
    var count = 5

    // The forloop_1 function called below has 2 argument lists, which is designated
    // by two sets of parenthesis ()().
    // At first look, it appears forLoop_1 is called with only one argument list,
    // followed by a block of code contained between the braces {}.  However,
    // all the Scala code contained between the braces {} actually comprises
    // the second argument list of the forLoop_1 function!
    forloop_1(count > 0) {
      // The code contained within these curly braces { } is the second
      // argument passed to the forloop_1 function defined below.
      print("count = " + count + ",  ") // PRINTS: count = 5,  count = 4,  count = 3,  count = 2,  count = 1,
      count -= 1
    }
    println("\nEnd: forloop_1\n")


    // In this section we call the forloop_2 function with one argument list containing
    // 2 arguments.  Where the second argument gets passed a block of Scala code.
    count = 5
    forloop_2(count > 0, {
      print("count = " + count + ",  ") // PRINTS: count = 5,  count = 4,  count = 3,  count = 2,  count = 1,
      count -= 1
    })
    println("\nEnd: forloop_2")
  }
}

=========================================================================

object Demo
{
  def main(args: Array[String]): Unit =
  {
    var result:Int = passByValue(9)
    println("result = " + result) // PRINTS: result = 10

    result = passByName({ result = 101; result })
    println("result = " + result) //PRINTS: result = 200


    var number:Int = 2
    number = multiplyThreeTimes({ number })
    println(number) // PRINTS: 8   (Because 2*2*2 = 8)

    number = multiplyThreeTimes({ number += 1; number })
    println(number) // PRINTS: 990   (Because 9*10*11 = 990)

    number = multiplyThreeTimes({ number += 2; number })
    println(number) // PRINTS: 982103808   (Because 992*994*996 = 982103808)
  }

  def passByValue(x: Int): Int =  { x + 1 }

  /**
   * Notice the argument passed to this function is (x: => Int) and
   * NOT (x() => Int).  Here's the difference between those two:
   *
   * (x() => Int) designates a function named x, that takes no arguments,
   *              and returns an Int value.
   *
   * (x: => Int)  x is a param that contains a block of code (one or more
   *              lines of Scala code) that returns an Int value.  So when
   *              the Scala code contained in the x param executes, its
   *              last line of code evaluates to an Int value.
   *              This is an example of PASS-BY-NAME.
   *
   * @param x - The x param stores a block of Scala code, which gets passed
   *            to this function.  The block of code stored in the x param
   *            MUST return an Int value; because the below code adds a 99
   *            Int to that value, and returns the result.
   *
   * @return - an Int value.
   */
  def passByName(x: => Int): Int = { x + 99 }

  /**
   * This is another "pass by name" function, similar to the passByName() function above.
   *
   * The z param passed to this function stores a block of Scala code that evaluates
   * to (returns) an Int value.  So when this function executes z * z * z, it means
   * the Scala code stored in the z param gets executed 3 times!
   *
   * @param z - The z param stores a block of Scala code, which gets passed
   *            to this function.  The block of code stored in the z param
   *            MUST return an Int value every time it executes, which in
   *            this example is THREE (3) times.
   *
   * @return - An Int value.
   */
  def multiplyThreeTimes(z: => Int): Int = { z * z * z }
}

=========================================================================
This example shows TWO (2) examples of how to pass
a block of code to a function.

object Demo
{
  def main(args: Array[String]): Unit = {
  {
    // EXAMPLE 1) Here we call the timer() function (defined below) by first assigning
    //            a block of code to a val, and then passing that val to timer().
    //            This is an example of Pass-By-Name.
    val blockOfCode = { Thread.sleep(444); 123 }
    val (result1, time1) = timer(blockOfCode)
    println("result1 = " + result1 + ",  time1 = " + time1)

    // EXAMPLE 2) Here we call the timer() function (defined below)
    //            by directly passing it a block of code.
    //            This is another example of Pass-By-Name.
    val (result2, time2) = timer { Thread.sleep(888); 456 }
    println("result2 = " + result2 + ",  time2 = " + time2)
  }

  def timer[A](blockOfCode: => A) =
    {
      val startTime:Long = System.nanoTime()
      // The following line executes the block of Scala code contained
      // in the blockOfCode param passed to this function.
      val result:A = blockOfCode
      val stopTime:Long = System.nanoTime()
      val delta = stopTime - startTime
      (result, delta / 1000000D)
    }
  }
}

=========================================================================

=========================================================================

The Array.fill and List.fill functions are CURRIED FUNCTIONS that takes two argument lists.
The first argument list is an Int value specifying the number of elements in the Array/List.
The second argument is a PASS-BY-NAME argument specifying the value of each Array/List element.

WARNING: The following code is only an example that shows how the Array/List fill() function
         behaves.  It's unlikely you'd ever want to write code similar to this, cuz it's
         way too convoluted/confusing.

object Demo
{
  def main(args: Array[String]): Unit =
  {
    var arrayInts:Array[Int] = Array.fill(10)(5)
    for (x <- arrayInts) { print(x + " ") } // PRINTS: 5 5 5 5 5 5 5 5 5 5
    println()

    var listInts:List[Int] = List.fill(5)(10)
    for (x <- listInts) { print(x + " ") } // PRINTS: 10 10 10 10 10
    println()

    var listStrings:List[String] = List.fill(5)("TJB")
    for (x <- listStrings) { print(x + " ") } // PRINTS: TJB TJB TJB TJB TJB
    println()

    // Since the second argument list of Array.fill is PASSED BY NAME,
    // it is evaluated for each element, as demonstrated in the
    // following call to Array.fill, which prints this:
    // Evaluating arg.
    // Evaluating arg.
    arrayInts = Array.fill(2){ println("Evaluating arg."); 5 } // NOTE: Adding () around the {} is optional.
    // The following for() loop prints: 5 5
    for (x <- arrayInts) { print(x + " ") }
    println()

    var number:Int = 1
    // Since the second argument list of List.fill is PASSED BY NAME,
    // it is evaluated for each element, as demonstrated in the
    // following call to List.fill, which prints this: 1 2 4
    listInts = List.fill(3){ print(number + " "); number *= 2; number } // NOTE: Adding () around the {} is optional.
    println()
    // The following for() loop prints: 2 4 8
    for (x <- listInts) { print(x + " ") }
  }
}

=========================================================================

The following code sample is just another example of CURRIED FUNCTIONS
implemented by Arrays and Lists.  In other words, the fill() and tabulate()
function shown below are CURRIED FUNCTIONS.  Read the code sample immediately
above for more details about how these CURRIED FUNCTIONS work.

object Demo
{
  def main(args: Array[String])
  {
    var intArray:Array[Int] = Array.fill(10)(4)
    intArray.foreach(println)  // Prints the number 4 a total of 10 times.

    var stringList:List[String] = List.fill(6)("XYZ")
    stringList.foreach(println)  // Prints the string "XYZ" a total of 6 times.

    var idx:Int = 1
    var intList:List[Int] = List.fill(5){(idx*=2); idx} // NOTE: The second argument is in curly braces.
    intList.foreach(println)  // Prints these 5 elements of intList:  2, 4, 8, 16, 32
    intList = 1::intList      // Prepend a 1 onto intList.
    intList.foreach(println)  // Prints these 6 elements of intList:  1, 2, 4, 8, 16, 32
    intList = List.tabulate(10)(i => i*i)
    intList.foreach(println)  // Prints these 10 elements of intList: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81

    // Create a new 6-element Array, where each element in the Array is initialized with
    // the value: (3*x*x + 5x - 7)   Where the value x is the index of the Array.
    // NOTE: All Arrays and Lists begin with an index value of zero (0).
    intArray = Array.tabulate(6)(x => 3*x*x + 5*x - 7) // NOTE: Uses (), equivalent to the line below.
    intArray = Array.tabulate(6){x => 3*x*x + 5*x - 7} // NOTE: Uses {}, equivalent to the line above.
    intArray.foreach(println) // Prints these 6 elements of intArray: -7, 1, 15, 35, 61, 93

    // NOTE: The last value printed below will ALWAYS be ONE LESS than the maximum value in
    //       the range.  So in this instance, the last value printed is eleven (11)...
    intArray = Array.range(0, 12)
    intArray.foreach(print) // PRINTS: 01234567891011
    println
    intList  = List.range(0, 12)
    intList.foreach(print)  // PRINTS: 01234567891011
  }
}
