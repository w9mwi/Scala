
In Scala you can pass a function an argument that meets
these 3 criteria:

1) Is a function, which you give a name.
2) Returns a data type.
3) Takes as an argument that HAS NO DATA TYPE because
   the argument IS A BLOCK OF SCALA CODE (multiple
   lines of code).

This is called a Nullary Function, which is also known
as a Pass-By-Value Function.

To learn more about Pass-By-Value (Nullary) Functions, see the following URL:
--> https://github.com/w9mwi/Scala/blob/master/Pass_By_Name_Or_Value

=====================================================================
Read in-line comments in the following code sample to see an example
of a Nullary Function, as well as the difference between a Scala
method and a Scala function.  A Scala method can be transformed into
a Scala function by performing an Eta Expansion on it.

object Demo
{
  /****************************************************************
   * This is a METHOD named square_method.  It accepts an Int
   * arg/param, and returns an Int value.
   ***************************************************************/
  def square_method(x:Int):Int = x * x

  /****************************************************************
   * This is a FUNCTION named square_function.  A FUNCTION does
   * NOT accept a arg/param!!!  A function (as opposed to a method)
   * RETURNS A FUNCTION.
   *
   * A FUNCTION (as opposed to a method) is sometimes called a
   * NULLARY FUNCTION because its definition (as shown below)
   * DOESN'T contain an arg/parameter.  Its definition contains
   * only its return type, which is a function (i.e., Int => Int),
   * and the block of code it returns (i.e., x => x * x).
   ***************************************************************/
  def square_function:(Int => Int) = { x => x * x }

  /*********************************************************
   *
   ********************************************************/
  def main(args:Array[String]): Unit =
  {
    println("square_method(2) = " + square_method(2))     // PRINTS: square_method(2) = 4
    println("square_function(2) = " + square_function(2)) // PRINTS: square_function(2) = 4

    val method:(Int => Int) = square_method
    println("method(2) = " + method(2)) // PRINTS: method(2) = 4

    var function:(Int => Int) = square_function
    println("function(2) = " + function(2)) // PRINTS: function(2) = 4

    // In the code below we perform an Eta Expansion on square_method,
    // which returns a FUNCTION (not a method) that's EQUIVALENT to
    // square_function defined above.
    function = square_method _ // Performs an Eta Expansion on square_method
    println("function(2) = " + function(2)) // PRINTS: function(2) = 4
  }
}
