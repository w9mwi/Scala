================================================================================
A Scala for comprehension can contain the following 3 expressions:
1) Generator.  Every for expression begins with a generator.  A for expression
               can contain MULTIPLE multiple generators.  The left side of a
               generator can also be a pattern, as shown in the example below,
               where getAnimals() is a function that rerurns a 3-element tuple,
               and getTheSquirrel() is the defined function which yields the squirrel...

               def getTheSquirrel = for { (dog, cat, squirrel) <- getAnimals yield squirrel }

2) Definition.  A definition binds the pattern on the left to the value of the expression on the right.
3) Filter.      A filter drops all elements from the iteration for which the expression returns false.
                For example, in the for expression shown immediately below
                if (name startsWith "To")
                ...any value for name that does NOT start with the string "To" is dropped from the result.

for
{
  person <- persons         // Generator  (Iterates over all elements contained in persons.)
  name = p.name             // Definition (Equivalent to: val name = p.name)
  if (name startsWith "To") // Filter     (The yielded result contains ONLY persons whose name begins with "To".)
} yield x                   // The for comprehension result is stored in x.

A generator has this general form:   pattern <- expression
A definition has this general form:  pattern = expression
A filter has this general form:      if (expression)

The Scala compiler translates for comprehensions into
a series of method calls that may include...

map()
flatMap()
foreach()
withFilter()

Just as for comprehensions are compiled into those 4 functions, the
opposite is also true.  If you write a class that implements these
4 functions, that class can be used inside a for comprehension.

HOW TO WRITE A DATA TYPE THAT CAN BE USED IN A FOR COMPREHENSION
================================================================
1) If a class defines a foreach() method, it allows for loops
   (with single and multiple generators) like this:
   for (x <- intList) println(x)
   If a for expression implements the Scala "yield" keyword,
   the class must also define a map() method!
2) If a class defines ONLY map(), it can be used in for expressions
   consisting of a SINGLE generator.  A for expression that implements
   the Scala "yield" keyword must also define a map() method.
3) If a class defines BOTH flatMap() and map(), it allows
   for expressions using multiple generators.
4) If a class defines withFilter(), it allows for expressions
   containing an if() statement (aka, a filter).

If you want your class to work well with a for expression, it
should generally implement the 4 methods shown in the following
MyCustomClass, with the method signatures shown below.

abstract class MyCustomClass[A]
{
  def map[B](func: A => B):                    MyCustomClass[B]
  def flatMap[B](func: A => MyCustomClass[B]): MyCustomClass[B]
  def withFilter(x: A => Boolean):             MyCustomClass[A]
  def foreach((x: A => Unit):                  Unit
}
================================================================================
The code sample shown below defines a case class named Sequence, which
implements the four (4) methods mentioned immediately above, so it will
work with for comprehensions.  This Sequence class will work with generic
types, so it's defined below as Sequence[A], where A is the generic type.

import scala.collection.mutable.ArrayBuffer
object Demo
{
  case class Person(firstName:String, lastName:String)
  case class Sequence[A](private val initialElems: A*) // A* designates a variable number of args of type A.
  {
    private val elems:ArrayBuffer[A] = ArrayBuffer[A]()
    // NOTE: The ArrayBuffer ++= operator (shown below) appends multiple elements to the ArrayBuffer.
    //       The ++= operator invokes the Scala for() loop like this:  for { x <- initialElems } elems += x
    elems ++= initialElems // NOTE: ArrayBuffer is a MUTABLE type so the contents of elems can change.

    def flatMap[B](func: A => Sequence[B]):Sequence[B] =
    {
      val mapRes:Sequence[Sequence[B]] = map(func)
      flattenLike(mapRes)
    }

    private def flattenLike[B](seqOfSeq:Sequence[Sequence[B]]):Sequence[B] =
    {
      var xs:ArrayBuffer[B] = ArrayBuffer[B]()
      for (listB:Sequence[B] <- seqOfSeq)
      {
        for (elem <- listB) { xs += elem }
      }
      // NOTE: The below _* is known as "Type Ascription".  It's most often used
      //       for invoking a varargs method with a single Seq parameter.
      //       Ascription is basically just an up-cast performed at compile-time
      //       for the sake of the type checker.
      Sequence(xs: _*)
    }

    def withFilter(func: A => Boolean):Sequence[A] =
    {
      val tmpArrayBuffer:ArrayBuffer[A] = elems.filter(func)
      // NOTE: The below _* is known as "Type Ascription".  It's most often used
      //       for invoking a varargs method with a single Seq parameter.
      //       Ascription is basically just an up-cast performed at compile-time
      //       for the sake of the type checker.
      Sequence(tmpArrayBuffer: _*)
    }

    def map[B](func: A=>B):Sequence[B] =
    {
      val arrayBuf:ArrayBuffer[B] = elems.map(func)
      // NOTE: The below _* is known as "Type Ascription".  It's most often used
      //       for invoking a varargs method with a single Seq parameter.
      //       Ascription is basically just an up-cast performed at compile-time
      //       for the sake of the type checker.
      Sequence(arrayBuf: _*)
    }

    def foreach(block: A => Unit):Unit = { elems.foreach(block) }
  }

  def main(args:Array[String]): Unit =
  {
    // When Sequence(1,2,3) is executed on the following line, the Sequence constructor gets
    // called, where its initialElems variable-number-of-arguments is set to 1, 2, 3.
    val strings:Sequence[Int] = Sequence(1,2,3)

    // The following code REQUIRES the flatMap() method to be defined by the above case class named Sequence.
    val myFriends:Sequence[Person]   = Sequence(Person("Jack",   "Daniels"),  Person("Johnny", "Walker"), Person("Jim", "Beam"))
    val joesFriends:Sequence[Person] = Sequence(Person("Joseph", "Schlitz"),  Person("George", "Jones"),  Person("Jim", "Beam"))

    // For a class to work with MULTIPLE for() loop generators (as shown here), that class
    // MUST implement a flatMap() method--as in the above-defined Sequence class.
    val mutualFriends:Sequence[Person] = for
                                         {
                                           myFriend   <- myFriends   // This is a GENERATOR.
                                           joesFriend <- joesFriends // This is another GENERATOR.
                                           if (myFriend.firstName == joesFriend.firstName &&  myFriend.lastName  == joesFriend.lastName)
                                         } yield myFriend
    println("mutualFriends = " + mutualFriends) // PRINTS: mutualFriends = Sequence(ArrayBuffer(Person(Jim,Beam)))
  }
}
