================================================================================
A Scala for comprehension can contain the following 3 expressions:
1) Generator.  Every for expression begins with a generator.  A for expression
               can contain MULTIPLE generators.  The left side of a generator
               can also be a pattern, as shown in the example below, where
               getAnimals() is a function that rerurns a 3-element tuple, and
               getTheSquirrel() is the defined function which yields the squirrel...

               def getTheSquirrel = for { (dog, cat, squirrel) <- getAnimals yield squirrel }

2) Definition.  A definition binds the pattern on the left to the value of the expression on the right.
3) Filter.      A filter drops all elements from the iteration for which the expression returns false.
                For example, in the for expression shown immediately below, any person whose
                name does NOT start with the string "To" is dropped from the result
                based on this if() statement.  -->  if (name startsWith "To")

for
{
  person <- persons         // Generator  (Iterates over all elements contained in persons.)
  name = p.name             // Definition (Equivalent to: val name = p.name)
  if (name startsWith "To") // Filter     (The yielded result contains ONLY persons whose name begins with "To".)
} yield x                   // The for expression's result is stored in x.

A generator has this general form:   pattern <- expression
A definition has this general form:  pattern = expression
A filter has this general form:      if (expression)

The Scala compiler translates for comprehensions into
a series of method calls that may include...

foreach()    - Any class that implements a for expression REQUIRES the foreach() method be implemented!
               That's because every for expression requires a generator, and the foreach() method
               is required to implement a generator.  This example shows a for expression using
               a single generator:  for (x <- intList) println(x)  // Uses a single generator.
flatMap()    - This method enables a class to work with a for expression that implements
               Scala's "yield" keyword, when that for expression contains MULTIPLE generators.
               If a for expression contains ONLY ONE generator, the class needs to implement
               only the map() function--the flatMap() function won't be called, so it's optional.
map()        - This method enables a class to work with a for expression that implements
               Scala's "yield" keyword.  However, the "yield" keyword will work with
               ONLY ONE generator in the for expression.  If you want a class to work
               in a for expression containing MULTIPLE generators, that class must implement
               BOTH the map() and flatMap() functions.
withFilter() - This method enables a class to work with a filter.

The 4 functions listed imediately above enable a user-defined class to work
with for expressions.  Classes defined by Scala that work with for expressions
also implement these same 4 functions.

If you want your class to work well with a for expression, it
should generally implement the 4 methods shown in the following
MyCustomClass, with the method signatures shown below.

abstract class MyCustomClass[A]
{
  def foreach((x: A => Unit):                  Unit
  def map[B](func: A => B):                    MyCustomClass[B]
  def flatMap[B](func: A => MyCustomClass[B]): MyCustomClass[B]
  def withFilter(x: A => Boolean):             MyCustomClass[A]
}
================================================================================
The code sample shown below defines a case class named Sequence, which
implements the four (4) methods mentioned immediately above, so it will
work with for comprehensions.  This Sequence class will work with generic
types, so it's defined below as Sequence[A], where A is the generic type.

import scala.collection.mutable.ArrayBuffer
object Demo
{
  case class Person(firstName:String, lastName:String)
  case class Sequence[A](private val initialElems: A*) // A* designates a variable number of args of type A.
  {
    private val elems:ArrayBuffer[A] = ArrayBuffer[A]()
    // NOTE: The ArrayBuffer ++= operator (shown below) appends multiple elements to the ArrayBuffer.
    //       The ++= operator invokes the Scala for() loop like this:  for { x <- initialElems } elems += x
    elems ++= initialElems // NOTE: ArrayBuffer is a MUTABLE type so the contents of elems can change.

    def flatMap[B](func: A => Sequence[B]):Sequence[B] =
    {
      val mapRes:Sequence[Sequence[B]] = map(func)
      flattenLike(mapRes)
    }

    private def flattenLike[B](seqOfSeq:Sequence[Sequence[B]]):Sequence[B] =
    {
      var xs:ArrayBuffer[B] = ArrayBuffer[B]()
      for (listB:Sequence[B] <- seqOfSeq)
      {
        for (elem <- listB) { xs += elem }
      }
      // NOTE: The below _* is known as "Type Ascription".  It's most often used
      //       for invoking a varargs method with a single Seq parameter.
      //       Ascription is basically just an up-cast performed at compile-time
      //       for the sake of the type checker.
      Sequence(xs: _*)
    }

    def withFilter(func: A => Boolean):Sequence[A] =
    {
      val tmpArrayBuffer:ArrayBuffer[A] = elems.filter(func)
      // NOTE: The below _* is known as "Type Ascription".  It's most often used
      //       for invoking a varargs method with a single Seq parameter.
      //       Ascription is basically just an up-cast performed at compile-time
      //       for the sake of the type checker.
      Sequence(tmpArrayBuffer: _*)
    }

    def map[B](func: A=>B):Sequence[B] =
    {
      val arrayBuf:ArrayBuffer[B] = elems.map(func)
      // NOTE: The below _* is known as "Type Ascription".  It's most often used
      //       for invoking a varargs method with a single Seq parameter.
      //       Ascription is basically just an up-cast performed at compile-time
      //       for the sake of the type checker.
      Sequence(arrayBuf: _*)
    }

    def foreach(block: A => Unit):Unit = { elems.foreach(block) }
  }

  def main(args:Array[String]): Unit =
  {
    // When Sequence(1,2,3) is executed on the following line, the Sequence constructor gets
    // called, where its initialElems variable-number-of-arguments is set to 1, 2, 3.
    val strings:Sequence[Int] = Sequence(1,2,3)

    // The following code REQUIRES the flatMap() method to be defined by the above case class named Sequence.
    val myFriends:Sequence[Person]   = Sequence(Person("Jack",   "Daniels"),  Person("Johnny", "Walker"), Person("Jim", "Beam"))
    val joesFriends:Sequence[Person] = Sequence(Person("Joseph", "Schlitz"),  Person("George", "Jones"),  Person("Jim", "Beam"))

    // For a class to work with MULTIPLE for() loop generators (as shown here), that class
    // MUST implement a flatMap() method--as in the above-defined Sequence class.
    val mutualFriends:Sequence[Person] = for
                                         {
                                           myFriend   <- myFriends   // This is a GENERATOR.
                                           joesFriend <- joesFriends // This is another GENERATOR.
                                           if (myFriend.firstName == joesFriend.firstName &&  myFriend.lastName  == joesFriend.lastName)
                                         } yield myFriend
    println("mutualFriends = " + mutualFriends) // PRINTS: mutualFriends = Sequence(ArrayBuffer(Person(Jim,Beam)))
  }
}
