
A parametric method is a method defined to accept any data type that applies
to the method's algorithm.  For example, a single method named add() can be
made woth work with 3 different data types (Int, Float, Double) when the
add() method is written to accept a parametric data type.

Parametric data types are often referred to as generic data types.  So...

Parmetric Data Type = Generic Data Type

The following code sample defines the add() method with its argument as
a generic data type so it works with Scala's Numeric.plus() method.  The
add() method specifies the data type as a type 'A', which designates any
data type that works with the Numeric.plus() method.

IMPORTANT: Only Scala methods (which are written using the "def" keyword)
           can implement paramateric data types.  Scala functions (which
           are NOT written using the "def" keyword) can't be written to use
           paramateric data types.  To understand the difference between
           a Scala method and a Scala function, read this section:
           https://github.com/w9mwi/Scala/blob/master/Function_vs_Method

object Demo
{
  // The following add()() method is defined with two (2) argument lists,
  // which usually means it's a curried method.  However, because its
  // second  argument list contains an implicit argument, it's NOT a
  // curried method.  The Scala compiler automatically invokes the
  // implicit parameter when the add()() method is called with only
  // one of its two argument lists.
  //
  // This code shows how to define an add method so it will work with
  // different data types (Byte, Int, Long, Float, Double).  The returned
  // data type will be "upcast" to the highest of the two data types passed
  // to the method.
  def add[A](x:A, y:A)(implicit numeric:Numeric[A]):A = numeric.plus(x, y)

  def main(args:Array[String]): Unit =
  {
    val myByte:Byte     = 123
    val myInt:Int       = 456
    val myLong:Long     = 999999999L
    val myFloat:Float   = 876.543F
    val myDouble:Double = 1234567.890123D

    println("add(myByte, myInt)     = " + add(myByte, myInt))     // PRINTS: add(myByte, myInt)     = 579
    println("add(myInt, myLong)     = " + add(myInt, myLong))     // PRINTS: add(myInt, myLong)     = 1000000455
    println("add(myLong, myFloat)   = " + add(myLong, myFloat))   // PRINTS: add(myLong, myFloat)   = 1.0000009E9
    println("add(myFloat, myDouble) = " + add(myFloat, myDouble)) // PRINTS: add(myFloat, myDouble) = 1235444.433152785
    println("add(myByte, myDouble)  = " + add(myByte, myDouble))  // PRINTS: add(myByte, myDouble)  = 1234690.890123
    println("add(myInt, myFloat)    = " + add(myInt, myFloat))    // PRINTS: add(myInt, myFloat)    = 1332.543
  }
}

========================================================================================

In the sample code below, we make 4 different methods work with multiple data
types by declaring them as parametric methods.

object Demo
{
  def main(args:Array[String]): Unit =
  {
    println(myMethod('X'))           // PRINTS: X
    println(myMethod("My string"))   // PRINTS: My string
    println(myMethod(123.4F))        // PRINTS: 123.4
    println(myMethod(987.6D))        // PRINTS: 987.6

    println(makeTuple(987.6D, 123.4F)) // PRINTS: (987.6,123.4)
    println(makeTuple('A', "zip"))     // PRINTS: (A,zip)

    println(makeThreeElementList('X', 'Y', 'Z'))        // PRINTS: List(X, Y, Z)
    println(makeThreeElementList("Pop", "Stop", "Top")) // PRINTS: List(Pop, Stop, Top)

    val intList:List[Int] = List(1, 2, 3, 4, 5, 6)
    val result_1:Int = ourFold(intList, 0)(_+_)
    println("result_1 = " + result_1) // PRINTS: result_1 = 21

    val stringList:List[String] = List("A", "B", "C")
    val result_2:String = ourFold(stringList, "D")(_ + "" + _)
    println("result_2 = " + result_2) // PRINTS: result_2 = ABCD
  }

  /**
   * This is a RECURSIVE, CURRIED METHOD.  The List passed to this method can
   * be of any data type that works with the '+' operator such as Int, Float, String,
   * etc.  The data type must work with the '+' operator because when this ourFold()
   * method gets called (by the main() method) the 'func' parameter passed to
   * it uses the '+' operator.  Therefore, both operands used by the '+' operator
   * must be of the same data type.
   *
   * @param list - A Scala List of type A, where A is a parameterized type.
   * @param base - A value of type A, where A is a parameterized type.
   * @param func - A function defined by the programmer that gets passed
   *               a value of type A, and a value of type A.
   * @return - A value of type A.
   */
  def ourFold[A](list:List[A], base:A)(func:(A,A) => A):A =
  {
    // NOTE: The "def ourFold..." line immediately above can be written either
    //       of these 3 ways, and the returned result will be identical:
    //       1) def ourFold[A](list:List[A], base:A)(func:(A,A) => A):A =
    //       2) def ourFold[A,B](list:List[B], base:A)(func:(B,A) => A):A =
    //       3) def ourFold[B,A](list:List[A], base:B)(func:(A,B) => B):B =

    // NOTE: Every time this ourFold() method gets called recursively below,
    //       the contents of these two (2) arguments remain UNCHANGED:
    //       1) base
    //       2) func
    //       Every time this ourFold() method gets called recursively below,
    //       the list param becomes one (1) element smaller (because list.tail
    //       gets passed to the list argument), until the if() statement
    //       executes, which terminates the recursion.
    if (list.isEmpty)
      base
    else
      func(list.head, ourFold(list.tail, base)(func))
  }

  // myMethod() below does nothing but return the same value (and data type) it was passed.
  // Since myMethod uses a parametric type, it will work with ALL data types.
  def myMethod[T](t:T):T = t

  // The below makeTuple() function takes two parameters (one of type A, one of type B),
  // and returns a tuple of type (A, B).
  def makeTuple[A,B](a:A, b:B):(A, B) = (a, b)

  // The below makeThreeElementList() function takes three parameters all of type A,
  // and returns a List of type A, containing the 3 values passed to this function.
  def makeThreeElementList[A](a1:A, a2:A, a3:A):List[A] = List(a1, a2, a3)
}

========================================================================================
This code sample shows how to declare and use a parametric class
named "Sequence", as well the parametic method named "map".

import scala.collection.mutable.ListBuffer
object Demo
{
  case class Person(firstName:String, lastName:String)
  case class Sequence[A](private val initialElems: A*) // A* designates a variable number of args of type A.
  {
    // The following 2 lines of code get executed every time the this Sequence class is instantiated.
    private val elems:ListBuffer[A] = ListBuffer[A]()
    elems ++= initialElems // The ++= operator for the ListBuffer class appends multiple elements.
    // NOTE: "elems ++= initialElems" above could be replaced with:  for { x <- initialElems } elems += x

    // When you create your own class (or case class), you must define the following
    // 4 methods inside your class to make the class work with for() expressions.
    // That's what the remaining code inside this Sequence class accomplishes.
    // 1) foreach()
    // 2) map()
    // 3) flatMap()
    // 4) withFilter()

    /*********************************************************
     * NOTE: This foreach() method enables the main() method
     *       below to implement this type of for loop on this
     *       Sequence case class:  for (x <- ints) println(x)
     ********************************************************/
    def foreach(blockOfCode:A => Unit):Unit =
    {
      // The foreach() method always gets passed a block of Scala code.
      elems.foreach{blockOfCode}
    }

    /*********************************************************
     * NOTE: This map() method enables the main() method
     *       below to implement this type of for loop on
     *       this Sequence case class:
     *       for { x <- ints } yield x*2
     ********************************************************/
    def map[B](func: A=>B):Sequence[B] =
    {
      val listBuf:ListBuffer[B] = elems.map(func)
      // NOTE: The :_* below is the syntax used when calling a constructor, or a method,
      //       that accepts a variable number of arguments.  In this example, since
      //       the Sequence constructor is written to accept a variable number of args,
      //       the :_* text must be included.
      Sequence(listBuf.toSeq:_*)
    }

    /*********************************************************
     * NOTE: This flatMap() method enables the main() method
     *       below to implement MULTIPLE GENERATORS within
     *       a for loop on this Sequence case class.
     ********************************************************/
    def flatMap[B](func: A => Sequence[B]):Sequence[B] =
    {
      var listBuf_1:ListBuffer[B] = ListBuffer[B]()
      for (listBuf_2:Sequence[B] <- map(func)) // map(func) calls the above-defined map() method.
      {
        for (elem <- listBuf_2) { listBuf_1 += elem }
      }
      // NOTE: The :_* below is the syntax used when calling a constructor, or a method,
      //       that accepts a variable number of arguments.  In this example, since
      //       the Sequence constructor is written to accept a variable number of args,
      //       the :_* text must be included.
      Sequence(listBuf_1.toSeq:_*)
    }

    /*********************************************************
     * NOTE: This withFilter() method enables the main()
     *       method below to implement filters within
     *       for loops on this Sequence case class:
     ********************************************************/
    def withFilter(func: A => Boolean):Sequence[A] =
    {
      val listBuf:ListBuffer[A] = elems.filter(func)
      // NOTE: The :_* below is the syntax used when calling a constructor, or a method,
      //       that accepts a variable number of arguments.  In this example, since
      //       the Sequence constructor is written to accept a variable number of args,
      //       the :_* text must be included.
      Sequence(listBuf.toSeq:_*)
    }
  } // END: case class Sequence[A]


  def main(args:Array[String]): Unit =
  {
    // NOTE: The Sequence class can work with different types (i.e., String, Int, Person etc.) because
    //       it's defined as a parametric class, where the data type is determined at run time.
    val strings:Sequence[String] = Sequence("one", "two", "three")
    val numbers:Sequence[Int]    = Sequence(1, 2, 3, 4, 5)
    val names:Sequence[Person]   = Sequence(Person("Joe", "Blow"),
                                            Person("Jack", "Smack"),
                                            Person("Frank", "Crank"))

    // NOTE: The following 3 for() loops would cause compile errors if the foreach()
    //       and map() methods weren't defined in the above Sequence class.  The
    //       if() statement embedded within the 2nd for() loop below would cause
    //       a compile error if the withFilter() method wasn't defined in the
    //       above Sequence class.  To summarize...
    //       1) The generators shown below (i.e., "for (str < strings)") work because
    //          Sequence.foreach() is defined above.
    //       2) The below yield statements work because Sequence.map() is defined above.
    //       3) The below "if i > 2" statement works because Sequence.withFilter() is defined above.
    val strResult:Sequence[String]    = for (str <- strings)           yield str
    val intResult:Sequence[Int]       = for { i <- numbers; if i > 2 } yield i*2
    val personResult:Sequence[Person] = for (name <- names)            yield name

    for (str <- strResult) print(str + " ") // PRINTS: one two three
    println
    for (int <- intResult) print(int + " ") // PRINTS: 6 8 10
    println
    for (name <- personResult) print(name + " ") // PRINTS: Person(Joe,Blow) Person(Jack,Smack) Person(Frank,Crank)
    println

    // The following code REQUIRES the flatMap() method to be defined by the above case class named Sequence.
    val myFriends:Sequence[Person]   = Sequence(Person("Jack", "Daniels"),
                                                Person("Johnny", "Walker"),
                                                Person("Jim", "Beam"))
    val joesFriends:Sequence[Person] = Sequence(Person("Joseph", "Schlitz"),
                                                Person("George", "Jones"),
                                                Person("Jim", "Beam"))

    // For a class to work with MULTIPLE for() loop generators (as shown here), that class
    // MUST implement a flatMap() method--as in the above-defined Sequence class.
    val mutualFriends:Sequence[Person] = for
    {
      myFriend   <- myFriends   // This is a GENERATOR.
      joesFriend <- joesFriends // This is another GENERATOR.
      if (myFriend.firstName == joesFriend.firstName &&
        myFriend.lastName  == joesFriend.lastName)
    } yield myFriend
    println("mutualFriends = " + mutualFriends) // PRINTS: mutualFriends = Sequence(ArrayBuffer(Person(Jim,Beam)))
  }
}

========================================================================================

