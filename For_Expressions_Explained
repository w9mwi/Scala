================================================================================
A Scala "for expression" can contain the following 3 expressions:
1) Generator - A generator is the part of a "for expression" containing the <- operator.
               Every "for expression" begins with a generator.  A "for expression"
               can contain MULTIPLE generators.  The left side of a generator
               can also be a pattern, as shown in the example below, where
               getAnimals() is a function that rerurns a 3-element tuple, and
               getTheSquirrel() is the defined function which yields the squirrel...

               def getTheSquirrel = for { (dog, cat, squirrel) <- getAnimals yield squirrel }

2) Definition.  A definition binds the pattern on the left to the value of the expression on
                the right.  A definition is OPTIONAL in a for expression--it's not required.

3) Filter.      A filter drops all elements from the iteration for which the expression returns false.
                For example, in the for expression shown immediately below, any person whose
                name does NOT start with the string "To" is dropped from the result
                based on this if() statement.  -->  if (name startsWith "To")

The following "for expression" sample code shows which parts
are the generator, the definition, and the filter...

for
{
  person <- persons         // Generator  (Iterates over all elements contained in persons.)
  name = p.name             // Definition (Equivalent to: val name = p.name)
  if (name startsWith "To") // Filter     (The yielded result contains ONLY persons whose name begins with "To".)
} yield x                   // The for expression's result is stored in x.


NOTE: The above for expression can be re-written as shown below.
      This eliminates the "name = p.name" definition.  (A
      definition in a for expression is OPTIONAL--not required.)

for {
      p <- people                // This line is the GENERATOR.
      if (p.firstName.startsWith("B")) // This line is the FILTER.
    } yield p.firstName.toUpperCase

A generator has this general form:   pattern <- expression
A definition has this general form:  pattern = expression
A filter has this general form:      if (expression)

The Scala compiler translates "for expressions" into
a series of method calls that may include...

foreach()    - Any class that defines this function can be used in a "BASIC FOR LOOP" (which
               does NOT use the "yield" keyword) using a single generator, or multiple generators,
               like this:  for (x <- intList) println(x)
flatMap()    - This function enables a class to work with a "for expression" (which uses
               the "yield" keyword) that implements MULTIPLE generators.  If a "for expression"
               (which uses the "yield" keyword) contains ONLY ONE generator, the class needs
               to implement ONLY the map() function--the flatMap() function won't be called,
               so it's optional.
map()        - Any class used in a "for expression" (which uses the "yield" keyword)
               MUST implement the map() function!  If the "for expression" (which uses
               the "yield" keyword) contains MULTIPLE generators, that class MUST
               implement BOTH the map() AND flatMap() functions!
withFilter() - This method enables a class to work with a filter.

The 4 functions listed imediately above enable a user-defined class to work
with "for expressions" (which use the "yield" keyword).  Classes defined by
Scala that work with "for expressions" (which use the "yield" keyword)
also implement these same 4 functions.

If you want your class to work well with a for expression (which use the "yield" keyword),
it should generally implement the 4 functions shown in the following MyCustomClass,
with the corresponding function signatures.

abstract class MyCustomClass[A]
{
  def foreach((func: A => Unit):               Unit
  def map[B](func: A => B):                    MyCustomClass[B]
  def flatMap[B](func: A => MyCustomClass[B]): MyCustomClass[B]
  def withFilter(func: A => Boolean):          MyCustomClass[A]
}

================================================================================
This code shows a simple example of how to use a for expression.

object Demo
{
  case class Person(firstName:String, lastName:String)

  def main(args:Array[String]): Unit =
  {
    val states:List[String] = List("Alabama", "Alaska", "Wisconsin", "Wyoming")

    var statesCapitalized:List[String]  = for (x <- states) yield x.toUpperCase
    println(statesCapitalized) // PRINTS:  List(ALABAMA, ALASKA, WISCONSIN, WYOMING)

    statesCapitalized = states.map(_.toUpperCase) // This line generates identical results to the above for expression.
    println(statesCapitalized) // PRINTS:  List(ALABAMA, ALASKA, WISCONSIN, WYOMING)

    // =================================================================

    val people:List[Person] = List(Person("Barney", "Rubble"),
                                   Person("Fred", "Flintstone"),
                                   Person("Betty", "Rubble"))

    val firstNamesStartingWithB:List[String] =
      for {
            p <- people                // This line is the GENERATOR.
            fname = p.firstName        // This line is the DEFINITION.
            if (fname.startsWith("B")) // This line is the FILTER.
          } yield fname.toUpperCase

    println(firstNamesStartingWithB) // PRINTS: List(BARNEY, BETTY)
  }
}

================================================================================

The code sample shown below defines a case class named Sequence, which
implements the four (4) methods mentioned immediately above, so it will
work with "for expressions" (which use the "yield" keyword).  This Sequence
class will work with generic types, so it's defined below as Sequence[A],
where A is the generic type.

WARNING: THE FOLLOWING SCALA SAMPLE CODE DOESN'T COMPILE WITH SCALA 2.13.5

import scala.collection.mutable.ArrayBuffer
object Demo
{
  case class Person(firstName:String, lastName:String)
  case class Sequence[A](private val initialElems: A*) // A* designates a variable number of args of type A.
  {
    private val elems:ArrayBuffer[A] = ArrayBuffer[A]()
    // NOTE: The ArrayBuffer ++= operator (shown below) appends multiple elements to the ArrayBuffer.
    //       The ++= operator invokes the Scala for() loop like this:  for { x <- initialElems } elems += x
    elems ++= initialElems // NOTE: ArrayBuffer is a MUTABLE type so the contents of elems can change.

    def flatMap[B](func: A => Sequence[B]):Sequence[B] =
    {
      val mapRes:Sequence[Sequence[B]] = map(func)
      flattenLike(mapRes)
    }

    private def flattenLike[B](seqOfSeq:Sequence[Sequence[B]]):Sequence[B] =
    {
      var xs:ArrayBuffer[B] = ArrayBuffer[B]()
      for (listB:Sequence[B] <- seqOfSeq)
      {
        for (elem <- listB) { xs += elem }
      }
      // NOTE: The below _* is known as "Type Ascription".  It's most often used
      //       for invoking a varargs method with a single Seq parameter.
      //       Ascription is basically just an up-cast performed at compile-time
      //       for the sake of the type checker.
      Sequence(xs: _*)
    }

    def withFilter(func: A => Boolean):Sequence[A] =
    {
      val tmpArrayBuffer:ArrayBuffer[A] = elems.filter(func)
      // NOTE: The below _* is known as "Type Ascription".  It's most often used
      //       for invoking a varargs method with a single Seq parameter.
      //       Ascription is basically just an up-cast performed at compile-time
      //       for the sake of the type checker.
      Sequence(tmpArrayBuffer: _*)
    }

    def map[B](func: A=>B):Sequence[B] =
    {
      val arrayBuf:ArrayBuffer[B] = elems.map(func)
      // NOTE: The below _* is known as "Type Ascription".  It's most often used
      //       for invoking a varargs method with a single Seq parameter.
      //       Ascription is basically just an up-cast performed at compile-time
      //       for the sake of the type checker.
      Sequence(arrayBuf: _*)
    }

    def foreach(block: A => Unit):Unit = { elems.foreach(block) }
  }

  def main(args:Array[String]): Unit =
  {
    // When Sequence(1,2,3) is executed on the following line, the Sequence constructor gets
    // called, where its initialElems variable-number-of-arguments is set to 1, 2, 3.
    val strings:Sequence[Int] = Sequence(1,2,3)

    // The following code REQUIRES the flatMap() method to be defined by the above case class named Sequence.
    val myFriends:Sequence[Person]   = Sequence(Person("Jack",   "Daniels"),  Person("Johnny", "Walker"), Person("Jim", "Beam"))
    val joesFriends:Sequence[Person] = Sequence(Person("Joseph", "Schlitz"),  Person("George", "Jones"),  Person("Jim", "Beam"))

    // For a class to work with MULTIPLE for() loop generators (as shown here), that class
    // MUST implement a flatMap() method--as in the above-defined Sequence class.
    val mutualFriends:Sequence[Person] = for
                                         {
                                           myFriend   <- myFriends   // This is a GENERATOR.
                                           joesFriend <- joesFriends // This is another GENERATOR.
                                           if (myFriend.firstName == joesFriend.firstName &&  myFriend.lastName  == joesFriend.lastName)
                                         } yield myFriend
    println("mutualFriends = " + mutualFriends) // PRINTS: mutualFriends = Sequence(ArrayBuffer(Person(Jim,Beam)))
    mutualFriends.foreach(println)              // PRINTS: Person(Jim,Beam)
  }
}
