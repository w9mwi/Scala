Abstraction - You want to write code where some part of what it does is not fully
              specified until it is used.  When a class is defined as abstract
              (using the "abstract" key word), it means that at least one of its
              members or methods must be overridden in a subclass.  When you want
              a class member or method that CAN'T be overridden in a subclass,
              use the "final" keyword.  You can also define an entire class using
              the "final" key word, which means that no subclass can modify it.
              The most common example of why you'd want to define a class as
              "final" is when you want that class to be immutable--so no subclass
              can modify it.

Polymorphism - This word literally means "many shapes."  An example of polymorphism
               would be to implement a sorting algorithm that could be applied
               to multiple data types, such as Int, String, Float, Double, Char.

               There are 2 types of polymorphism.  UNIVERSAL polymorphism implies the
               code can work with an infinite number of types.  AD-HOC polymorphism
               works with only a finite number of types.
               
               UNIVERSAL polymorphism consists of these TWO different forms...

               1) Inclusion Polymorphism - Is obtained from sub-typing.  In other
                  words, when all elements of one type are also part of another
                  type.  Some examples of this are the Scala types Double, Float,
                  Long, Int, Short, and Byte, which are all subtypes of the type
                  AnyVal.  This is accomplished via inheritance, which is also
                  known as subtyping.  So if class B inherits from class A, class
                  B is a subtype of class A, and class B has access to all data
                  and methods available in class A. However the parent class A does
                  NOT have access to the data and methods defined in class B.

               2) Parametric Polymorphism - Examples of this type of polymorphism can
                  be seen by reading the Parametric_Functions section at this URL...
                  --> https://github.com/w9mwi/Scala/blob/master/Parametric_Functions

=========================================================================================
Any class you define in Scala has its own toString() method that exists by default,
because it's inherited from the AnyRef class.  The following sample code shows the default
Scala toString() method that gets called on a user-defined class named Vect3D_1.  That
toString() method (inherited from the AnyRef class) returns a string that contains
cryptic information.  To fix that problem, we defined another class named Vect3D_2 that
overrides the default toString() method, so it prints human-readable info.

object Demo
{
  class Vect3D_1(val x:Double, val y:Double, val z:Double)

  class Vect3D_2(val x:Double, val y:Double, val z:Double)
  {
    // Override the toString() method, so it prints human-readable information...
    override def toString():String = { "Vect3D_2(" + x +", " + y + ", " + z + ")" }
  }

  def main(args: Array[String]):Unit =
  {
    val myVect_1 = new Vect3D_1(1.2, 2.2, 3.3)
    println("myVect_1 = " + myVect_1.toString) // PRINTS: myVect_1 = Demo$Vect3D_1@16c0663d

    val myVect_2 = new Vect3D_2(1.2, 2.2, 3.3)
    println("myVect_2 = " + myVect_2.toString) // PRINTS: myVect_2 = Vect3D_2(1.2, 2.2, 3.3)
  }
}
=========================================================================================
The following Scala sample code shows how the Rectangle and Circle classes defined below
extend the Shape class.  Then, the Rectangle and Circle classes override the inherited
Shape.area() and Shape.circumference methods.

import java.awt.Color
import scala.math.Pi
import scala.swing.Graphics2D
import java.awt.geom.Ellipse2D
import java.awt.geom.Rectangle2D

object Demo
{
  // NOTE: Shape is defined as an abstract class.  An abstract class cannot be instantiated
  //       because it only exists as a "template" class to be used by classes that extend it.
  //       (See the commented-out line in the main() method below.)
  //       Methods and members that are not given a value in a class are considered to be
  //       abstract.  Therefore, if just one class member is not set to a value (via the =
  //       sign), or just one class method is not set to a value (via the = sign), then
  //       the entire class must be defined as abstract.
  abstract class Shape(private var color:Color)
  {
    // The 'protected' keyword is used by methods in this Shape class.  A 'protected' method
    // means the only classes that can call it are the Shape class, and classes that inherit
    // (extends) this Shape class.
    protected def area:Double             = 0.0
    protected def circumference:Double    = 0.0
    protected def draw(g:Graphics2D):Unit = { g.setPaint(color) }
  }

  // NOTE: When this Rectangle extends Shape, it passes the color parameter to Shape.
  class Rectangle(val width:Double, val height:Double, color:Color) extends Shape(color)
  {
    override def area:Double             = width*height
    override def circumference:Double    = 2.0 * width*height
    override def draw(g:Graphics2D):Unit =
    {
      super.draw(g) // Whenever Circle.draw() is called, this line calls Shape.draw() to paint the Rectangle.
      g.fill(new Rectangle2D.Double(0.0, 0.0, width, height))
    }
  }

  // NOTE: When this Circle extends Shape, it passes the color parameter to Shape.
  class Circle(val radius:Double, color:Color) extends Shape(color)
  {
    override def area:Double             = Pi * radius * radius
    override def circumference:Double    = 2.0 * math.Pi * radius
    override def draw(g:Graphics2D):Unit =
    {
      super.draw(g) // Whenever Circle.draw() is called, this line calls Shape.draw() to paint the Circle.
      g.fill(new Ellipse2D.Double(0.0, 0.0, 2.0 * radius, 2.0*radius))
    }
  }

  def main(args: Array[String]):Unit =
  {
    // NOTE: The following commented-out line of code will NOT compile cuz Shape is an abstract (anonymous) class.
    //       If you remove the 'abstract' keyword from the Shape class, the following line will compile.
    // val myShape:Shape      = new Shape(Color.BLUE)

    val myRectangle:Rectangle = new Rectangle(6.54, 9.87, Color.PINK)
    val myCircle:Circle       = new Circle(5.67, Color.YELLOW)

    println("myRectangle.area() = " + myRectangle.area) // PRINTS: myRectangle.area() = 64.54979999999999
    println("myCircle.area()    = " + myCircle.area)    // PRINTS: myCircle.area()    = 100.9987480609929
  }
}

==========================================================================================
