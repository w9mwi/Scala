The following code demonstrates how to pass a function to
another function as an argument, and explains the syntax.

import java.io.PrintWriter
import scala.io.{BufferedSource, Source}

object Demo
{
  def main(args: Array[String]):Unit =
  {
    val inputFileName  = "/home/tbouril/in.txt"
    val outputFileName = "/home/tbouril/out.txt"

    // Each alpha char contained in inputFileName will be incremented by one,
    // and written to outputFileName...
    mapFile(inputFileName, outputFileName, x=> (x.toInt + 1).toChar)
  }

  /**
    * NOTICE: The third argument to the mapFile() function below is
    *         written like this:  addOneToChar:(Char => Char)
    *
    * HOW TO UNDERSTAND THE SYNTAX OF PASSING A FUNCTION TO A FUNCTION...
    * When a function is passed to a function as an argument, that argument
    * is written just like it's an Int, Float, String, or List data type.
    * In other words, a colon separates the argument name and the argument
    * data type.  Like this...
    *
    * function(myInt:Int, myString:String, myFloat:Float, myList:List, myFunction:(Float => Int))
    *
    * Where myFunction is the name of the parameter, and "Float => Int" represents
    * a function that gets passed a Float type, and returns an Int type.
    */
  def mapFile(inputFileName:String, outputFileName:String, addOneToChar:(Char => Char)):Unit =
  {
    val input:BufferedSource = Source.fromFile(inputFileName)
    val pw:PrintWriter = new PrintWriter(outputFileName)
    for (char <- input)
    {
      pw.print(if ((char >= 'a' && char <= 'z') || (char >= 'A' && char <= 'Z')) addOneToChar(char) else char)
    }
    input.close()
    pw.close()
  }
}
