The following code shows how to use the printf() function with Scala numbers, chars, and strings.

object Demo
{
  def main(args: Array[String]):Unit =
  {
    // The following declarations are the main number types available in Scala,
    // followed by code that shows how to print those number types.
    val numberBigInt:BigInt    = BigInt("-99999999999999999999999876543210")
    val numberBinary:Int       = Integer.parseInt("1110100", 2) // Returns the binary number as a Base-10 Int.
    val numberBinaryBig:BigInt = BigInt("10100011011111010", 2) // Returns the binary number as a Base-10 BigInt.
    val numberDouble:Double    = 345678E21D
    val numberFloat:Float      = -6.66F
    val numberHex:Int          = 0xFEDCBA
    val numberHexBig:BigInt    = BigInt("FEDCBA9876543210", 16) // Returns the hexadecimal number as a Base-10 BigInt.
    val numberInt:Int          = Int.MaxValue
    val numberLong:Long        = Long.MinValue
    val numberOctal:Int        = Integer.parseInt("7654321", 8) // Returns the octal number as a Base-10 Int.
    val numberOctalBig:BigInt  = BigInt("76543217654321234", 8) // Returns the octal number as a Base-10 BigInt.

    // NOTE: numberBinary is printed as a binary number by calling Java's Integer.toBinaryString() method.
    //       There is no similar method available to print numberBinaryBig as a binary number.
    //       %c - Print Char characters.
    //       %d - Print integer number types (BigInt, Int, Long) as Base-10 integers.
    //       %e - Print floating-point number types (Double, Float) in Base-10 exponent notation.
    //       %f - Print floating-point number types (Double, Float).
    //       %g - Print floating-point number types (Double, Float).  Substitutes %e or %f dependent on the number.
    //       %o - Print integer numbers in octal format.
    //       %s - Print Strings.
    //       %x - Print integer numbers in hexadecimal format.
    printf("numberBinary = %s\n", Integer.toBinaryString(numberBinary))
    printf("numberBigInt = %d  -  numberLong = %d  -  numberInt = %d\n", numberBigInt, numberLong, numberInt)
    printf("numberDouble = %f  -  numberFloat = %f\n", numberDouble, numberFloat)
    printf("numberDouble = %e  -  numberFloat = %e\n", numberDouble, numberFloat)
    printf("numberDouble = %g  -  numberFloat = %g\n", numberDouble, numberFloat)
    printf("numberHex = %x  -  numberHexBig = %x\n", numberHex, numberHexBig)
    printf("numberOctal = %o  -  numberOctalBig = %o\n", numberOctal, numberOctalBig)

    // The following code shows how to print a Char and String.
    val myChar:Char         = 'X'
    val cityAndState:String = "Manitowoc, Wisconsin"
    printf("myChar = %c  -  cityAndState = %s\n", myChar, cityAndState)
  }
}
