
The "case class" Scala type is different from the regular
Scala "class" type in following ways...

1) You can create instance of case class WITHOUT the "new" keyword.
2) You can do pattern matching with case classes.
3) The constructor parameters of case classes are treated as
   public values and can be accessed directly, like this...

   abstract class Term
   case class Var(name: String) extends Term
   val x = Var("Pop a top.");
   println(x.name) // PRINTS: Pop a top.

4) The "case class" Scala type automatically inherits
   from the type Serializable.

==================================

A case class will work with pattern matching, where a regular class will
NOT work with pattern matching.

When creating a new case class, using the "new" keyword is optional--so
generally it's not used.  When creating a regular class, the "new"
keyword is REQUIRED.

A case class implements the copy() method (example shown below), but
a regular class does NOT implement the copy() method.

Both case classes and regular classes can be defined so they're member
values are "var" (mutable) or val (immutable).  By default (meaning
the "val" or "var" is not specified), member values are val.

Anything you can accomplish with a case class, you can accomplish with
a regular class.  A case class just adds a lot of code for you that you'd
have to otherwise manually write for a regular class.  For example:

1) All data passed to a case class are automatically turned into
   public vals by default.
2) A case class automatically creates a companion object that has an
   apply() method, so you can create instances of the case class
   without using the "new" keyword.
3) A copy() method is automatically created that has default arguments
   for all the class's member values.
4) A case class allows for pattern matching.

For more details about case classes, read the following web pages:
--> http://www.alessandrolacava.com/blog/scala-case-classes-in-depth/
--> http://www.scala-lang.org/old/node/258
--> http://docs.scala-lang.org/tour/case-classes.html

object Demo
{
  // By default, a case class's parameters are val types (when you don't specify
  // a val/var type), so they can NOT be changed.  The following CaseClassDemo
  // class has its params declared as var types, so they CAN be changed--even
  // if the instance of CaseClassDemo is declared a val.
  case class CaseClassDemo(var str:String, var integer:Int, var float:Float)

  // NOTE: The Email, SMS, VoiceRecording, and TrashNotify case classes declarations
  //       below all extend the Notification class, which is an abstract class.
  //       Therefore, these 4 case classes can be treated as a Notification class.
  //       Since all 4 of these case classes are of the Notification class type,
  //       all 4 of these case classes can be used within a "match" statement
  //       for pattern matching (as shown below).  Then, the "match" statement
  //       below is used to determine which subclass (Email, SMS, VoiceRecording
  //       or TrashNotify) has been passed to the showNotification() function.
  abstract class Notification
  case class Email(sender:String, title:String, body:String) extends Notification
  case class SMS(caller:String, message:String) extends Notification
  case class VoiceRecording(contactName:String, link:String) extends Notification
  case class TrashNotify() extends Notification

  def main(args: Array[String])
  {
    // NOTE: When declaring a case class, using the "new" keyword is optional,
    //       so generally "new" is NOT used, as in the following line of code...
    val myClass1 = CaseClassDemo("Tom", 321, 56.789F)
    println("myClass1.str = "        + myClass1.str +
            ",  myClass1.integer = " + myClass1.integer +
            ",  myClass1.float = "   + myClass1.float)

    // NOTE: Even though myClass1 is a val type, notice that we can alter its member
    //       values here cuz the parameters of CaseClassDemo are declared as var.
    myClass1.str     = "Jim"
    myClass1.integer = 666
    myClass1.float   = 345.67F
    println("myClass1.str = "        + myClass1.str +
            ",  myClass1.integer = " + myClass1.integer +
            ",  myClass1.float = "   + myClass1.float)

    // We now show how case classes are used for pattern matching.  The following
    // 4 classes were all defined (above) as subclasses of the Notification class.
    // Therefore, all 4 of these classes can be considered a Notification class,
    // and therefore can be used to match on the Notification class in the
    // showNotification function below.
    val someEmail:Email = Email("Sender Bender", "Titletown, USA", "Hi.  See you later.")
    val someSms:SMS = SMS("12345", "Are you there?")
    val someVoiceRecording:VoiceRecording = VoiceRecording("Tom", "www.420.com")
    val someTrash:TrashNotify = TrashNotify()

    println()
    println(showNotification(someTrash))
    println(showNotification(someVoiceRecording))
    println(showNotification(someEmail))
    println(showNotification(someSms))
  }

  def showNotification(notification:Notification):String =
  {
    notification match
    {
      case Email(email, title, _) => s"You have an email from $email with title: $title"
      case SMS(number, message) =>  s"You have an SMS from $number! Message: $message"
      case VoiceRecording(name, link) =>  s"You received a Voice Recording from $name!  To hear it, click: $link"
      case _ => s"This is some other type of Notification message--trash it!"
    }
  }
}
=====================================================================
=====================================================================
object Demo
{
  case class Point3D(x:Double, y:Double, z:Double)
  case class Student(name:String, assignments:List[Double], tests:List[Double], quizzes:List[Double])

  def main(args: Array[String]) =
  {
    // NOTE: The "new" keyword is optional when declaring a case class, so it's NOT used here...
    val point1  = Point3D(1.1, 2.2, 3.3)
    val point2  = Point3D(4.4, 5.5, 6.6)
    println("The distance between point1 and point2 = " + distance(point1, point2))

    val student = Student("Tom", Nil, List(81.5, 77.7, 92.3, 90.5), List(89.9, 78.5, 65.5, 99.9))
    println(studentAverage(student))
  }

  /**
    * This function returns the distance between the two 3D points passed as params.
    *
    * @param point1
    * @param point2
    */
  def distance(point1:Point3D, point2:Point3D):Double =
  {
    val dx = point1.x - point2.x
    val dy = point1.y - point2.y
    val dz = point1.z - point2.x
    math.sqrt(dx*dx + dy*dy + dz*dz)
  }

  /**
    * Calculate the weighted average of a single student's assignments + tests +  quizzes.
    */
  def studentAverage(student:Student):String =
  {
    val assignmentAvg = if (student.assignments.isEmpty) 0.0
                        else student.assignments.sum /  student.assignments.length
    val quizAvg = if (student.quizzes.length < 2) 0.0
                  else (student.quizzes.sum - student.quizzes.min) / (student.quizzes.length - 1) // Discard lowest quiz score
    val testAvg = if (student.tests.isEmpty) 0.0
                  else (student.tests.sum / student.tests.length)

    // The following println() is used for debugging only...
    println("assignmentAvg = " + assignmentAvg + ",  quizAvg = " + quizAvg + ",  testAvg = " + testAvg)

    // Now, return the weighted average of the student's assignments + tests + quizzes...
    (student.name +"'s weighted average = " + (0.5 * assignmentAvg + 0.3 * testAvg + 0.2 * quizAvg))
  }
}
=====================================================================
=====================================================================
object Demo
{
  case class Point3D(x:Double, y:Double, z:Double)
  case class Student(name:String, assignments:List[Double], tests:List[Double], quizzes:List[Double])

  def main(args: Array[String]) =
  {
    // NOTE: The "new" keyword is optional when declaring a case class, so it's NOT used here...
    var point:Point3D   = Point3D(1.1, 2.2, 3.3)
    var student:Student = Student("Tom", Nil, List(81.5, 77.7, 92.3, 90.5), List(89.9, 78.5, 65.5, 99.9))

    // The following code shows how to create a copy of an existing case class instance,
    // where the copied case class has its values modified by using NAMED ARGUMENTS
    // as parameters to the copy() method.  NOTE: The "copy" terminology is a bit
    // misleading in this example because the values of the copied case class are
    // different than the copied-from case class!
    println("point = " + point)  // Prints: point = Point3D(1.1,2.2,3.3)
    point = point.copy(x=4.4, y=5.5, z=6.6)
    println("point = " + point)  // Prints: point = Point3D(4.4,5.5,6.6)

    // Notice that in this example, we pass only the "tests" param. to the copy() method,
    // which means ONLY the "tests" param of the copied Student class is changed.
    println(student) // Prints: Student(Tom,List(),List(81.5, 77.7, 92.3, 90.5),List(89.9, 78.5, 65.5, 99.9))
    student = student.copy(tests=44.4::student.tests)
    println(student) // Prints: Student(Tom,List(),List(44.4, 81.5, 77.7, 92.3, 90.5),List(89.9, 78.5, 65.5, 99.9))

    // Finally, create a List consisting of three Point3D classes.  Then, loop through each Point3D
    // element in the List, and print the sum of the Point3D's x + y + z values...
    var points:List[Point3D] = List(Point3D(9.9, 8.8, 7.7), Point3D(6.6, 5.5, 4.4), Point3D(3.3, 2.2, 1.1))
    for(point <- points)
    {
      println("Sum of Point3D(" + point.x + ", " + point.y + ", " + point.z + ") = "  + (point.x + point.y + point.z))
    }
  }
}
