Sequence is a trait.  If you look at the following println statement, you'll
see the elements of the Sequence were rendered into an Immutable List.

val seq: Seq[String] = Seq("Plain Donut", "Strawberry Donut", "Chocolate Donut")
println(s"seq = $seq") // PRINTS: seq = List(Plain Donut, Strawberry Donut, Chocolate Donut)

The following two lines of Scala code are equivalent, as
a List of Int values is identical to a Seq of Int values.

val a = Seq(1,2,3)
val a:Seq[Int] = List(1,2,3)

SEE: https://stackoverflow.com/questions/10866639/difference-between-a-seq-and-a-list-in-scala

===============================================================================================
The following code sample shows the similarities between the Seq type and the List type.

object Demo
{
  def main(args: Array[String]):Unit =
  {
    // NOTE: A List CAN'T be assigned a Seq, but a Seq CAN be assigned a List.
    val myList_1:List[Int] = List(1,2,3)
    val myList_2:List[Int] = Seq(1,2,3).toList // This line won't compile without calling the toList() method.
    val mySeq_1:Seq[Int]   = Seq(1,2,3)
    val mySeq_2:Seq[Int]   = List(1,2,3)
    if (myList_1 == myList_2  &&  myList_1 == mySeq_1  &&  myList_1 == mySeq_2)
    {
      // NOTE:   Both Seq and List types print as List types!
      // PRINTS: myList_1 = List(1, 2, 3),  myList_2 = List(1, 2, 3),  mySeq_1 = List(1, 2, 3),  mySeq_2 = List(1, 2, 3)
      println("myList_1 = " + myList_1 + ",  myList_2 = " + myList_2 + ",  mySeq_1 = " + mySeq_1 + ",  mySeq_2 = " + mySeq_2)
    }
  }
}
