// How to use the keyword 'type'.  You can create your own type
// names in Scala by using existing types.  When you create your
// own type, that type name should begin with a single uppercase
// character.  Here are two examples--type Counter and type Location.
object Demo
{
  type Counter  = Int
  type Location = (Int, Int, Int)

  def main(args: Array[String]): Unit =
  {
    var miles:Counter = 0
    val milesLimit:Int = 10

    do
    {
      println("miles = " + miles)
      miles += 1
    }
    while(miles <= milesLimit)

    val beginPoint:Location = (0, 0, 0)
    val endPoint:Location   = (2, 10, 3)
    var coordinate:Location = beginPoint
    var x:Int = 0; var y:Int = 0; var z:Int = 0;

    println("coordinate = (" + coordinate._1 + ", " + coordinate._2 + ", " + coordinate._3 + ")")
    while(coordinate._1 < endPoint._1 || coordinate._2 < endPoint._2 || coordinate._3 < endPoint._3)
    {
      if (coordinate._1 < endPoint._1)  x += 1;
      if (coordinate._2 < endPoint._2)  y += 1;
      if (coordinate._3 < endPoint._3)  z += 1;
      coordinate = (x, y, z)
      println("coordinate = (" + coordinate._1 + ", " + coordinate._2 + ", " + coordinate._3 + ")")
    }
  }
}
// ================================================================
// ================================================================
// The following is an example of how to use implicit class.
// Using an implicit class, you can add new methods to an
// existing class.  In this example we add the decrement()
// and increment() methods to the existing Scala String class.
//
// Assume you create a var of type String named 'state'.  Now,
// when you type the text 'state.', your new decrement and
// increment methods will appear in the list of methods to
// choose from.
//
// For this to work, your implicit class must have a single
// parameter (that matches the type of an existing Scala type),
// and your new method name(s) must be different than existing
// method names of that type.
object Demo
{
  class EnhancedString(val str: String)
  {
    def decrement:String = { str.map(ch => (ch - 1).toChar) }
    def increment:String = { str.map(ch => (ch + 1).toChar) }
  }
  implicit def stringToString(str: String) = new EnhancedString(str)

  def main(args: Array[String]): Unit =
  {
    var state:String = "Wisconsin"
    state = state.increment
    println(state)
    state = state.decrement
    println(state)
  }
}

// ================================================================
// ================================================================

HOW TO PASS A FUNCTION A VARIABLE NUMBER OF ARGUMENTS - PART 1
See the PART 2 example below to see a different way of doing the same thing.

object Demo
{
  def main(args:Array[String]): Unit =
  {
    var averageScore = calculateAverage() // Pass no parameters!
    printScore(averageScore, "averageScore = ") // PRINTS: The score is not a number.

    averageScore = calculateAverage(1.23, 4.56, 7.89)
    printScore(averageScore, "averageScore = ") // PRINTS: averageScore = 4.56
  }

  /**
    * @param numbers - A Sequence of Double values representing a variable number of arguments.
    *                  A variable number of arguments is represented by the asterisk (*)
    *                  character in the parameter list.
    * @return a Double value representing the average of all values passed to this function.
    */
  def calculateAverage(numbers:Double *): Double =
  {
    println(numbers) // PRINTS: WrappedArray(1.23, 4.56, 7.89)
    numbers.sum / numbers.length
  }

  /**
    * @param score
    * @param msg
    */
  def printScore(score:Double, msg:String):Unit =
  {
    if   (score.isNaN) println("The score is not a number.")
    else println(msg + score)
  }
}

==========================================================================

HOW TO PASS A FUNCTION A VARIABLE NUMBER OF ARGUMENTS - PART 2
This is an alternative to doing the same thing done in the PART 1 example above,
as it passes a List[Double] to the calculateAverage() method as a single
argument instead of hard-coded values.

object Demo
{
  def main(args:Array[String]): Unit =
  {
    var scores:List[Double] = List()
    var averageScore = calculateAverage(scores:_*)
    printScore(averageScore, "averageScore = ")    // PRINTS: The score is not a number.

    scores = List(1.23, 4.56, 7.89)
    println("scores = " + scores) // PRINTS: scores = List(1.23, 4.56, 7.89)
    averageScore = calculateAverage(scores:_*)
    printScore(averageScore, "averageScore = ") // PRINTS: averageScore = 4.56
  }

  /**
    * @param numbers - A Sequence of Double values representing a variable number of arguments.
    *                  A variable number of arguments is represented by the asterisk (*)
    *                  character in the parameter list.
    * @return a Double value representing the average of all values passed to this function.
    */
  def calculateAverage(numbers:Double *): Double =
  {
    numbers.sum / numbers.length
  }

  /**
    * @param score
    * @param msg
    */
  def printScore(score:Double, msg:String):Unit =
  {
    if   (score.isNaN) println("The score is not a number.")
    else println(msg + score)
  }
}

// ================================================================
// ================================================================

object Demo
{
  // THIS EXAMPLE DEMONSTRATES USING "NAMED ARGUMENTS" AND "DEFAULT VALUES".
  // SEE PAGES 232-233
  def main(args: Array[String]) =
  {
    val a:Double = 1.2;  val b:Double = 3.4
    val c:Double = 5.6;  val x:Double = 6.7

    val a2:Double = 1.2;  var b2:Double = 3.4
    val c2:Double = 5.6;  var x2:Double = 6.7

    // In the following call to evalQuadratic(), the values passed are
    // received by evalQuadratic() in the order that they're passed.
    val answer1 = evalQuadratic(a, b, c, x)
    println("answer1 = " + answer1)

    // The following call to evalQuadratic() uses NAMED ARGUMENTS.
    // When NAMED ARGUMENTS are used, the values passed to the function
    // must be assigned (when the function is called) to the same
    // parameter names defined in the function.  So in this case,
    // the order of values a, b, c, and x doesn't matter.
    val answer2 = evalQuadratic(b=3.4, x=6.7, c=5.6, a=1.2)
    println("answer2 = " + answer2)

    // The following call to evalQuadratic() also uses NAMED ARGUMENTS.
    // But in this instance, the params are assigned values via other
    // vals/vars, instead of being assigned literal values as in the
    // previous example.
    val answer3 = evalQuadratic(b=b2, x=x2, c=c2, a=a2)
    println("answer3 = " + answer3)

    // Finally, functions can also use DEFAULT VALUES.  When a
    // function uses DEFAULT VALUES, the function call does NOT
    // pass the DEFAULT VALUES to the function--as shown in the
    // following example.
    val answer4 = funcWithDefaultValues(1, 2)
    val answer5 = funcWithDefaultValues(1, 2, 3)
    val answer6 = funcWithDefaultValues(1, 2, 3, 4)
    println("answer4 = " + answer4 + ",  answer5 = " + answer5 + ",  answer6 = " + answer6)
  }

  def evalQuadratic(a:Double, b:Double, c:Double, x:Double):Double =
  {
    val x2 = x*x
    a*x2+b*x+c
  }

  /**
    * When this function is called with 2 params, the last 2 params become
    * default values.  When this function is called with 3 params, the last
    * 1 param becomes a default value.  When this function is called with 4
    * params, no default values are used.
    */
  def funcWithDefaultValues(a:Int, b:Int, c:Int = 123, d:Int = 456):Double =
  {
    a + b + c + d
  }
}
