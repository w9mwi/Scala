object Demo
{
  import scala.collection.mutable

  def main(args: Array[String])
  {
    val inputFile:String = "/home/tbouril/ch8.txt"
    println("=========================================================\n" +
            "CONTENTS OF THE TEXT FILE BEING PROCESSED:\n" + io.Source.fromFile(inputFile).mkString)
    println("=========================================================\n" +
            "RESULTS RETURNED BY wordCount_1():\n" + wordCount_1(inputFile))
    println("=========================================================\n" +
            "RESULTS RETURNED BY wordCount_2():\n" + wordCount_2(inputFile))
    println("=========================================================")
  }

  /**
    * Convert the text contained in the fileName passed to this function
    * to a Map consisting of the (Int, Count) tuple, where Int represents
    * the word count, and String is the word that gets counted.
    *
    * @param fileName
    * @return A Map where each element is an (Int, String) tuple
    *         where Int is the word count, and word is the word
    *         that gets counted.
    */
  def wordCount_1(fileName:String):mutable.Map[String, Int] =
  {
    import scala.io.BufferedSource
    val source:BufferedSource = io.Source.fromFile(fileName)
    // NOTE 1: The split() method below splits the string into multiple strings using
    //         a single space character (" ") as the delimiter.  The + character after
    //         the space character designates that ONE OR MORE space characters will
    //         act as a delimiter.  If a * character was used, it would mean that
    //         ZERO OR MORE space characters would act as the delimiter.
    //
    // NOTE 2: The following line of commented-out code comes from the uniqueWords()
    //         function shown on my GitHub "Sets" page.  Notice the difference between
    //         it and the following line of code in this wordCount() function--they're
    //         very similar, but not identical...
 // val words:Set[String] = source.getLines().toSeq.flatMap(_.split(" +")).map(_.filter(_.isLetter).toLowerCase).toSet
    val words:Seq[String] = source.getLines().toSeq.flatMap(_.split(" +")).map(_.filter(_.isLetter).toLowerCase)

    // NOTE: At this point in the code, the contents of val words is
    //       now identical to the contents of the input text file.

    // The following line of code instantiates a mutable.Map of the type we need.  Think
    // of mutable.Map[String, Int]() as analogous to List[String]() or List[Int]() an
    // empty mutable.Map[String, Int] is empty just like List[String]() or List[Int]()
    // are empty.
    val wordCounts:mutable.Map[String, Int] = mutable.Map[String, Int]()

    // NOTE: At this point in the code, the wordCounts Map is empty.  Since wordCounts
    //       is a mutable.Map we can add new elements to it, or update existing elements,
    //       by using the += operator below...
    for (w <- words)
    {
      if (wordCounts.contains(w))
      {
        // If this code executes, the wordCounts Map already contains a key for the word w.
        // So the following line of code CHANGES/UPDATES the word count of word w by 1 (one).
        wordCounts += (w -> (wordCounts(w) + 1))
      }
      else
      {
        // If this code executes, it means the word w does NOT yet exist in the wordCounts Map,
        // so we add it here for the first time, with a word count of 1 (one)...
        wordCounts += (w -> 1)
      }
    }
    source.close()
    wordCounts
  }

  /**
    * Read the comments in the wordCount_1() function above,
    * as this wordCount_2() function gets passed the same value,
    * and returns the same results.  Only the code is different.
    */
  def wordCount_2(fileName:String):mutable.Map[String, Int] =
  {

    import scala.io.BufferedSource
    val source:BufferedSource = io.Source.fromFile(fileName)

    // The following line of code is identical to the line used in the wordCount_1() function above.
    val words:Seq[String] = source.getLines().toSeq.flatMap(_.split(" +")).map(_.filter(_.isLetter).toLowerCase)

    // NOTE: At this point in the code, the contents of val words is
    //       now identical to the contents of the input text file.

    // NOTE: The following call foldLeft() is a curried function, which contains 2 parameter lists.
    //       The first parameter list contains the compiled value that you start with (an empty Map).
    //       The second parameter is the function used by foldLeft() to obtain the result.
    //       So foldLeft() uses an empty Map, which gets populated with the returned result.
    //       Then, the function passed to foldLeft as the second parameter is called
    //       with each element contained in the words Seq., one word at a time until
    //       all words in it have been processed.
    //
    //       The FIRST TIME time the function passed to foldLeft() gets called...
    //       (map, word) - map is empty
    //                     word is the first word contained in the words Seq.
    //
    //       The SECOND TIME the function passed to foldLeft() gets called...
    //       (map, word) - map contains the first word in the words Seq., with a count of one.
    //                     word is the second word contained in the words Seq.
    //       This repeats until all words in the words Seq. have been processed.
    val wordCounts = words.foldLeft(mutable.Map[String,Int]())  ((map, word) => {
                                                                                  if (map.contains(word))
                                                                                    map + (word -> (map(word) + 1))
                                                                                  else
                                                                                    map + (word -> 1)
                                                                                })
    source.close()
    wordCounts
  }
}
