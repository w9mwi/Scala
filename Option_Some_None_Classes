NOTE: A major weakness of using Option is that it
      doesn't tell you why something failed.  If you
      need to know why something failed, you can use
      "Try" or "Either" (not mentioned within this web
      page) in the Scala API.

The Try/Failure/Success classes are similar to the
Option/Some/None classes...
SEE ALSO --> https://github.com/w9mwi/Scala/edit/master/Try_Success_Failure_classes

Instead of returning an object when a function succeeds,
and null when it fails, your function can instead return
an instance of the "Option" class, where the "Option"
object will in reality be a "None" object or a "Some"
object.
 
 NOTE: Both the "Some" class and the "None" class are
       children of the "Option" class.

The find method on a sequence (i.e., Array, List, etc.) returns
an "Option" type of "None" when a value cannot be found.


=============================================================
The following code sample shows how to determine if an Option class
is a Some object (a valid value) or a None object (an invalid value).

object Demo
{
  def main(args:Array[String]): Unit =
  {
    val intList:List[Int]  = List[Int](7, 4, 6, 3, 9, 1)

    // Find the first value in intList that is < 5, which is 4...
    var result:Option[Int] = intList.find(_ < 5)
    if (result == None)
      println("1) result = None") // This line of code does NOT execute.
    else if (result == Some)
      println("2) result.get = " + result.get) // This line of code does NOT execute.
    else if (result == Some(4))
      println("3) result.get = " + result.get) // PRINTS: 3) result.get = 4

    // Find the first value in intList that is > 10, which does NOT exist...
    result = intList.find(_ > 10)
    if (result == None)
      println("4) result = None") // PRINTS: 4) result = None
    else
      println("5) result.get = " + result.get) // This line of code does NOT execute.
  }
}

=============================================================

By having your function return a "Some" object (for a valid value),
or a "None" object (for an invalid value), means the user of the
function doesn't need to check for a null value in order to prevent
a NullPointerException.

Your function signature should declare that you're returning
an "Option" that will be some data type, such as an Int, which
is shown in the example below.  Declaring that the function
returns an "Option" object lets the user of your function know
whatâ€™s going on.  You should use an "Option" type when you are
not certain if you will have a value or not.

In the following example, the convertToInt() function is declared
to return an "Option" object.  However, in reality, it will return
either a "None" object (if the String can't be converted to an Int),
or a "Some" object (if the String can be converted to an Int), as
both "None" and "Some" are child classes of the "Option" class.
=============================================================
object Demo
{
  def main(args: Array[String]):Unit =
  {
    // Test the convertToInt() function with a String that DOES convert to a valid Int value...
    val test1:Option[Int] = convertToInt("123");
    println("test1 = " + test1) // PRINTS: test1 = Some(123)

    // Test the convertToInt() function with a String that does NOT convert to a valid Int value...
    val test2:Option[Int] = convertToInt("9X7");
    println("test2 = " + test2) // PRINTS: test2 = None

    // Create a List of strings containing valid and invalid Int values...
    val stringList:List[String] = List[String]("1", "2", "junk", "3", "trash")
    println("stringList = " + stringList) // PRINTS: stringList = List(1, 2, junk, 3, trash)

    // Convert ONLY the Int values in stringList to a List of Int values.
    // NOTE: The "None" objects returned by the convertToInt() function
    //       do NOT get put into intList via the call to flatMap()!!!
    val intList:List[Int] = stringList.flatMap(convertToInt)
    println("intList = " + intList) // PRINTS: intList = List(1, 2, 3)

    // Sum all the values in intList...
    val sum:Int = intList.sum
    println("sum = " + sum) // PRINTS: sum = 6
  }

  /**
    * Convert the String passed to this function to an Int value, and
    * return it as an "Option" object.  If the String CAN'T be converted
    * to a valid Int value, the "catch" block below is entered and a
    * "None" object gets returned.  If the String CAN be converted to
    * a valid Int value, the code below returns a "Some" object.
    * NOTE:  Both "None" and "Some" classes are children
    *        of the Option class
    *
    * @param str - A String that represents an Int value.
    * @return a Some or None object.
    */
  def convertToInt(str: String): Option[Int] =
  {
    try   { Some(Integer.parseInt(str.trim))      } // Return a Some object.
    catch { case e: NumberFormatException => None } // Return a None object.
  }
}
================================================================
The following example of using Option/Some/None is virtually the
same as the above example, but uses the get() method called on
the Option class.
================================================================
object Demo
{
  def main(args:Array[String]): Unit =
  {
    val validStringNumber   = "123456";
    val invalidStringNumber = "12345X";
    var intNumber:Option[Int] = convertStringToInt(validStringNumber)
    printNumber(intNumber)          // PRINTS: number = 123456
    printNumberIncorrect(intNumber) // PRINTS: The number is not valid.

    intNumber = convertStringToInt(invalidStringNumber)
    printNumber(intNumber) // PRINTS: The number is not valid.
  }

  def printNumber(number:Option[Int]):Unit =
  {
    if (number == None)  { println("The number is not valid.")}
    else                 { println("number = " + number.get) }
  }

  def printNumberIncorrect(number:Option[Int]):Unit =
  {
    // The following if()/else statement doesn't work as YOU MIGHT EXPECT cuz
    // even though number is of type "Some", the if() statement won't be true.
    // To make the if() statement true, you must change it to:
    // if (number == Some(123456))
    if (number == Some)  { println("number = " + number.get) }
    else                 { println("The number is not valid.")}
  }

  def convertStringToInt(str:String):Option[Int] =
  {
    try   { Some(str.trim.toInt)      } // EQUIVALENT TO THIS LINE OF CODE:  Some(Integer.parseInt(str.trim))
    catch { case ex:Exception => None }
  }
}
================================================================
The following example of using Option/Some/None is virtually the
same as the two examples above, but uses the "match" keyword.
================================================================
object Demo
{
   def main(args:Array[String]): Unit =
  {
    val validStringNumber:String   = "123456";
    val invalidStringNumber:String = "12345X";
    var intNumber:Option[Int] = convertStringToInt(validStringNumber)
    printNumber(intNumber) // PRINTS: number = 123456

    intNumber = convertStringToInt(invalidStringNumber)
    printNumber(intNumber) // PRINTS: The number is not valid.
  }

  def convertStringToInt(str:String):Option[Int] =
  {
    try   { Some(str.trim.toInt)      } // EQUIVALENT TO THIS LINE OF CODE:  Some(Integer.parseInt(str.trim))
    catch { case ex:Exception => None }
  }

  def printNumber(strNumber:Option[Int]):Unit =
  {
    strNumber match
    {
      case Some(strNumber) => println ("number = " + strNumber)
      case None            => println ("The number is not valid.")
    }
  }
}
=============================================================
object Demo
{
  def main(args:Array[String]): Unit =
  {
    val strInt1 = "123"
    val strInt2 = "456"
    val strInt3 = "111X"
    val intNumber1:Option[Int] = makeInt(strInt1)
    val intNumber2:Option[Int] = makeInt(strInt2)
    val intNumber3:Option[Int] = makeInt(strInt3)

    // If makeInt() returns the Some type, the Option.getOrElse() method below returns
    // the Int value of that Some type.  If makeInt() returns the None type, the
    // Option.getOrElse() method below returns the Int value passed to it, which in
    // the below example is 0 (zero).  Therefore, when we sum all three numbers below,
    // if the number is invalid (a None value), getOrElse(0) returns 0 instead of None.
    val sum = intNumber1.getOrElse(0) + intNumber2.getOrElse(0) + intNumber3.getOrElse(0)
    println(sum) // PRINTS: 579
  }

  def makeInt(str:String):Option[Int] =
  {
    try   { Some(str.trim.toInt)          }
    catch { case excep: Exception => None }
  }
}

===========================================================================
The following sample code defines ListStack class, which usies the
Option/Some/None classes.  This ListStack is used to push/pop
Int values onto/from a List[Int].

object Demo
{
  /**
    * This ListStack class uses the Scala List type as a FIFO stack.
    */
  class ListStack
  {
    // ONLY when this ListStack class is instantiated does the following
    // private var stack get declared and initialized.  It's effectively
    // all of the "constructor" code that exists in this class.
    private var stack:List[Int] = Nil; // NOTE: Nil = List() = an empty List.

    /**
      * Pops an item off the stack.
      * @return the None Option type if the stack is empty;
      *         otherwise, return the Some Option type which includes the value.
      */
    def pop():Option[Int] =
    {
      if (stack.isEmpty)
        None
      else
      {
        val result = stack.head
        stack = stack.tail
        Some(result)
      }
    }

    /**
      * Pushes an item onto the stack.
      * @param value the value pushed onto the stack.
      */
    def push(value:Int):Unit = { stack = value :: stack }
  }

  /**
    * This main() function demonstrates using the ListStack class defined above,
    * as well as the Option, Some, and None Scala types.
    * @param args
    */
  def main(args: Array[String]) =
  {
    val tom = new ListStack() // Instantiate a ListStack class.

    // Push multiple items onto the ListStack...
    tom.push(1); tom.push(2); tom.push(3); tom.push(4); tom.push(5);
    tom.push(6); tom.push(7); tom.push(8); tom.push(9); tom.push(10);

    // Pop every item off the ListStack, and print it.  If the ListStack
    // is empty (because no item was pushed onto it), the following while()
    // loop will detect that, and nothing will print.
    var result:Option[Int] = tom.pop // Pop the first item off the ListStack.
    while (result != None)
    {
      // If this code executes, result is not of the None type, so it's therefore of the Some type.
      print(result.get + "  ") // The get method obtains the literal value popped off the ListStack.
      result = tom.pop         // Pop the next item off the ListStack.
    }
  }
}

======================================================================
object Demo
{
  def main(args:Array[String]): Unit =
  {
    val intNumber1:Option[Int] = makeInt("12")
    val intNumber2:Option[Int] = makeInt("34")
    val intNumber3:Option[Int] = makeInt("56")
    val intNumber4:Option[Int] = makeInt("78")
    val intNumber5:Option[Int] = makeInt("9X") // "9X" is an INVALID String Int value, so inNumber5 is a None value.

    // Using a for comprehension, sum all valid Int values...
    var sum:Option[Int] = for {
                                a <- intNumber1; b <- intNumber2; c <- intNumber3; d <- intNumber4
                              } yield a + b + c + d
    println(sum) // PRINTS: Some(180)

    // // Using a for comprehension, sum all Int values, including the invalid intNumber5 value...
    sum = for
          {
            a <- intNumber1; b <- intNumber2; c <- intNumber3; d <- intNumber4; e <- intNumber5
          } yield a + b + c + d + e
    println(sum) // PRINTS: None
  }

  def makeInt(str:String):Option[Int] =
  {
    try   { Some(str.trim.toInt)          }
    catch { case excep: Exception => None }
  }
}
======================================================================
