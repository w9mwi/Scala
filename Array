
Difference Between Array and ArrayBuffer
========================================
A Scala Array is a fixed-size array.  Once an Array is created, its size cannot be changed.
A Scala ArrayBuffer is variable in size--its size can increase or decrease dynamically.

In Scala, Arrays are SEQUENCES, which means data is stored
in elements that can be accessed via a sequential Integer
index.  Even when an Array is declared as a "val" you can
always change the contents of all its elements.  Unlike most
Scala collections, an Array CAN'T be declared as immutable!

Read in-line comments in the following sample programs
to understand some Array fundamentals.
=======================================================================
object Demo
{
  def main(args: Array[String]):Unit =
  {
    // An UN-initialized Array REQUIRES the "new" keyword in its declaration,
    // as in EXAMPLE 1), EXAMPLE 2) and EXAMPLE 3) below.  When an Array is
    // initialized upon its declaration, the declaration CAN'T use the "new"
    // keyword, as shown in EXAMPLE 4) below.

    // EXAMPLE 1)
    // An UN-initialized Array that contains a number type (i.e., Int, Float, Double)
    // will have default values of ZERO for each element, as in this example...
    val array_1:Array[Int] = new Array[Int](3) // REQUIRES "new" keyword.
    println(s"array_1(0) = ${array_1(0)}, array_1(1) = ${array_1(1)}, array_1(2) = ${array_1(2)}")
    // PRINTS: array_1(0) = 0, array_1(1) = 0, array_1(2) = 0

    // EXAMPLE 2)
    // An UN-initialized Array that contains a Boolean type will have
    // default values of false for each element, as in this example...
    val array_2:Array[Boolean] = new Array[Boolean](3) // REQUIRES "new" keyword.
    println(s"array_2(0) = ${array_2(0)}, array_2(1) = ${array_2(1)}, array_2(2) = ${array_2(2)}")
    // PRINTS: array_2(0) = false, array_2(1) = false, array_2(2) = false

    // EXAMPLE 3)
    // An UN-initialized Array that contains a data type that is NOT a number or a
    // Boolean will have default values of null for each element, as in this example...
    val array_3: Array[String] = new Array[String](3) // REQUIRES "new" keyword.
    println(s"array_3(0) = ${array_3(0)}, array_3(1) = ${array_3(1)}, array_3(2) = ${array_3(2)}")
    // PRINTS: array_3(0) = null, array_3(1) = null, array_3(2) = null

    // EXAMPLE 4)
    // An Array that is initialized upon its declaration CAN'T contain
    // the "new" keyword in its declaration, as in this example.
    val array_4:Array[Int] = Array[Int](111, 222, 333) // The "new" keyword CAN'T be used here.
    println(s"array_4(0) = ${array_4(0)}, array_4(1) = ${array_4(1)}, array_4(2) = ${array_4(2)}")
    // PRINTS: array_4(0) = 111, array_4(1) = 222, array_4(2) = 333

    // EXAMPLE 5)
    // Unlike most Scala collections, an Array CAN'T be declared
    // as immutable.  Even when an Array is declared as a "val"
    // all of its elements are MUTABLE.  As shown here...
    array_4(0) = 777
    array_4(1) = 888
    array_4(2) = 999
    println(s"array_4(0) = ${array_4(0)}, array_4(1) = ${array_4(1)}, array_4(2) = ${array_4(2)}")
    // PRINTS: array_4(0) = 777, array_4(1) = 888, array_4(2) = 999
  }
}

================================================================================
HOW TO INITIALIZE ARRAYS (AND LISTS) UPON THEIR DECLARATION.

Instead of declaring an Array or a List in one line of code,
and then initializing its values in other code later, it's
possible to fill an Array or List with values in one line
of code upon its declaratoion.  Read in-line comments
in the below code sample for details.

object Demo
{
  def main(args: Array[String])
  {
    // EXAMPLE 1)
    // Create a 10-element Array of Int values, and initialize each element with the Int value of 4.
    var intArray:Array[Int] = Array.fill(10)(4)
    println(s"EXAMPLE 1) intArray.size = ${intArray.size}") // PRINTS:  EXAMPLE 1) intArray.size = 10

    // EXAMPLE 2)
    // Print the value contained in each of the Array's 10 elements.
    print("EXAMPLE 2) ")
    intArray.foreach(print) // PRINTS: EXAMPLE 2) 4444444444

    // EXAMPLE 3)
    // Print the value contained in each of the Array's 10 elements using
    // a different print statement than in EXAMPLE 2).
    print("\nEXAMPLE 3) ")
    intArray.foreach{print(_)}  // PRINTS: EXAMPLE 3) 4444444444

    // EXAMPLE 4)
    // Print the value contained in each of the Array's 10 elements using
    // a different print statement than in EXAMPLE 2) and EXAMPLE 3).
    print("\nEXAMPLE 4) ")
    intArray.foreach {x => print(s"$x ")} // PRINTS: EXAMPLE 4) 4 4 4 4 4 4 4 4 4 4

    // EXAMPLE 5)
    // Initialize a new List having 6 elements, where each element contains the string "XYZ".
    val stringList:List[String] = List.fill(6)("XYZ")
    print("\nEXAMPLE 5) ")
    stringList.foreach(x => print(s"$x "))  // PRINTS:  EXAMPLE 5) XYZ XYZ XYZ XYZ XYZ XYZ

    // EXAMPLE 6)
    var idx = 1
    // The following line of code initializes a new List with 5 elements.
    // The second argument list (between the {}) contains a block of code
    // that gets executed for each element in intList.
    var intList:List[Int] = List.fill(5){idx*=2; idx}
    print("\nEXAMPLE 6) ")
    intList.foreach(x => print(s"$x ")) // PRINTS:  EXAMPLE 6) 2 4 8 16 32

    // EXAMPLE 7)
    intList = 1::intList // Prepend a 1 to intList
    print("\nEXAMPLE 7) ")
    intList.foreach(x => print(s"$x "))  // PRINTS:  EXAMPLE 7) 1 2 4 8 16 32

    // EXAMPLE 8)
    intList = List.tabulate(10)(x=>x*x) // The value of each element will be its index SQUARED.
    print("\nEXAMPLE 8) ")
    intList.foreach(x => print(s"$x "))  // PRINTS:  EXAMPLE 8) 0 1 4 9 16 25 36 49 64 81

    // EXAMPLE 9)
    // Create a 6-element Array, where each element in the Array is initialized with
    // this value: 3*x*x + 5x - 7.  For the first element x = 0; the second element x = 1;
    // the last element x = 5.
    intArray = Array.tabulate(6)(x => 3*x*x + 5*x - 7) // NOTE: Uses (), equivalent to the line below.
    println(s"\nEXAMPLE 9) intArray.size = ${intArray.size}") // PRINTS:  EXAMPLE 9) intArray.size = 6

    // EXAMPLE 10)
    print("EXAMPLE 10) ")
    intArray.foreach(x => print(s"$x ")) // PRINTS:  EXAMPLE 10) -7 1 15 35 61 93

    // EXAMPLE 11)
    print("\nEXAMPLE 11) ")
    intArray = Array.range(0, 12)
    println(s"intArray.size = ${intArray.size}") // PRINTS:  EXAMPLE 11) intArray.size = 12

    // EXAMPLE 12)
    print("EXAMPLE 12) ")
    intArray.foreach(x => print(s"$x ")) // PRINTS:  EXAMPLE 12) 0 1 2 3 4 5 6 7 8 9 10 11
  }
}

=======================================================================
MULTI-DIMENSIONAL ARRAYS - PART 1

Read in-line comments in the following code sample to understand
the fundamentals of multi-dimensional arrays.

object Demo {
  def main(args: Array[String]) {
    val columns:Int = 3
    val rows:Int = 4
    // Declare an uninitialized 2-dimensional Array.
    val matrix2X2: Array[Array[Int]] = Array.ofDim[Int](rows, columns)

    // The following 2 nested for loops initialize every element
    // of the matrix2X2 Int Array.
    for (idx <- matrix2X2.indices) {
      for (jdx <- matrix2X2(idx).indices) {
        matrix2X2(idx)(jdx) =
        if (idx == 0)
          { idx + jdx }
        else if (jdx == 0)
          { matrix2X2(idx - 1)(columns - 1) + 1 }
        else
          { matrix2X2(idx)(jdx - 1) + 1 }
      }
    }

    // *******************************************************************
    // EXAMPLE 1 and EXAMPLE 2 below show two examples that traverse all
    // elements of the matrix2X2 Int Array; and print the contents of each
    // element.  EXAMPLE 1 is the preferred way of doing it.
    print("EXAMPLE 1) ")
    matrix2X2.foreach {
      x => x
      x.foreach(x => print(s"$x, ")) // PRINTS:  EXAMPLE 1) 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
    }

    print("\nEXAMPLE 2) ")
    matrix2X2.foreach {
      for (elem <- _) {
        print(s"$elem, ") // PRINTS:  EXAMPLE 2) 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,
      }
    }
    println
    // *******************************************************************

    print2DMatrix(matrix2X2)
    change2DArrayContents(matrix2X2)
    print2DMatrix(matrix2X2)
  }

  /**************************************************************
   Print the contents of a 2-dimensional Int Array in a format
   that displays the Array as a matrix or rows and columns.
   For example, a two-dimensional Array of size 3X4 will be
   printed like this:
   0 1 2
   3 4 5
   6 7 8
   9 10 11
   *************************************************************/
  def print2DMatrix(matrix2D:Array[Array[Int]]): Unit =
  {
    // EXAMPLE A) and EXAMPLE B) below print the entire two-dimensional
    // Int Array in a matrix format.  EXAMPLE A) is the preferred way
    // of doing it.
    println("EXAMPLE A) of printing a matrix.")
    matrix2D.foreach {
      x => x
      x.foreach(x => print(s"$x "))
      println
    }

    println("EXAMPLE B) of printing a matrix.")
    for (idx <- matrix2D.indices) {
      for (jdx <- matrix2D(idx).indices) {
        print(" " + matrix2D(idx)(jdx))
      }
      println
    }
  }

  /***************************************************
  * This method demonstrates that an Array is NOT mutable
  * by changing the contents of a single Array element.
  * Even when an Array is declared as a val its contents
  * can be changed.
  ***************************************************/
  def change2DArrayContents(matrix2D:Array[Array[Int]]): Unit =
  {
    // Change the contents of the first element
    // in a two-dimensional Int Array to -999.
    matrix2D(0)(0) = -999
  }
}

================================================================================
MULTI-DIMENSIONAL ARRAYS - PART 2

Read in-line comments in the following code sample.  This code shows how
to populate a 100-element 2-dimensional Array with Array[Double] arrays
that have a RANDOM NUMBER of elements.  And where each number in the
Array[Double] is populated with a RANDOM NUMBER.

object Demo
{
  def main(args: Array[String])
  {
    // This program creates Arrays having a RANDOM NUMBER of Array elements.
    // To set the minimum and maximum number of elements contained in those
    // Arrays, change the following two values.
    val minNoOfElems:Int = 3
    val maxNoOfElems:Int = 6
    if (minNoOfElems < 2)
    {
      println(s"ERROR: minNoOfElems ($minNoOfElems) can't be less than 2.")
      return;
    }
    if (maxNoOfElems < minNoOfElems)
    {
      println(s"ERROR: maxNoOfElems ($maxNoOfElems) can't be less than minNoOfElems ($minNoOfElems).")
      return;
    }

    // HOW THE FOLLOWING LINE OF CODE WORKS:
    // 1) Array.fill(100) creates a 100-element Array that will hold
    //    an Array of type Array[Double].
    // 2) When EACH of those 100 Array elements is created, the block
    //    of code between the braces {} executes.
    // 3) Read comments below for further details.
    val array2D:Array[Array[Double]] =
    Array.fill(100) {
      // THIS BLOCK OF CODE EXECUTES ONCE FOR EACH OF THE 100 ARRAY ELEMENTS CREATED.
      //
      // randNumOfElems is the number of elements the Array[Double] will contain.
      val randNumOfElems:Int = util.Random.nextInt(maxNoOfElems+1)

      // Create an Array[Double] with the appropriate number of elements,
      // and populate each element with a RANDOM NUMBER (of type Double)
      // from 0.0 to < 1.0.  NOTE: If randNumOfElems < minNoOfElems,
      // minNoOfElems becomes the size of the Array[Double].
      if (randNumOfElems < minNoOfElems)
        Array.fill(minNoOfElems)(math.random)
      else
        Array.fill(randNumOfElems)(math.random)
    }

    var count:Int = 0;

    // Loop through every element in array2D and print its contents...
    for (idx <- array2D.indices) {
      for (jdx <- array2D(idx).indices)  {
        count += 1
        println(s"array2D($idx)($jdx) = array2D(idx)(jdx) (Element #$count)")
      }
    }

    println("===========================================")
    println("Loop through every element in array2D that contains a 3-element Array.")
    println("Then, calculate and print the average of those 3 numbers for each element.")
    var result:Array[Double] = for (Array(d1, d2, d3) <- array2D) yield (d1 + d2 + d3) / 3
    result.foreach(println)

    println("===========================================")
    println("Loop through every element in array2D that contains a 4-element Array.")
    println("Then, calculate and print the average of those 4 numbers for each element.")
    result = for (Array(d1, d2, d3, d4) <- array2D) yield (d1 + d2 + d3 + d4) / 4
    result.foreach(println)
  }
}

================================================================================
RECURSION - The following code sample demonstrates how to use a recursive
            function to obtain the result of multiplying the contents of
            an Array[Int].

object Demo
{
  def main(args: Array[String])
  {
    val arr:Array[Int] = Array(23, 32, 64)

    // The second element passed to operateOnArray() designates the index
    // of the first Array element to be included in the tabulation.  EXAMPLE:
    // If the index value is 2, the tabulation will begin with the Array(2)
    // element--the Array(0) and Array(1) elements will NOT be included
    // in the tabulation.
    val result:Int = operateOnArray(arr, 0, _*_)
    println("result = $result") // PRINTS: result = 47104
  }

  /**
   * This RECURSIVE function loops through the elements of the Array passed
   * to it, BEGINNING at the Array index value passed to this function.
   * Each time this function calls itself, it performs an operation on the
   * Array(index) and Array(index+1) elements.  This function terminates
   * when the index passed to it equals the length of the Array passed to it.
   */
  def operateOnArray(arr:Array[Int], index:Int, func:(Int, Int) => Int):Int =
  {
    if (index < arr.length-1)
      func(arr(index), operateOnArray(arr, index+1, func))
    else
      arr(arr.length-1)
  }
}

================================================================================
The sample program BELOW uses an Array to calculate annual growth
at a given interest rate.

object Demo
{
  def main(args: Array[String])
  {
    val yearRange:Range = 1 to 150
    val annualPercentGrowthRate:Float = 2.0F

    println("YEAR  - UNITS CONSUMED - ANNUAL PERCENT GROWTH RATE") // Prints the header.

    // NOTE: Calling zipWithIndex in the following line transforms the data type
    //       of "array" into a tuple value of (Any, Int) = (result, index)
    //       The index value represents the element index of array, which is
    //       the value that gets "zipped" with result.
    val array:Array[(Any, Int)] = (new Array(yearRange.size)).zipWithIndex
    calculate(array, annualPercentGrowthRate*0.01F)
    array.foreach{ x => printResult(x._1, x._2, annualPercentGrowthRate) }
  }

  /**
   *  NOTE: Each element of the array passed to this method holds a tuple of type: (Any, Int)
   *        The Any value stores the result as a Float, and the Int stores the array index.
   */
  def calculate(array:Array[(Any, Int)], percent:Float):Unit = {
    for (x <- array) {
      if (x._2 == 0) // x._2 stores the index of the current array element.
        array(0) = (1.0F, 0) // Set the first element of the array tuple, which ALWAYS = (1.0F, 0)
      else {
        // Calculate the result for the current array element and set it.
        val resultInPreviousArrayElement:Float = array(x._2 - 1)._1.asInstanceOf[Float]
        val currentResult:Float = (resultInPreviousArrayElement * percent) + resultInPreviousArrayElement
        array(x._2) = (currentResult, x._2)
      }
    }
  }

  def printResult(result:Any, index:Int, annualPercentGrowthRate:Float):Unit =
  {
    val floatResult:Float = result.asInstanceOf[Float]

    if (index < 10)
      printf("%d     - %14.2f - %5.2f\n", index, floatResult, annualPercentGrowthRate)
    else if (index < 100)
      printf("%d    - %14.2f - %5.2f\n", index, floatResult, annualPercentGrowthRate)
    else if (index < 1000)
      printf("%d   - %14.2f - %5.2f\n", index, floatResult, annualPercentGrowthRate)
    else
      printf("%d  - %14.2f - %5.2f\n", index, floatResult, annualPercentGrowthRate)
  }
}

