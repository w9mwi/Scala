ATTENTION:
For sample code of methods that work on both Arrays and Lists,
SEE: https://github.com/w9mwi/Scala/blob/master/Lists
==============================================================

Difference Between Array and ArrayBuffer
========================================
A Scala Array is a fixed-size array.  Once an Array is created, its size cannot be changed.
A Scala ArrayBuffer is variable in size--its size can increase or decrease dynamically.

In Scala, Arrays are SEQUENCES, which means data is stored
in elements that can be accessed via a sequential Integer
index.  Even when an Array is declared as a "val" you can
always change the contents of all its elements.  Unlike most
Scala collections, an Array CAN'T be declared as immutable!

Read in-line comments in the following sample program
to understand some Array fundamentals.
=======================================================================
object Demo
{
  def main(args: Array[String]):Unit =
  {
    // An UN-initialized Array REQUIRES the "new" keyword in its declaration,
    // as in EXAMPLE 1), EXAMPLE 2) and EXAMPLE 3) below.  When an Array is
    // initialized upon its declaration, the declaration CAN'T use the "new"
    // keyword, as shown in EXAMPLE 4) below.

    // EXAMPLE 1)
    // An UN-initialized Array that contains a number type (i.e., Int, Float, Double)
    // will have default values of ZERO for each element, as in this example...
    val array_1:Array[Int] = new Array[Int](3) // REQUIRES "new" keyword.
    println(s"array_1(0) = ${array_1(0)}, array_1(1) = ${array_1(1)}, array_1(2) = ${array_1(2)}")
    // PRINTS: array_1(0) = 0, array_1(1) = 0, array_1(2) = 0

    // EXAMPLE 2)
    // An UN-initialized Array that contains a Boolean type will have
    // default values of false for each element, as in this example...
    val array_2:Array[Boolean] = new Array[Boolean](3) // REQUIRES "new" keyword.
    println(s"array_2(0) = ${array_2(0)}, array_2(1) = ${array_2(1)}, array_2(2) = ${array_2(2)}")
    // PRINTS: array_2(0) = false, array_2(1) = false, array_2(2) = false

    // EXAMPLE 3)
    // An UN-initialized Array that contains a data type that is NOT a number or a
    // Boolean will have default values of null for each element, as in this example...
    val array_3: Array[String] = new Array[String](3) // REQUIRES "new" keyword.
    println(s"array_3(0) = ${array_3(0)}, array_3(1) = ${array_3(1)}, array_3(2) = ${array_3(2)}")
    // PRINTS: array_3(0) = null, array_3(1) = null, array_3(2) = null

    // EXAMPLE 4)
    // An Array that is initialized upon its declared CAN'T contain
    // the "new" keyword in its declaration, as in this example.
    // array_3(0) = null, array_3(1) = null, array_3(2) = null
    val array_4:Array[Int] = Array[Int](111, 222, 333) // The "new" keyword CAN'T be used here.
    println(s"array_4(0) = ${array_4(0)}, array_4(1) = ${array_4(1)}, array_4(2) = ${array_4(2)}")
    // PRINTS: array_4(0) = 111, array_4(1) = 222, array_4(2) = 333

    // EXAMPLE 5)
    // Unlike most Scala collections, an Array CAN'T be declared
    // as immutable.  Even when an Array is declared as a "val"
    // all of its elements are MUTABLE.  As shown here...
    array_4(0) = 777
    array_4(1) = 888
    array_4(2) = 999
    println(s"array_4(0) = ${array_4(0)}, array_4(1) = ${array_4(1)}, array_4(2) = ${array_4(2)}")
    // PRINTS: array_4(0) = 777, array_4(1) = 888, array_4(2) = 999
  }
}

=======================================================================





The following code shows two examples of how to program a multi-dimensional Array.
==================================================================================
object Demo
{
  def main(args: Array[String])
  {
    // CREATE, INITIALIZE, AND DISPLAY A 2X2 MULTI-DIMENSIONAL ARRAY...
    val matrix:Array[Array[Int]] = Array.ofDim[Int](2,2)

    // Initialize every element in the the 2-dimensional Array...
    matrix(0)(0) = 3
    matrix(0)(1) = 2
    matrix(1)(0) = 1
    matrix(1)(1) = 0

    // Print the content of every element in the 2-dimensional
    // Array, in a visual-friendly format...
    for (idx <- matrix.indices)
    {
      for (jdx <- matrix(idx).indices) { print(" " + matrix(idx)(jdx)) }
      println()
    }
    println()

    // CREATE, INITIALIZE, AND DISPLAY A 3X5 MULTI-DIMENSIONAL ARRAY...
    val myMatrix:Array[Array[Int]] = Array.ofDim[Int](3,5)

    // Initialize every element in the the 2-dimensional Array...
    for (idx <- myMatrix.indices)
    {
      for (jdx <- myMatrix(idx).indices) { myMatrix(idx)(jdx) = jdx }
    }

    // Print the content of every element in the 2-dimensional
    // Array, in a visual-friendly format...
    for (idx <- myMatrix.indices)
    {
      for (jdx <- myMatrix(idx).indices) { print(" " + myMatrix(idx)(jdx)) }
      println()
    }
  }
}

================================================================================
// This section of code performs some basic Array manipulation.
// Read the in-line comments below for details.

object Demo
{
  def main(args: Array[String])
  {
    // NOTE: You CAN alter the contents of a Scala Array.
    //       But if the Array is declared a "val", you
    //       CAN'T point it to another Array.
    val tjb:Array[Int] = Array(1,2,3)

    // The following TWO (2) lines of code print exactly the same results.
    for (idx <- tjb.indices) { println(tjb(idx)) }
    tjb.foreach(println)

    changeArray(tjb)  // This function will change the values contained in the tjb Array passed to it.
    tjb.foreach(println) // Verify that the values in the tjb Array have changed.
  }

  /** The changeArray() function below returns the type Unit (nothing),
   *  but changes the values contained in the Array passed to it.
   *  You CAN alter the values stored in an Array, even when the Array
   *  itself is of type "val".  But when an Array is declared a "val",
   *  you CAN'T point that Array to another Array. */
  def changeArray(arr:Array[Int]): Unit =
  {
    arr(0) = 123
    arr(1) = 456
    arr(2) = 789
  }
}

================================================================================
When using Scala Arrays, it's possible for a single Array to contain different
data types (i.e., Int, Float, String, List, etc.) in each of its elements by
declaring an Array with the "Any" parameter type as shown below.

object Demo
{
  def main(args: Array[String])
  {
    val list:List[Char] = List('1', '2', '3', '4')
    val array_1:Array[Int] = Array(12, 34, 56, 78)
    val array_2:Array[Any] = Array("one two three four", 12, 12.34F, 12.34D, list)

    // Print the contents of both array_1 and array_2...
    array_1.foreach(println)
    array_2.foreach(println)
  }
}

================================================================================
Page 140 - Using a recursive function to tabluate the contents of an Array.

object Demo
{
  def main(args: Array[String])
  {
    val arr:Array[Int] = Array(23, 32, 64)

    // The second element passed to operateOnArray() designates the index
    // of the first Array element to be included in the tabulation.  EXAMPLE:
    // If the index value is 2, the tabulation will begin with the Array(2)
    // element--the Array(0) and Array(1) elements will NOT be included
    // in the tabulation.
    val result:Int = operateOnArray(arr, 0, _*_)
    println("result = " + result) // PRINTS: result = 47104
  }

  /**
    * This RECURSIVE function loops through every element of the Array passed
    * to it, BEGINNING at the Array index value passed to this function.
    * Each time this function calls itself, it performs an operation on the
    * Array(index) and Array(index+1) elements.  This function terminates
    * when the index passed to it equals the length of the Array passed to it.
    */
  def operateOnArray(arr:Array[Int], index:Int, func:(Int, Int) => Int):Int =
  {
    if (index < arr.length-1)
    {
      func(arr(index), operateOnArray(arr, index+1, func))
    }
    else
    {
      arr(arr.length-1)
    }
  }
}
===========================================================================
Pages 167-168 - How to FILL AND TABULATE Arrays and Lists.
See the "Scala/Pass_By_Name" section to understand details
about passing the second argument list to Array.fill()()
and List.fill()()

object Demo
{
  def main(args: Array[String])
  {
    var intArray:Array[Int] = Array[Int]()
    // Initialize a new Array with 10 elements, that each have the Int value 4.
    intArray = Array.fill(10)(4)
    intArray.foreach(println)  // Prints the number 4 a total of 10 times.

    var stringList:List[String] = List[String]()
    // Initialize a new List with 6 elements that each have the "XYZ" value.
    stringList = List.fill(6)("XYZ")
    stringList.foreach(println)  // Prints the XYZ string a total of 6 times.

    var intList:List[Int] = List[Int]()
    var idx = 1
    intList = List.fill(5)({idx*=2; idx}) // NOTE: The second argument is in curly braces.
    intList.foreach(println)  // Prints these 5 elements of intList:  2, 4, 8, 16, 32
    intList = 1::intList
    intList.foreach(println)  // Prints these 6 elements of intList:  1, 2, 4, 8, 16, 32
    intList = List.tabulate(10)(i => i*i)
    intList.foreach(println)  // Prints these 10 elements of intList: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81

    // Create a new 6-element Array, where each element in the Array is initialized with
    // the value: (3*x*x + 5x - 7)   Where the value x is the index of the Array.
    // NOTE: All Arrays and Lists begin with an index value of zero (0).
    intArray = Array.tabulate(6)(x => 3*x*x + 5*x - 7) // NOTE: Uses (), equivalent to the line below.
    intArray = Array.tabulate(6){x => 3*x*x + 5*x - 7} // NOTE: Uses {}, equivalent to the line above.
    intArray.foreach(println) // Prints these 6 elements of intArray: -7, 1, 15, 35, 61, 93

    // NOTE: The last value printed below will ALWAYS be ONE LESS than the maximum value in
    //       the range.  So in this instance, the last value printed is eleven (11)...
    intArray = Array.range(0, 12)
    intArray.foreach(print) // PRINTS: 01234567891011
    println
    intList  = List.range(0, 12)
    intList.foreach(print)  // PRINTS: 01234567891011
  }
}

==================================================================

Page 190
object Demo
{
  def main(args: Array[String])
  {
    // Create a 2-dimensional Array, where the top-level Array contains 100 elements.
    // Each of those 100 Array elements is then populated with a "child" Array having
    // a random number of elements from 3 to 9 (indices of 0 to 8).  Each element
    // of the "child" Array stores a random number.
    val twoD:Array[Array[Double]] = Array.fill(100) { Array.fill(util.Random.nextInt(7)+3)(math.random) }
    var count:Int = 0;

    // Loop through every element in the twoD Array, and print its contents...
    for (idx <- twoD.indices)
    {
      for (jdx <- twoD(idx).indices)
      {
        count += 1
        println(count + ") twoD(" + idx + ")(" + jdx + ") = " + twoD(idx)(jdx))
      }
    }
    println()
    println("Loop through every element in the twoD Array that contains a 3-element Array.")
    println("Then, calculate and print the average of those 3 numbers for each element.")
    var result:Array[Double] = for (Array(d1, d2, d3) <- twoD) yield (d1 + d2 + d3) / 3
    result.foreach(println)

    println()
    println("Loop through every element in the twoD Array that contains a 4-element Array.")
    println("Then, calculate and print the average of those 4 numbers for each element.")
    result = for (Array(d1, d2, d3, d4) <- twoD) yield (d1 + d2 + d3 + d4) / 4
    result.foreach(println)
  }
}

=============================================================
ATTENTION:
For sample code of methods that work on both Arrays and Lists,
SEE: https://github.com/w9mwi/Scala/blob/master/Lists
