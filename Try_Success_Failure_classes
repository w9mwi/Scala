To determine the reason why an exception is thrown,
use the following 3 Scala classes together.

1) Try
2) Success
3) Failure

Instances of Try[T] are either an instance of scala.util.Success[T],
or an instance of scala.util.Failure[T].  In other words...
scala.util.Success[T] extends Try[T]
scala.util.Failure[T] extends Try[T]

NOTE: The Scala Option class can be used in place of a Try block.
      But when Option detects a failure, it doesn't report the
      reason why the failure occurred.  Using a Try block will
      reveal the type of exception thrown by Scala so you know
      why the failure occurred.

SEE ALSO --> https://github.com/w9mwi/Scala/blob/master/Option_Some_None_Classes

========================================================================

import scala.util.{Try, Success, Failure}
object Demo
{
  def convertStringToInt(str:String):Try[Int] =
  {
    Try(str.trim.toInt)
  }

  def printNumber(strNumber:Try[Int]):Unit =
  {
    strNumber match
    {
      // NOTE: Success and Failure are Scala-defined case classes.
      case Success(validInt) => println ("validInt = " + strNumber)
      case Failure(excepMsg)  => println ("FAILURE: " + excepMsg)
    }
  }

  def main(args:Array[String]): Unit =
  {
    val validStringNumber:String   = "123456";
    val invalidStringNumber:String = "12345X";
    var intNumber:Try[Int] = convertStringToInt(validStringNumber)
    printNumber(intNumber) // PRINTS:  validInt = Success(123456)

    intNumber = convertStringToInt(invalidStringNumber)
    printNumber(intNumber) // PRINTS:  FAILURE: java.lang.NumberFormatException: For input string: "12345X"

    // NOTE: Although convertStringToInt() returns a Try[Int] type, the
    //       a and b contained in the following for loop are an Int type.
    intNumber = for {
      a <- convertStringToInt(validStringNumber)
      b <- convertStringToInt(validStringNumber)
    } yield a + b
    printNumber(intNumber) // PRINTS:  validInt = Success(246912)


    // NOTE: Although convertStringToInt() returns a Try[Int] type, the
    //       a and b contained in the following for loop are an Int type.
    intNumber = for {
      a <- convertStringToInt("1")
      b <- convertStringToInt(invalidStringNumber)
    } yield a + b // NOTE: A valid Int (1) + an invalid Int (12345X) results in a Failure...
    printNumber(intNumber) // PRINTS:  FAILURE: java.lang.NumberFormatException: For input string: "12345X"
  }
}

========================================================================

import scala.util.{Try, Success, Failure}
object Demo
{

  def divide: Try[Int] =
  {
    // ***********************************************************************
    // In this section, set both dividend and divisor to a VALID String Int
    // to generate a VALID result.
    // ***********************************************************************
    var dividend:Try[Int]= Try("12".toInt)
    println("dividend = " + dividend) // PRINTS: dividend = Success(12)
    var divisor:Try[Int] = Try("4".toInt)
    println("divisor = " + divisor)   // PRINTS: divisor = Success(4)

    // The next line of code is difficult to understand.  To obtain the same result
    // it could be re-written as follows, which is slightly easier to understand.
    // var result:Try[Int] = dividend.map(x => divisor.map(y => x / y)).flatten
    var result:Try[Int] = dividend.flatMap(x => divisor.map(y => x / y))
    println("result = " + result) // PRINTS: result = Success(3)

    result match {
      case Success(x) => println("result = " + dividend.get + "/" + divisor.get + " = " + x)
      case Failure(excep) => println("You divided by zero or entered an invalid String Int.\n" +
                                     "Exception message: " + excep.getMessage)
    }

    // ***********************************************************************
    // In this section we set the dividend or divisor to an INVALID String Int
    // to generate an EXCEPTION and print the error message.
    // ***********************************************************************
    println("================")
    dividend = Try("25".toInt)
    println("dividend = " + dividend) // PRINTS: dividend = Success(25)
    divisor  = Try("five".toInt)
    println("divisor = " + divisor)   // PRINTS: divisor = Failure(java.lang.NumberFormatException: For input string: "five")

    result   = dividend.flatMap(x => divisor.map(y => x / y))
    println("result = " + result) // PRINTS: result = Failure(java.lang.NumberFormatException: For input string: "five")

    result match {
      case Success(x) => println("result = " + dividend.get + "/" + divisor.get + " = " + x)
           Success(x)
      case Failure(excep) => println("You divided by zero or entered an invalid String Int.\n" +
                                     "Exception message: " + excep.getMessage)
          Failure(excep)
    }
  }

  /******************************************
   *
   *****************************************/
  def main(args: Array[String])
  {
    divide
  }
}
