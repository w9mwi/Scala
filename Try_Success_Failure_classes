This page describes how to use the following 3 Scala classes
together, in order to determine the reason why an exception
occurred, when an exception is thrown.

1) Try
2) Success
3) Failure

NOTE: The Scala Option class can be used in place of a Try block.
      But when Option detects a failure, it doesn't report the
      reason why the failure occurred.  Using a Try block will
      reveal the type of exception thrown by Scala so you know
      why the failure occurred.

SEE ALSO --> https://github.com/w9mwi/Scala/blob/master/Option_Some_None_Classes

========================================================================

object Demo
{
  import scala.util.{Try, Success, Failure}

  def convertStringToInt(str:String):Try[Int] =
  {
    Try(str.trim.toInt)
  }

  def printNumber(strNumber:Try[Int]):Unit =
  {
    strNumber match
    {
      // NOTE: Success and Failure are Scala-defined case classes.
      case Success(validInt) => println ("validInt = " + strNumber)
      case Failure(excepMsg)  => println ("FAILURE: " + excepMsg)
    }
  }

  def main(args:Array[String]): Unit =
  {
    val validStringNumber:String   = "123456";
    val invalidStringNumber:String = "12345X";
    var intNumber:Try[Int] = convertStringToInt(validStringNumber)
    printNumber(intNumber) // PRINTS:  validInt = Success(123456)

    intNumber = convertStringToInt(invalidStringNumber)
    printNumber(intNumber) // PRINTS:  FAILURE: java.lang.NumberFormatException: For input string: "12345X"

    // NOTE: Although convertStringToInt() returns a Try[Int] type, the
    //       a and b contained in the following for loop are an Int type.
    intNumber = for {
      a <- convertStringToInt(validStringNumber)
      b <- convertStringToInt(validStringNumber)
    } yield a + b
    printNumber(intNumber) // PRINTS:  validInt = Success(246912)


    // NOTE: Although convertStringToInt() returns a Try[Int] type, the
    //       a and b contained in the following for loop are an Int type.
    intNumber = for {
      a <- convertStringToInt("1")
      b <- convertStringToInt(invalidStringNumber)
    } yield a + b // NOTE: A valid Int (1) + an invalid Int (12345X) results in a Failure...
    printNumber(intNumber) // PRINTS:  FAILURE: java.lang.NumberFormatException: For input string: "12345X"
  }
}
