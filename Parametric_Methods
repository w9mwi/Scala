
A parametric method is a method defined to accept any data type that applies
to the method's algorithm.  EXAMPLE:  When the add() method is written to
accept a parametric data type, that one method can be made to work with
3 different data types (Int, Float, Double), if it's written to accept
parametric data types.

Parametric data types are often referred to as generic data types.
Therefore...

PARAMETRIC DATA TYPE = GENERIC DATA TYPE

The following code sample defines the add() method with its argument as
a generic data type so it works with Scala's Numeric.plus() method.  The
add() method specifies the data type as a type 'A', which designates any
data type that works with the Numeric.plus() method.

IMPORTANT: Only Scala methods (which are written using the "def" keyword)
           can implement paramateric data types.  Scala functions (which
           are NOT written using the "def" keyword) can't be written to use
           paramateric data types.  To understand the difference between
           a Scala method and a Scala function, read this section:
           https://github.com/w9mwi/Scala/blob/master/Function_vs_Method

object Demo
{
  // The following add()() method is defined with two (2) argument lists,
  // which usually means it's a curried method.  However, because its
  // second  argument list contains an implicit argument, it's NOT a
  // curried method.  The Scala compiler automatically invokes the
  // implicit parameter when the add()() method is called with only
  // one of its two argument lists.
  //
  // This code shows how to define an add method so it will work with
  // different data types (Byte, Int, Long, Float, Double).  The returned
  // data type will be "upcast" to the highest of the two data types passed
  // to the method.
  def add[A](x:A, y:A)(implicit numeric:Numeric[A]):A = numeric.plus(x, y)

  def main(args:Array[String]): Unit =
  {
    val myByte:Byte     = 123
    val myInt:Int       = 456
    val myLong:Long     = 999999999L
    val myFloat:Float   = 876.543F
    val myDouble:Double = 1234567.890123D

    println("add(myByte, myInt)     = " + add(myByte, myInt))     // PRINTS: add(myByte, myInt)     = 579
    println("add(myInt, myLong)     = " + add(myInt, myLong))     // PRINTS: add(myInt, myLong)     = 1000000455
    println("add(myLong, myFloat)   = " + add(myLong, myFloat))   // PRINTS: add(myLong, myFloat)   = 1.0000009E9
    println("add(myFloat, myDouble) = " + add(myFloat, myDouble)) // PRINTS: add(myFloat, myDouble) = 1235444.433152785
    println("add(myByte, myDouble)  = " + add(myByte, myDouble))  // PRINTS: add(myByte, myDouble)  = 1234690.890123
    println("add(myInt, myFloat)    = " + add(myInt, myFloat))    // PRINTS: add(myInt, myFloat)    = 1332.543
  }
}

========================================================================================

This example is super-easy to understand.  Here, 4 different methods are defined
to work with multiple data types, by defining the methods as parametric methods.

object Demo
{
  def main(args:Array[String]): Unit =
  {
    println("SECTION 1) ============================================")
    // This section is super-easy.  It only demonstrates how to to write parametric
    // methods, so the argument(s) passed to the method will accept any data type.

    // Pass an argument of data type to myMethod().  It returns the same object it was passed.
    def myMethod[T](t: T): T = t
    // Pass any 2 data types to makeTuple().  It returns a tuple containing
    // the 2 objects passed to it.
    def makeTuple[A, B](a: A, b: B): (A, B) = (a, b)
    // Pass any 3 values to makeThreeElementList(), which all have the same data type.
    // It returns a 3-element List containing those 3 values of the same data type.
    def makeThreeElementList[A](a1: A, a2: A, a3: A): List[A] = List(a1, a2, a3)

    println(myMethod('X'))           // PRINTS: X
    println(myMethod("My string"))   // PRINTS: My string
    println(myMethod(123.4F))        // PRINTS: 123.4
    println(myMethod(987.6D))        // PRINTS: 987.6

    println(makeTuple(987.6D, 123.4F)) // PRINTS: (987.6,123.4)
    println(makeTuple('A', "zip"))     // PRINTS: (A,zip)

    println(makeThreeElementList('X', 'Y', 'Z'))        // PRINTS: List(X, Y, Z)
    println(makeThreeElementList("Pop", "Stop", "Top")) // PRINTS: List(Pop, Stop, Top)
  }
}

=========================================================================
To see more examples of parametric methods, view this web page:
https://github.com/w9mwi/Scala/blob/master/Fold_Methods
