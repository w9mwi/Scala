A Scala "view" is a special kind of collection that represents some base collection,
(i.e., Array, List, etc.) but implements all TRANSFORMERS lazily.  To understand
what this means, keep reading.

Scala Collections (Arrays, Lists, etc.) contain methods that construct new collections.
Some examples are...

The map() method.
The filter() method.
The "++" operator method.

Methods such as these are called TRANSFORMERS because they take at least one collection
as their receiver object, and generate another collection as their result.

There are TWO (2) ways to implement transformers.

1) STRICT - A new collection with all its elements is constructed as a result
            of the transformer.

2) NON-STRICT OR LAZY - Only a proxy is constructed for the result collection.
                        Its resulting elements get constructed ONLY when you
                        access them.

To transform a strict collection into a non-strict (lazy) collection,
invoke the view() method on the collection.

To transform a non-strict (lazy) collection back into into a strict collection,
invoke the to() method on the collection.

The main reason for using views is performance.  By switching a collection to
a view, the construction of intermediate results can be avoided.  Below is an
example program.

To learn more, read this web page:
https://docs.scala-lang.org/overviews/collections-2.13/views.html#


import scala.collection.SeqView
object Demo
{
  /********************************************
   * main()
   ********************************************/
  def main(args: Array[String]): Unit =
  {
    println("PART 1) =============================")
    println("Here we initialize vect.")
    val vect:Vector[Int] = Vector(1 to 10: _*)
    vect.foreach(println)

    println("\nPART 2) =============================")
    println("In this example each call to map() generates a new result.")
    var result:Vector[Int] = vect.map(_ + 1).map(_ * 2)
    result.foreach(println)

    println("\nPART 3) =============================")
    println("Here we see that calling vect.view() transforms vect (a strict\n" +
            "collection) into a lazy/non-strict collection.")
    val seqView1:SeqView[Int, Vector[Int]] = vect.view

    println("\nPART 4) =============================")
    println("When map() is called on seqView1 (a lazy/non-strict collection)\n" +
            "no result is generated, but the data type returned changes.")
    val seqView2:SeqView[Int, Seq[_]] = seqView1.map(_ + 1)
    // seqView2.foreach(println)

    println("\nPART 5) =============================")
    println("We now invoke the map() method on seqView2, and are ready to generate\n" +
            "a result, which means we must obtain a non-strict collection.\n" +
      "NOTE: The to() method below transforms the non-strict collection\n" +
      "      SeqView[Int, Seq[_]] into a strict collection (IndexedSeq[Int]).\n" +
      "      The toVector() method below transforms the data type from\n" +
      "      IndexedSeq[Int] into Vector[Int].")
    result = seqView2.map(_ * 2).to.toVector
    result.foreach(println)

    println("\nPART 6) =============================")
    println("Here we combine PART 3), PART 4) and PART 5) above into a single line of equivalent code.")
    result = vect.view.map(_ + 1).map(_ * 2).to.toVector
    result.foreach(println)
  }
}

============================================================================
============================================================================
