ATTENTION:
For sample code of methods that work on both Arrays and Lists,
SEE: https://github.com/w9mwi/Scala/blob/master/Lists
=============================================================
In Scala, Arrays are SEQUENCES, which means data is stored
in elements that can be accessed via a sequential Integer
index.  The following line of code creates an Array of
3 integers that's initialized to the values of 1, 2 and 3.

val myArray:Array[Int] = Array[Int](1, 2, 3)

The square brackets '[]' in the above code indicates that the
Array is a parameterized type.  (NOTE: ALL COLLECTION TYPES IN
SCALA ARE PARAMETERIZED TYPES.)  In the above example, this
parameterized type is declared to be of type Int.  The above
line of code can also be written as shown below (without the
[Int]), as the compiler will be able to determine the type
will be Int.

val myArray = Array(1, 2, 3)

The following example declares an Array containing un-initialized
elements, and the elements are initialized after the declaration.
When an Array is declared but not initialized, all its elements
have a default value of zero (for numbers), and null for non-numeric
data types.  NOTE: FOR ALL NUMERIC TYPES, THE DEFAULT VALUE IS
ZERO.  FOR THE BOOLEAN TYPE, THE DEFAULT VALUE IS FALSE.  FOR ALL
NON-NUMERIC TYPES, THE DEFAULT VALUE IS NULL.

val myArray:Array[Int] = new Array[Int](3);

myArray(0) = 9
myArray(1) = 8
myArray(2) = 7
println(myArray(0) + myArray(1) + myArray(2)) // Prints the value 24.

Even though the above myArray is declared as a val, we can change the
values contained in each Array element.  An Array in Scala is MUTABLE,
which means an Array's elements values can always be altered, even if
its a val.  The val indicates that myArray cannot be altered to point
to a different Array.  For example, you can't do the following:

val myArray:Array[Int] = new Array[Int](3);
myArray = new Array[Int](3);  // NOT allowed because myArray is a val.

The following code shows two examples of how to program a multi-dimensional Array.
==================================================================================
object Demo
{
  def main(args: Array[String])
  {
    // CREATE, INITIALIZE, AND DISPLAY A 2X2 MULTI-DIMENSIONAL ARRAY...
    val matrix:Array[Array[Int]] = Array.ofDim[Int](2,2)

    // Initialize every element in the the 2-dimensional Array...
    matrix(0)(0) = 3
    matrix(0)(1) = 2
    matrix(1)(0) = 1
    matrix(1)(1) = 0

    // Print the content of every element in the 2-dimensional
    // Array, in a visual-friendly format...
    for (idx <- matrix.indices)
    {
      for (jdx <- 0 to 1) { print(" " + matrix(idx)(jdx)) }
      println()
    }
    println()

    // CREATE, INITIALIZE, AND DISPLAY A 3X5 MULTI-DIMENSIONAL ARRAY...
    val myMatrix:Array[Array[Int]] = Array.ofDim[Int](3,5)

    // Initialize every element in the the 2-dimensional Array...
    for (idx <- myMatrix.indices)
    {
      for (jdx <- myMatrix(idx).indices) { myMatrix(idx)(jdx) = jdx }
    }

    // Print the content of every element in the 2-dimensional
    // Array, in a visual-friendly format...
    for (idx <- myMatrix.indices)
    {
      for (jdx <- myMatrix(idx).indices) { print(" " + myMatrix(idx)(jdx)) }
      println()
    }
  }
}
==================================================================
// This section of code perfoms some basic Array manipulation.
// Read the in-line comments below for details.

object Demo
{
  def main(args: Array[String])
  {
    val tjb:Array[Int] = Array(1,2,3)

    // The following line prints exactly the same results as the line immediately BELOW it.
    for (idx <- tjb.indices) { println(tjb(idx)) }

    // The following line prints exactly the same results as the line immediately ABOVE it.
    tjb.foreach(println)
    changeArray(tjb)  // This function will change the values contained in the tjb Array passed to it.
    tjb.foreach(println) // Verify that the values in the tjb Array have changed.
  }

  /** The changeArray() method/function below returns the type Unit (nothing),
   *  but it literally changes the values contained in the Array passed to it.
   *  So after changeArray() is called, the method that called it will have
   *  different values in the Array that it passed to this method/function. */
  def changeArray(arr:Array[Int]): Unit =
  {
    arr(0) = 123
    arr(1) = 456
    arr(2) = 789
  }
}
==================================================================
Pages 167-168 - How to FILL AND TABULATE Arrays and Lists.

object Demo
{
  def main(args: Array[String])
  {
    var intArray:Array[Int] = Array[Int]()
    intArray.foreach(println) // Prints nothing, because the Array was not initialized.

    // Initialize a new Array with 10 elements, that each have the Int value 4.
    intArray = Array.fill(10)(4)
    intArray.foreach(println)  // Prints all 10 elements of the intArray.

    var stringList:List[String] = List[String]()
    stringList.foreach(println) // Prints nothing, because the List was not initialized.

    // Initialize a new List with 6 elements that each have the "XYZ" value.
    stringList = List.fill(6)("XYZ")
    stringList.foreach(println)  // Prints all 6 elements of the stringList.

    var intList:List[Int] = List[Int]()
    intList.foreach(println)  // Prints nothing, because the List was not initialized.

    var idx = 1
    intList = List.fill(5){idx*=2; idx} // NOTE: The second argument is in curly braces.
    intList.foreach(println)  // Prints these 5 elements of intList:  2, 4, 8, 16, 32
    intList = 1::intList
    intList.foreach(println)  // Prints these 6 elements of intList:  1, 2, 4, 8, 16, 32
    intList = List.tabulate(10)(i => i*i)
    intList.foreach(println)  // Prints these 10 elements of intList: 0, 1, 4, 9, 16, 25, 36, 49, 64, 81

    // Create a new 6-element Array, where each element in the Array is initialized with
    // the value: (3*x*x + 5x - 7)   Where the value x is the index of the Array.
    // NOTE: All Arrays and Lists begin with an index value of zero (0).
    intArray = Array.tabulate(6)(x => 3*x*x + 5*x - 7) // Uses (), equivalent to the line below.
    intArray = Array.tabulate(6){x => 3*x*x + 5*x - 7} // Uses {}, equivalent to the line above.
    intArray.foreach(println)

    // NOTE: The last value printed below will ALWAYS be ONE LESS than maximum value in
    //       the range.  So in this instance, the last value printed is eleven (11)...
    intArray = Array.range(0, 12)
    intList  = List.range(0, 12)

    intArray.foreach(print) // PRINTS: 01234567891011
    println
    intList.foreach(print)  // PRINTS: 01234567891011
  }
}
==================================================================
Page 190
object Demo
{
  def main(args: Array[String])
  {
    // Create a 2-dimensional Array, where the top-level Array contains 100 elements.
    // Each of those 100 Array elements is then populated with a "child" Array having
    // a random number of elements from 3 to 9 (indices of 0 to 8).  Each element
    // of the "child" Array stores a random number.
    val twoD:Array[Array[Double]] = Array.fill(100) { Array.fill(util.Random.nextInt(7)+3)(math.random) }
    var count:Int = 0;

    // Loop through every element in the twoD Array, and print its contents...
    for (idx <- twoD.indices)
    {
      for (jdx <- twoD(idx).indices)
      {
        count += 1
        println(count + ") twoD(" + idx + ")(" + jdx + ") = " + twoD(idx)(jdx))
      }
    }
    println()
    println("Loop through every element in the twoD Array that contains a 3-element Array.")
    println("Then, calculate and print the average of those 3 numbers for each element.")
    var result:Array[Double] = for (Array(d1, d2, d3) <- twoD) yield (d1 + d2 + d3) / 3
    result.foreach(println)

    println()
    println("Loop through every element in the twoD Array that contains a 4-element Array.")
    println("Then, calculate and print the average of those 4 numbers for each element.")
    result = for (Array(d1, d2, d3, d4) <- twoD) yield (d1 + d2 + d3 + d4) / 4
    result.foreach(println)
  }
}

=============================================================
ATTENTION:
For sample code of methods that work on both Arrays and Lists,
SEE: https://github.com/w9mwi/Scala/blob/master/Lists
