A Scala class/object that defines an unapply() method is called an extractor.

Recall that the Scala keyword "match" is used for pattern matching.

Scala Extractor - A class/object is an extractor if it has a method named unapply().
                  The unapply() method is USED BY PATTERN MATCHING AND BY PARTIAL FUNCTIONS,
                  and is automatically invoked by the Scala keyword "match."  A class/object
                  apply() method takes arguments and constructs the object/class.  Its
                  unapply() method extracts a class/object and returns the argument(s).
                  In other words, a class's unapply() method REVERSES the construction
                  procedure of the apply() method.

NOTE: The unapply() method is most commonly invoked automatically when the keyword
      "match" is encountered to perform pattern matching.  However, the unapply()
      method also gets invoked automatically when a PARTIAL FUNCTION is invoked.
      One of the code examples below uses a PARTIAL FUNCTION (instead of the match
      keyword) to invoke the unapply() method.

When you define a Scala "case class" or "case object", Scala automatically creates BOTH
the apply() and unapply() methods for that class.  So any "case class" or "case object"
is ready to be used for pattern matching without any additional programming.

When you define a regular Scala class/object (not a "case class" or a "case object"),
Scala automatically creates the apply() method for that class/object, but NOT an
unapply() method.  Therefore, if you want to perform a pattern match on a regular
Scala class/object, the programmer must write her own unapply() method for the
class/object.

The unapply() method says:  Pass me the object which was created by
applying a function to argument x, and I will return the argument x.

Since the purpose of unapply() is to extract values from a class/object,
it is in some sense the exact opposite of a constructor, whose purpose
it is to collect values and hide them in a class/object.

...unapplySeq()...

unapply() (and unapplySeq()) is "silently" called on a class whenever
you attempt to PATTERN MATCH on a class instance.  That is, unapply()
gets called via the case statement that matches the object, which
means Scala calls it in the background--you don't call it directly.

The returned result type of an unapply() method MUST CONTAIN A get()
METHOD, which is used as an extractor pattern.  That's why unapply()
methods typically return an Option type.  Because the Option type
already contains a get() method.  When the unapply() method is called
on a pattern match, it simply "undoes" what the apply() method does.

Whenever you define a regular class (not a case class) that you want
to pattern match on, you must write your own unapply() method, and
then place it inside that class's COMPANION OBJECT.  See the following
sample code for an example of this.

===================================================================================
object Demo
{
  def main(args: Array[String])
  {
    val x:Double = Demo(25.0D) // This line of code invokes:  Demo.apply(25.0)
    println("2) x = " + x)     // PRINTS: 2) x = 5.0

    x match // Perform a pattern match on x, which is of type Double.
    {
      // The following line of code invokes:  Demo.unapply(5.0)
      case Demo(y) => println("4) y = " + y)  // PRINTS: 4) y = 25.0
      case _ => println("4) No pattern is matched.")
    }
  }

  def apply(x:Double):Double =
  {
    println("1) Demo.apply(" + x + ") is called.   ") // PRINTS: 1) Demo.apply(25.0) is called.
    x / 5
  }

  // An unapply() method MUST return a class/object having a member  method with
  // this name and signature:  def isEmpty: Boolean
  // To fulfill that requirement, unapply() returns a Some class.  The Some class
  // extends the Option class.  Both Some and Option classes contain the isEmpty()
  // method.
  def unapply(z:Double):Option[Double] =
  {
    println("3) Demo.unapply(" + z + ") is called.  ") // PRINTS: 3) Demo.unapply(5.0) is called.
    Some(z * 5)
  }
}

===================================================================================
This code sample performs TWO (2) pattern matches on the MyClass class.
The FIRST patten match invokes the unapply() method because we're
matching on the contents of MyClass (name and id).  The SECOND pattern
match DOESN'T invoke the unapply() method because we're metching on
the entire class (MyClass) and not its contents.


import Demo.MyClass
object Demo
{
  class MyClass(val name:String, val id:Int)

  def main(args: Array[String]):Unit =
  {
    val mc = new MyClass("Tom", id = 123456)

    mc match
    {
      // When the following line of code executes, Scala automatically
      // invokes the MyClass.unapply() method defined below.
      case MyClass(x) => println("2) x.name = " + x.name + ",  x.id = " + x.id) // PRINTS: 2) x.name = Tom,  x.id = 123456
      case _          => println("No pattern match.") // This line never executes.
    }

    mc match
    {
      // The following line of code does NOT call the MyClass.unapply()
      // method because it matches on the entire MyClass class.
      case x:MyClass => println("3) x.name = " + x.name + ",  x.id = " + x.id) // PRINTS: 3) x.name = Tom,  x.id = 123456
      case _         => println("No pattern match.") // This line never executes.
    }
  }
}

/**
 * This "object MyClass" is the COMPANION OBJECT to MyClass defined above
 * inside of "object Demo".  This "object Myclass" could be moved inside
 * of "object Demo" above and it would also work.
 *
 * Because MyClass is defined as a regular class (not a case class) it
 * DOESN'T contain an unapply() method by default, as a case class does.
 * Therefore, the unapply() method MUST be written by the programmer.
 * This unapply() method MUST also be a member of the MyClass companion
 * object, NOT a member of the MyClass class.
 */
object MyClass
{
  def unapply(x:MyClass):Option[MyClass] =
  {
    // The following line PRINTS:  1) MyClass.unapply() called.  x.name = Tom,  x.id = 123456
    println("1) MyClass.unapply() called.  x.name = " + x.name + ",  x.id = " + x.id)
    Some(x) // Return the Option type because it contains the get() method.
  }
}

===================================================================================
The following code sample is DIFFICULT TO UNDERSTAND.  In this example
Scala automatically invokes the unapply() method NOT as a result of
pattern matching via the Scala "match" keyword, but as the result of
calling a PARTIAL FUNCTION.  In this example, a PARTIAL FUNCTION is
passed as an argument to the stud.collect{} method call.

object Demo
{
  case class Address(city: String, state: String)
  case class Student(name: String, address: Seq[Address])

  object State
  {
    // This unapply() method is automatically invoked by Scala
    // when the stud.collect() method in main() gets called.
    def unapply(stud:Student):Option[Seq[String]] =
    {
      println("State.unapply() called.")
      // In the following line of code, "for(addr <- stud.address)" will return
      // a SINGLE Address, such as this:  Address(Jacksonville,Florida)
      // Then, "yield addr.state" returns ONLY THE STATE as a Seq[String] wrapped
      // in an Option.  An example of what's returned is this:  Some(List(Florida))
      val result:Seq[String] = for(addr <- stud.address) yield addr.state
      Option(result)
    }
  }

  class StrSeqContains(strValue:String)
  {
    // This unapply() method is automatically invoked by Scala
    // when the stud.collect() method in main() gets called.
    def unapply(strSeq:Seq[String]):Boolean =
    {
      println("StrSeqContains.unapply() called.")
      // The following line tests if strSeq contains strValue.
      strSeq.contains(strValue) // This line can also be written as: strSeq contains strValue
    }
  }

  def main(args:Array[String]):Unit =
  {
    val stud:List[Student] = List(Student("Harris", List(Address("LosAngeles",   "California"))),
                                  Student("Reena",  List(Address("Houston",      "Texas"))),
                                  Student("Rob",    List(Address("Dallas",       "Texas"))),
                                  Student("Chris",  List(Address("Jacksonville", "Florida"))))

    // The following val (texas) is used to obtain all students residing in Texas.
    val texas:StrSeqContains = new StrSeqContains("Texas")

    // When the stud.collect() method is called below, it GETS PASSED A PARTIAL FUNCTION.
    // This partial function automatically invokes BOTH the State.unapply() AND the
    // StrSeqContains.unapply() methods.  Both of those unapply() methods get called
    // here 4 times; once for each of the 4 students.  NOTE: The following line
    // MUST reference "texas()", not just "texas".
    val students:List[String] = stud.collect{ case student@State(texas()) => student.name }
    println(students) // PRINTS: List(Reena, Rob)
  }
}

===================================================================================
