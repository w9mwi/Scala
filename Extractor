A Scala class/object that defines an unapply() method is called an extractor.

Recall that the Scala keyword "match" is used for pattern matching.

Scala Extractor - A class/object is an extractor if it contains a method named unapply()
                  or unapplySeq().  (NOTE: The unapplySeq() method is similar unapply(),
                  except it's used to process a variable number of arguments.)  The
                  unapply() and unapplySeq() methods are USED BY PATTERN MATCHING AND
                  BY PARTIAL FUNCTIONS, and are automatically invoked by the Scala keyword
                  "match."  A class/object apply() method takes arguments and constructs
                  the object/class.  Its unapply() and unapplySeq() methods extracts a
                  class/object and returns the argument(s).  In other words, a class's
                  unapply() and unapplySeq() methods REVERSE the construction procedure
                  of the apply() method.

NOTE: The unapply() and unapplySeq() methods are most commonly invoked automatically when
      the keyword "match" is encountered to perform pattern matching.  However, the
      unapply() and unapplySeq() methods also get invoked automatically when a PARTIAL
      FUNCTION is invoked.  One of the code examples below uses a PARTIAL FUNCTION
      (instead of the match keyword) to invoke the unapply() method.

When you define a Scala "case class" or "case object", Scala automatically creates
BOTH the apply() and unapply()/unapplySeq() methods for that class/object.  So any
"case class" or "case object" is ready to be used for pattern matching without any
additional programming.

When you define a regular Scala class/object (not a "case class" or a "case object"),
Scala automatically creates the apply() methods for that class/object, but NOT an
unapply() or unapplySeq() method.  So if you want to perform a pattern match on a
regular Scala class/object, the programmer must write her own unapply() or unapplySeq()
method for the class/object.

The unapply() method says:  Pass me the object which was created by
applying a function to argument x, and I will return the argument x.

Since the purpose of unapply() is to extract values from a class/object,
it is in some sense the exact opposite of a constructor, whose purpose
it is to collect values and hide them in a class/object.

IMPORTANT: An unapply() method MUST return a class/object that has a
           method with this name and signature:  def isEmpty: Boolean
           An Option class meets that requirement, so an Option class
           is what's most often returned by an unapply() method.

Whenever you define a regular class (not a case class) that you want
to pattern match on, you must write your own unapply() method, and
then place it inside that class's COMPANION OBJECT.  See the following
sample code for an example of this.

===================================================================================
object Demo
{
  def main(args: Array[String])
  {
    val x:Double = Demo(25.0D) // Demo(25.0D) automatically invokes the Demo.apply() method.

    // When this pattern match matches on Demo(y), the
    // Demo.unapply() method is automatically invoked.
    x match
    {
      case Demo(y) => println("3) y = " + y)  // PRINTS: 3) y = 25.0
      case _ => println("3) No pattern is matched.")
    }
  }

  def apply(x:Double):Double =
  {
    println("1) Demo.apply(" + x + ") is called.   ") // PRINTS: 1) Demo.apply(25.0) is called.
    x / 5
  }

  // An unapply() method MUST return a class/object having a method with this
  // name and signature:  def isEmpty: Boolean
  // To fulfill that requirement, unapply() returns a Some class.  The Some class
  // extends the Option class.  Both Some and Option classes contain the isEmpty()
  // method.
  def unapply(z:Double):Option[Double] =
  {
    println("2) Demo.unapply(" + z + ") is called.  ") // PRINTS: 2) Demo.unapply(5.0) is called.
    Some(z * 5)
  }
}

===================================================================================
This code sample performs TWO (2) pattern matches on the MyClass class.
The FIRST patten match invokes the unapply() method because we're
matching on the contents of MyClass (name and id).  The SECOND pattern
match DOESN'T invoke the unapply() method because we're metching on
the entire class (MyClass) and not its contents.

import Demo.MyClass
object Demo
{
  class MyClass(val name:String, val id:Int)

  def main(args: Array[String]):Unit =
  {
    val mc = new MyClass("Tom", id = 123456)

    mc match
    {
      // The following line of code automatically invokes the
      // MyClass.unapply() method defined below.
      case MyClass(x) => println("2) x.name = " + x.name + ",  x.id = " + x.id) // PRINTS: 2) x.name = Tom,  x.id = 123456
      case _          => println("No pattern match.") // This line never executes.
    }

    mc match
    {
      // The following line of code DOESN'T call the MyClass.unapply()
      // method because it matches on the entire MyClass class.
      case x:MyClass => println("3) x.name = " + x.name + ",  x.id = " + x.id) // PRINTS: 3) x.name = Tom,  x.id = 123456
      case _         => println("No pattern match.") // This line never executes.
    }
  }
}

/**
 * This "object MyClass" is the COMPANION OBJECT to MyClass defined above
 * inside of "object Demo".  This "object Myclass" could be moved inside
 * of "object Demo" above and it would also work.
 *
 * Because MyClass is defined as a regular class (not a case class) it
 * DOESN'T contain an unapply() method by default as does a "case class."
 * Therefore, the unapply() method MUST be written by the programmer.
 * IMPORTANT: This unapply() method MUST be a member of the MyClass
 *            companion object, NOT a member of the MyClass class.
 */
object MyClass
{
  def unapply(x:MyClass):Option[MyClass] =
  {
    // The following line PRINTS:  1) MyClass.unapply() called.  x.name = Tom,  x.id = 123456
    println("1) MyClass.unapply() called.  x.name = " + x.name + ",  x.id = " + x.id)
    Some(x) // Return the Option type because it contains the get() method.
  }
}

===================================================================================
Here is another example of an object that contains an unapply() method,
which makes it an extractor.

object Demo
{
  object EMail {
    def apply(user:String, domain:String):String = { user + "@" + domain }

    def unapply(str: String): Option[(String, String)] = {
      val strArray: Array[String] = str.split("@")
      if (strArray.length == 2)
        Some(strArray(0), strArray(1))
      else None
    }
  }

  def main(args:Array[String]):Unit =
  {
    // The following line of code automatically invokes the apply() method
    // because an EMail object is constructed.
    val emailAddr:String = EMail("joe", "blow.com")
    println(s"emailAddr = $emailAddr") // PRINTS: emailAddr = joe@blow.com

    // The following "match" automatically invokes the unapply() method,
    // where the string "JUNK@X" gets passed as an argument.  unapply()
    // returns a Some value because the pattern of "JUNK@X" matches
    // the pattern of EMail(user, domain).
    "JUNK@X" match {
      case EMail(user, domain) => println(s"MATCH - user = $user,  domain = $domain")
      //                          PRINTS: MATCH - user = JUNK,  domain = X
      case _ => println("NO MATCH");
    }

    // The following "match" automatically invokes the unapply() method,
    // where the string "JUNK@X" gets passed as an argument.  unapply()
    // returns a Some value because the pattern of "JUNK@X" matches
    // the pattern of EMail(myMatcher).
    "JUNK@X" match {
      case EMail(myMatcher) => println(s"MATCH - myMatcher._1 = ${myMatcher._1},  myMatcher._2 = ${myMatcher._2}")
      //                       PRINTS: MATCH - myMatcher._1 = JUNK,  myMatcher._2 = X
      case _ => println("NO MATCH");
    }

    // The following "match" automatically invokes the unapply() method,
    // where the string "JUNK" gets passed as an argument.
    // unapply() returns a None value because the pattern of "JUNK"
    // doesn't match the pattern of EMail(myMatcher).
    "JUNK" match {
      case EMail(myMatcher) => println("MATCH")
      case _ => println("NO MATCH"); // PRINTS: NO MATCH
    }
  }
}


===================================================================================
The following code sample is DIFFICULT TO UNDERSTAND.  In this example
Scala automatically invokes the unapply() method NOT as a result of
pattern matching via the Scala "match" keyword, but as the result of
calling a PARTIAL FUNCTION.  In this example, a PARTIAL FUNCTION is
passed as an argument to the stud.collect{} method call.

object Demo
{
  case class Address(city: String, state: String)
  case class Student(name: String, address: Seq[Address])

  object State
  {
    // This unapply() method is automatically invoked by Scala
    // when the stud.collect() method in main() gets called.
    def unapply(stud:Student):Option[Seq[String]] =
    {
      println("State.unapply() called.")
      // In the following line of code, "for(addr <- stud.address)" will return
      // a SINGLE Address, such as this:  Address(Jacksonville,Florida)
      // Then, "yield addr.state" returns ONLY THE STATE as a Seq[String] wrapped
      // in an Option.  An example of what's returned is this:  Some(List(Florida))
      val result:Seq[String] = for(addr <- stud.address) yield addr.state
      Option(result)
    }
  }

  class StrSeqContains(strValue:String)
  {
    // This unapply() method is automatically invoked by Scala
    // when the stud.collect() method in main() gets called.
    def unapply(strSeq:Seq[String]):Boolean =
    {
      println("StrSeqContains.unapply() called.")
      // The following line tests if strSeq contains strValue.
      strSeq.contains(strValue) // This line can also be written as: strSeq contains strValue
    }
  }

  def main(args:Array[String]):Unit =
  {
    val stud:List[Student] = List(Student("Harris", List(Address("LosAngeles",   "California"))),
                                  Student("Reena",  List(Address("Houston",      "Texas"))),
                                  Student("Rob",    List(Address("Dallas",       "Texas"))),
                                  Student("Chris",  List(Address("Jacksonville", "Florida"))))

    // The following val (texas) is used to obtain all students residing in Texas.
    val texas:StrSeqContains = new StrSeqContains("Texas")

    // When the stud.collect() method is called below, it GETS PASSED A PARTIAL FUNCTION.
    // This partial function automatically invokes BOTH the State.unapply() AND the
    // StrSeqContains.unapply() methods.  Both of those unapply() methods get called
    // here 4 times; once for each of the 4 students.  NOTE: The following line
    // MUST reference "texas()", not just "texas".
    val students:List[String] = stud.collect{ case student@State(texas()) => student.name }
    println(students) // PRINTS: List(Reena, Rob)
  }
}

===================================================================================
