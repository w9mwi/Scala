A Scala Extractor is defined as an object that has a method
named unapply() as one of its methods.  This unapply() method
extracts an object and returns the attributes.  The unapply()
method is also used in Pattern matching and Partial functions.
Extractors also explain the apply() method, which takes arguments
and constructs an object.  The unapply() method reverses the
construction procedure of the apply() method.

unapply() (and unapplySeq()) is "silently" called on a class whenever
you attempt to PATTERN MATCH on a class instance.

The returned result type of an unapply() method must contain a get()
method, which is used as an extractor pattern.  That's why unapply()
methods typically return an Option type.  Because the Option type
contains a get() method.  When the unapply() method is called on a
pattern match, it simply "undoes" what the apply() method does.

Whenever you design a regular class (not a case class) that you want
to pattern match on, you must write your own unapply() method for
that class's companion object.  That is, if you want to pattern match
on a class from which data must be extracted, like in this example:
case MyClass(x) => ...

If you want to pattern match on an entire class, like the following
line of code, you do NOT need to supply your own unapply() method
on the class's compainion object.
case x:MyClass => ...

Code below show examples of the apply() and unapply() methods,
as well as how unapply() is used in pattern matching.
========================================================================
object Demo
{
  class MyClass(val name:String)

  // NOTE: The following MyClass is an object!!!  It's referred to
  //       as the COMPANION OBJECT of the MyClass class defined above.
  //       It is in the COMPANION OBJECT where you need to define
  //       the unapply() method.
  object MyClass
  {
    // If you comment out the following unapply() method, this code won't compile.
    // However, if you change MyClass (above) to a "case class", you CAN comment
    // out the following unapply() method--cuz case classes contain an unapply()
    // method by default.
    def unapply(x:MyClass):Option[String] = { println("MyClass.unapply(" + x.name + ") called."); Some(x.name) }
  }

  // NOTICE: When this program executes, the MyClass.unapply() method gets
  //         called BEFORE the case statement's println() method gets called!
  //         (Cuz when pattern matching occurs, that's when the unapply()
  //         method gets called.)  When this program executes, it prints
  //         the following 2 lines of text:
  //         MyClass.unapply(Tom) called.
  //         Pattern match on MyClass(Tom)
  def main(args: Array[String]):Unit =
  {
    val mc = new MyClass("Tom")

    mc match
    {
        // When pattern matching successfully occurs on the following case statement,
        // that case statement gets executed, which results in the MyClass.unapply()
        // method getting called.
      case MyClass(x) => println("Pattern match on MyClass(" + x + ")")
      case _          => println("No pattern match.")

      // The following line of code DOES WORK in this example, and
      // does NOT require the programmer to write her own unapply()
      // method.  The following line of code will never execute cuz
      // it's located below the other 2 case statements.  But if you
      // move it to become the first case statement, it will execute!
      case x:MyClass  =>  println("MyClass = " + x.name)
    }
  }
}
========================================================================
object Demo
{
  def main(args: Array[String])
  {
    def apply(firstname: String, lastname: String):String =
    {
      firstname + "James" + lastname
    }

    def unapply(string:String):Option[(String, String)] =
    {
      val array:Array[String] = string.split("James")

      if (array.length == 2)
        Some(array(0), array(1))
      else
        None
    }

    // The following 2 println() statements print:
    // apply("Tom", "Jones"))    = TomJamesJones
    // unapply("JonesJamesTom")) = Some((Jones,Tom))
    println("""apply("Tom", "Jones"))    = """ + apply("Tom", "Jones"))
    println("""unapply("JonesJamesTom")) = """ + unapply("JonesJamesTom"))
  }
}
========================================================================
The following sample shows that your unapply() method doesn't really
need to perform the opposite operation of the apply() method.

object Demo
{
  // Main method
  def main(args: Array[String])
  {
    def apply(q:Double):Double = q * 10

    def unapply(r:Int):Option[Int] =
    {
      if (r % 5 == 0)
        Some(r * 5)
      else
        None
    }

    println("apply(20) = " + apply(20))     // PRINTS: apply(20) = 200.0
    println("unapply(20) = " + unapply(20)) // PRINTS: unapply(20) = Some(100)
    println("unapply(19) = " + unapply(19)) // PRINTS: unapply(19) = None
  }
}
========================================================================
Extractors can be utilized in Pattern Matching.  While comparing the
Object of an Extractor in Pattern Matching, the unapply method will
be executed spontaneously.  The following code shows this example
of Pattern Matching. All "case classes" in Scala already have an
Extractor, so it can be utilized spontaneously with Pattern Matching.

object Demo
{
  def main(args: Array[String])
  {
    // This program prints the following text to the console.
    // apply(25.0) is called.   x = 5.0
    // unapply(5.0) is called.  y = 1.0

    val x:Double = Demo(25) // NOTE: This line of code literally calls: Demo.apply(25) so x = 5.0
    println("x = " + x)

    // Apply pattern matching here...
    x match
    {
      case Demo(y) => println("y = " + y) // This line of code literally calls: Demo.unapply(5.0)
      case _ => println("Can't be evaluated.")
    }
  }

  def apply(x:Double):Double = { print("apply(" + x + ") is called.   "); x / 5 }

  def unapply(z:Double):Option[Double] =
  {
    print("unapply(" + z + ") is called.  ")
    if (z % 5 == 0)
      Some(z / 5)
    else None
  }
}

========================================================================
For more info, on this example, see:
https://www.journaldev.com/8270/scala-extractors-apply-unapply-and-pattern-matching

========================================================================

object Demo
{
  case class Address(city: String, state: String)
  case class Student(name: String, address: Seq[Address])

  object State
  {
    def unapply(stud:Student):Option[Seq[String]] =
    {
      println("State.unapply() called.")
      // In the following line of code, "for(addr <- stud.address)" will return
      // a SINGLE Address, such as this:  Address(Jacksonville,Florida)
      // Then, "yield addr.state" returns ONLY THE STATE as a Seq[String] wrapped
      // in an Option.  An example of what's returned is this:  Some(List(Florida))
      Some(for(addr <- stud.address) yield addr.state)
    }
  }

  class StrSeqContains(strValue:String)
  {
    def unapply(strSeq:Seq[String]):Boolean =
    {
      println("StrSeqContains.unapply() called.")
      // The following contains() method tests if strSeq contains strValue
      strSeq.contains(strValue) // This line can also be written as: strSeq contains strValue
    }
  }

  def main(args:Array[String]):Unit =
  {
    val stud:List[Student] = List(Student("Harris", List(Address("LosAngeles",   "California"))),
                                  Student("Reena",  List(Address("Houston",      "Texas"))),
                                  Student("Rob",    List(Address("Dallas",       "Texas"))),
                                  Student("Chris",  List(Address("Jacksonville", "Florida"))))

    val Texas:StrSeqContains = new StrSeqContains("Texas")
    // The following line of code calls State.unapply() AND StrSeqContains.unapply().
    // Both those unapply() methods are called 4 times--once for each student.
    val students:List[String] = stud.collect { case student@State(Texas()) => student.name }
    println(students) // PRINTS: List(Reena, Rob)
    testSeqStr()
  }

  def testSeqStr():Unit =
  {
    // This method exists just to demonstrate how a Seq[String] data
    // type is used.  A Seq[String] is nearly the same (but NOT
    // identical) data type as List[String], as shown here...
    val seqStr:Seq[String] = Seq("123", "ABC", "789", "XYZ")
    var list:List[String] = List()
    list = seqStr(0) :: seqStr(1) :: seqStr(2) :: seqStr(3) :: list
    println(list)   // PRINTS: List(123, ABC, 789, XYZ)
    println(seqStr) // PRINTS: List(123, ABC, 789, XYZ)
    // list = seqStr;  // This line will NOT compile cuz list and seqStr are different data types.
    val seqStr2:Seq[String] = seqStr  // This line compiles cuz seqStr2 and seqStr are identical data types.
    println(seqStr2) // PRINTS: List(123, ABC, 789, XYZ)
  }
}
