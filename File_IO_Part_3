If you need to read/write data in formats other than individual bytes
(Strings, Chars, Ints, Floats, Doubles, Booleans, Bytes, etc.), use
DataInputStream and DataOutputStream.

Remember, these classes and methods come from the java.io package.
So refer to the Java API for docs regarding these classes and methods:
https://docs.oracle.com/javase/9/docs/api/overview-summary.html

DataInputStream includes the following methods:
___ readBoolean():Boolean
___ readByte():Byte
___ readChar():Char
___ readDouble():Double
___ readFloat():Float
___ readInt():Int
___ readLong():Long
___ readShort():Short
___ readUTF():String

DataOutputStream includes the following methods:
___ writeBoolean(v:Boolean):Unit
___ writeByte(v:Int):Unit
___ writeBytes(s:String):Unit
___ writeChar(v:Int):Unit
___ writeChars(s:String):Unit
___ writeDouble(v:Double):Unit
___ writeFloat(v:Float):Unit
___ writeInt(v:Int):Unit
___ writeLong(v:Long):Unit
___ writeShort(v:Int):Unit
___ writeUTF(str:String):Unit

In almost all casses you'll want to use buffering when doing file I/O for performance
reasons.  So you'll want to wrap DataInputStream and DataInputStream around
BufferedInputStream and BufferedOutputStream like in the following examples:

val dis = new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)))
val dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)))

========================================================================================
The following sample program creates an Array[Double] type that contains 10 elements.
Each of those 10 elements contain a random number of type double.  The Array is
then written to a file.  Finally, that file is read, and its contents are printed
to the console.

The sample code below contains 3 SECTIONS.  Each section does exactly the same thing,
but does it in a different way.  Read the in-line comments below for details.
object Demo
{
  import java.io._

  def main(args: Array[String])
  {
    val fileName:String = "/home/tbouril/arrayOfDoubles.bin"

    println("SECTION 1 =====================")
    // NOTE: This section of code does exactly the same thing as the
    //       BOTH BELOW SECTIONS of code, except it calls...
    //       1) writeArrayOfDoubles_1()
    //       2) readArrayOfDoubles_1()
    writeArrayOfDoubles_1(fileName, Array.fill(5)(math.random))
    var doubleArray:Array[Double] = readArrayOfDoubles_1(fileName)
    doubleArray.foreach(println) // PRINTS: The entire contents of doubleArray.

    println("\nSECTION 2 =====================")
    // NOTE: This section of code does exactly the same thing as
    //       BOTH ABOVE AND BELOW SECTIONS of code, except it calls...
    //       1) writeArrayOfDoubles_2()
    //       2) readArrayOfDoubles_2()
    writeArrayOfDoubles_2(fileName, Array.fill(5)(math.random))
    doubleArray = readArrayOfDoubles_2(fileName)
    doubleArray.foreach(println) // PRINTS: The entire contents of doubleArray.

    println("\nSECTION 3 =====================")
    // NOTE: This section of code does exactly the same thing as the
    //       BOTH ABOVE SECTIONS of code, except it calls...
    //       1) writeArrayOfDoubles_2() with a println() statement to BETTER UNDERSTAND CURRYING!!!
    //       2) readArrayOfDoubles_3()
    writeArrayOfDoubles_2(fileName, Array.fill(5){println("SECTION 3 of main() called."); math.random})
    doubleArray = readArrayOfDoubles_3(fileName)
    doubleArray.foreach(println) // PRINTS: The entire contents of doubleArray.
  }


  def writeArrayOfDoubles_1(fileName:String, arrayOfDoubles:Array[Double]) =
  {
    val dos = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)))
    try
    {
      // Write an Int value to the file that designates
      // the number of elements in arrayOfDoubles.
      dos.writeInt(arrayOfDoubles.size)               // Writes the array's size to the file.
      arrayOfDoubles.foreach(x => dos.writeDouble(x)) // Writes the array's entire contents to the file.
    } finally { dos.close() }
  }

  def writeArrayOfDoubles_2(fileName:String, arrayOfDoubles:Array[Double])
  {
    withDOS(fileName)(dos => { dos.writeInt(arrayOfDoubles.size) // Writes the array's size to the file.
    arrayOfDoubles.foreach(x => dos.writeDouble(x))  })          // Writes the array's entire contents to the file.
  }

  def readArrayOfDoubles_1(fileName:String):Array[Double] =
  {
    val dis = new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)))

    // The following call to Array.fill(dis.readInt)(dis.readDouble) does the following:
    // 1) Creates an Array[Double] containing the number of elements obtained from
    //    calling dis.readInt.
    // 2) The Array[Double] created is filled with values by calling dis.readDouble.
    // 3) dis.readInt gets called before dis.readDouble.  dis.readDouble gets called
    //    multiple times.  The number of times it gets called is equal to the number
    //    returned by dis.readInt.
    // 4) The Array[Double] that gets created is then returned by this function.
    try { Array.fill(dis.readInt)(dis.readDouble) } finally { dis.close() }
  }

  def readArrayOfDoubles_2(fileName:String):Array[Double] =
  {
    // The following call to Array.fill(dis.readInt)(dis.readDouble) does the following:
    // 1) Creates an Array[Double] containing the number of elements obtained from
    //    calling dis.readInt.
    // 2) The Array[Double] created is filled with values by calling dis.readDouble.
    // 3) dis.readInt gets called before dis.readDouble.  dis.readDouble gets called
    //    multiple times.  The number of times it gets called is equal to the number
    //    returned by dis.readInt.
    // 4) The Array[Double] that gets created is then returned by this function.
    withDIS(fileName)(dis => Array.fill(dis.readInt)(dis.readDouble))
  }

  def readArrayOfDoubles_3(fileName:String):Array[Double] =
  {
    // NOTE: The ONLY difference between this function and readArrayOfDoubles_2()
    //       is that this function contains a println() statement so you can see
    //       when dis.readDouble() gets called, and you can BETTER UNDERSTAND CURRYING!!!
    withDIS(fileName)(dis => Array.fill(dis.readInt){println("readArrayOfDoubles_3() called."); dis.readDouble})
  }

  def withDIS[A](fileName:String)(func:DataInputStream => A):A =
  {
    // NOTE: Because this function is a parametric function, the func
    //       parameter passed can return different data types.  Whatever
    //       data type the func parameter returns will also be the data
    //       type returned by this function.  In this example that
    //       data type is Array[Double].
    //
    // This function opens the fileName that is passed as a parameter, then
    // it executes the func that is passed as a parameter.  This function
    // returns the same data type that its func parameter returns.
    val dis:DataInputStream = new DataInputStream(new BufferedInputStream(new FileInputStream(fileName)))
    try { func(dis) } finally { dis.close() }
  }

  def withDOS[A](fileName:String)(func:DataOutputStream => A):A =
  {
    // NOTE: Because this function is a parametric function, the func
    //       parameter passed can return different data types.  Whatever
    //       data type the func parameter returns will also be the data
    //       type returned by this function.  In this example that
    //       data type is Array[Double].
    //
    // This function opens the fileName that is passed as a parameter, then
    // it executes the func that is passed as a parameter.  This function
    // returns the same data type that its func parameter returns.
    val dos:DataOutputStream = new DataOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)))
    try { func(dos) } finally { dos.close() }
  }
}
========================================================================================

object Demo
{
  import java.io._

  // NOTE: The Student class defined here "extends Serializable".  The
  //       reason for extending the Student class to Serializable is so
  //       that we can then use methods defined in ObjectInputStream and
  //       ObjectOutputStream.  Since "case class" Scala types automatically
  //       extends Serializable, if the following Student class was instead
  //       a "case class", we wouldn't have to extends Serializable.
  class Student(val name:String, val grades:Array[Int]) extends Serializable

  /**
    * This Scala program gets run from the command line.  The first time you run this
    * program from the command line, you pass it arguments that tell the program to
    * generates a new file named junk.bin, and WRITE DATA to that file.  The next
    * time you run this program, you pass it arguments that tell the program to
    * READ DATA from that junk.bin file, and print that data to the console window.
    * Follow these instructions:
    *
    * 1) Save this text file to a file named: Demo.scala
    * 2) From the command line window, compile this file and
    *    execute the compiled file by doing the following...
    *    $ scalac Demo.scala
    *    $ scala Demo -w junk.bin John 98 78 88 93 100 83
    *    $ scala Demo -r junk.bin
    *
    * @param args Arguments passed from the command line shown above.
    */
  def main(args: Array[String])
  {
    val fileName:String = args(1)

    args(0) match
    {
      case "-r" => // Read data from fileName...
        val ois = new ObjectInputStream(new BufferedInputStream(new FileInputStream(fileName)))
        ois.readObject() match
        {
          // The below call to mkString(", ") converts the student.grades Array[Int] to a string,
          // and adds a ", " string between each Array element.
          case student:Student => println(student.name + " " + student.grades.mkString(", "))
          case _               => println("Unidentified type.")
        }
        ois.close()

      case "-w" => // Write data to fileName...
        val oos     = new ObjectOutputStream(new BufferedOutputStream(new FileOutputStream(fileName)))
        val student = new Student(args(2), args.drop(3).map(_.toInt))
        oos.writeObject(student)
        oos.close()

      case _ => println("Usage: (-r or -w) + fileName + studentName + grade_1  grade_2, ...")
    }
  }
}
