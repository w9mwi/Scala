==========================================================================
import java.awt.{Color, Graphics2D}
import java.awt.geom.{Ellipse2D, Rectangle2D}

object Demo
{
  class Shape(private var color:Color)
  {
    def area:Double = 0.0
    def circumference:Double = 0.0
    def draw(g:Graphics2D): Unit =
    {
      g.setPaint(color)
    }
    def getColor:Color = { color }
  }

  class Rectangle(val width:Double, val height:Double) extends Shape(Color.BLUE)
  {
    override def area:Double = width * height
    override def circumference:Double = 2.0 * width * height
    override def draw(g:Graphics2D): Unit =
    {
      super.draw(g) // Calls the Shape.draw() method, so the Shape's color gets set.
      g.fill(new Rectangle2D.Double(0.0, 0.0, width, height))
    }
  }

  class Circle(val radius:Double) extends Shape(Color.PINK)
  {
    override def area:Double = math.Pi * radius * radius
    override def circumference:Double = 2.0 * math.Pi * radius
    override def draw(g:Graphics2D): Unit =
    {
      super.draw(g) // Calls the Shape.draw() method, so the Shape's color gets set.
      g.fill(new Ellipse2D.Double(0.0, 0.0, 2.0 * radius, 2.0 * radius))
    }
  }

  def areaCircumferenceRatio(s:Shape) =
  {
    s.area / s.circumference
  }

  def main(args: Array[String]):Unit =
  {
    val circle:Circle       = new Circle(5.0)
    val rectangle:Rectangle = new Rectangle(4.0, 5.0)
    println("circle.area  = " + circle.area +     ",  circle.circumference = " + circle.circumference)
    println("circle.color = " + circle.getColor + ",  rectangle.color = "      + rectangle.getColor)

    val circleACR = areaCircumferenceRatio(circle)
    val rectACR   = areaCircumferenceRatio(rectangle)
    println("circleACR = " + circleACR + ",  rectACR = " + rectACR)
  }
}
==========================================================================
