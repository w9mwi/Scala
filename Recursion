THREE (3) STEPS FOR WRITING SCALA RECURSIVE FUNCTIONS
=====================================================
When you write a recursive functions, your job may
be easier if you ask the following 3 questions...

STEP 1) What is the recursive function's signature?
        In other words, what do you pass to it, and
        what does it return?

STEP 2) What is the exit condition of the function?
        In other words, what's the expression required
        for the if() statement to make the function
        return a value and therefore terminate?
        
        FYI, a recursive function's if() statement will
        determine if the function will return a value,
        or if the function will make a recursive call.

STEP 3) What is the algorithm of the function?  Write
        down the problem, and think of how it could
        best be solved.

The 3 functions defined in the sample code immediately
below (sum1(), sum2(), and sum3()) are all functionally
equivalent.  Each function gets passed a List[Int]
type, and returns the sum of all Ints contained in
the List.  The sum2() and sum3() functions below
use the "match" Scala keyword.

=============================================================================

object Demo
{
  def main(args: Array[String])
  {
    val myList:List[Int] = List (215, 683, 9673, 8436, 420, 815)
    println("sum1 = " + sum1(myList)) // PRINTS: sum1 = 20242
    println("sum2 = " + sum2(myList)) // PRINTS: sum2 = 20242
    println("sum3 = " + sum3(myList)) // PRINTS: sum3 = 20242
  }

  /**
    * THIS IS A RECURSIVE FUNCTION, which returns the sum of
    * all Ints contained in the List passed to this function.
    */
  def sum1(list:List[Int]):Int =
  {
    if (list == Nil) { 0 }
    else { list.head + sum1(list.tail) }
  }

  /**
    * THIS IS A RECURSIVE FUNCTION, which returns the sum of
    * all Ints contained in the List passed to this function.
    */
  def sum2(list:List[Int]):Int = list match
  {
    // NOTE: Don't confuse the "=>" symbol below with the "=>"
    //       symbol used by function literals.  Scala case
    //       statements always require the "=>" symbol.
    case Nil => 0
    case _   => list.head + sum2(list.tail)
  }

  /**
    * THIS IS A RECURSIVE FUNCTION, which returns the sum of
    * all Ints contained in the List passed to this function.
    */
  def sum3(list:List[Int]):Int = list match
  {
    // NOTE: Don't confuse the "=>" symbol below with the "=>"
    //       symbol used by function literals.  Scala case
    //       statements always require the "=>" symbol.
    case Nil        => 0
    case head::tail => head + sum3(tail)
  }
}

=============================================================================
The 3 functions defined in the sample code immediately above
(sum1(), sum2(), and sum3()) are all recursive functions.  The
problem with these standard recursive functions is that every time
the function calls itself, it consume more stack memory.  So if
a function is deeply recursive, a stack overflow can occur.

To prevent the possibility of stack overflow, a tail-recursive
function can be used instead.  A tail-recursive function is a
a function that calls itself as its VERY LAST ACTION.  The
sum1(), sum2(), and sum3() functions in the sample code above
are NOT tail-recursive because their last action is an addition
that gets performed AFTER the recursive function call is made.

Read in-line comments in the below sample code for more info.
=============================================================================

import scala.annotation.tailrec
object Demo
{
  def main(args: Array[String])
  {
    val list:List[Int] = List.range(1, 10) // range(1, 10) creates a List of 9 Ints:  1 through 9
    val listSum:Int    = sum(list)
    println("listSum = " + listSum) // PRINTS: listSum = 45
  }

  /**
    * NOTE: The sumTailRecursive() function is defined INSIDE this sum() function.
    *       You could move the sumTailRecursive() function so it's defined OUTSIDE
    *       this sum() function without any change in behavior.  However, if
    *       sumTailRecursive() was moved outside the sum() function, it could
    *       be called directly from main(), which wouldn't be useful as main()
    *       needs to call the sum() function.
    *
    *       When the VERY LAST ACTION of a function is a call to itself (as we
    *       see in sumTailRecursive() below), the function is tail-recursive.
    *       When a function is tail-recursive, the Scala compiler detects it
    *       and optimizes the JVM bytecode so the recursive function requires
    *       only a single stack frame.  This makes it run faster, saves memory,
    *       and prevents the possibility of the function failing because
    *       of a stack overflow.
    */
  def sum(list:List[Int]):Int =
  {
    import scala.annotation.tailrec
    @tailrec  // @tailrec informs the compiler to enforce tail-recursion on the sumTailRecursive() function.
    def sumTailRecursive(currentSum:Int, list:List[Int]):Int =
    {
      if (list != Nil)
      {
        // The following println() is used only to visualize the recursive call.
        println("(list.head, list.tail) = " + "(" + list.head + ", " + list.tail + ")")
        // The above println() prints this text:
        // (list.head, list.tail) = (1, List(2, 3, 4, 5, 6, 7, 8, 9))
        // (list.head, list.tail) = (2, List(3, 4, 5, 6, 7, 8, 9))
        // (list.head, list.tail) = (3, List(4, 5, 6, 7, 8, 9))
        // (list.head, list.tail) = (4, List(5, 6, 7, 8, 9))
        // (list.head, list.tail) = (5, List(6, 7, 8, 9))
        // (list.head, list.tail) = (6, List(7, 8, 9))
        // (list.head, list.tail) = (7, List(8, 9))
        // (list.head, list.tail) = (8, List(9))
        // (list.head, list.tail) = (9, List())
      }

      list match
      {
        // NOTE: If the order of two case statements immediately below
        //       are swapped, this function works the same.
        case Nil        => currentSum
        case head::tail => sumTailRecursive(head + currentSum, tail) // head + currentSum is where the math happens!
      }
    }

    sumTailRecursive(0, list) // This line of code is called ONLY ONE TIME.
  }
}

=============================================================================
The following code sample is another example of using tail recursion to sum
a List of Int values.  This is basically identical to the sample code shown
immediately above, except that the mySum() function does NOT contain an
embedded function like sumTailRecursive() above.  Read in-line comments for details.


import scala.annotation.tailrec
object Demo
{
  def main(args: Array[String]): Unit = {
    val myList = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    println("mySum = "  + mySum(myList, 0)) // PRINTS: // mySum = 55
  }

  @tailrec // @tailrec informs the compiler to enforce tail-recursion on the mySum() function.
  def mySum(myList:List[Int], accum:Int):Int =
  {
    if (myList.isEmpty) { accum }
    else
    {
      // The following println() is used only to visualize the recursive call.
      println("(list.head, list.tail) = " + "(" + myList.head + ", " + myList.tail + ")")
      mySum(myList.tail, myList.head + accum)
    }
    // The above println() prints this text:
    // (list.head, list.tail) = (1, List(2, 3, 4, 5, 6, 7, 8, 9, 10))
    // (list.head, list.tail) = (2, List(3, 4, 5, 6, 7, 8, 9, 10))
    // (list.head, list.tail) = (3, List(4, 5, 6, 7, 8, 9, 10))
    // (list.head, list.tail) = (4, List(5, 6, 7, 8, 9, 10))
    // (list.head, list.tail) = (5, List(6, 7, 8, 9, 10))
    // (list.head, list.tail) = (6, List(7, 8, 9, 10))
    // (list.head, list.tail) = (7, List(8, 9, 10))
    // (list.head, list.tail) = (8, List(9, 10))
    // (list.head, list.tail) = (9, List(10))
    // (list.head, list.tail) = (10, List())
  }
}

=============================================================================

object Demo
{
  def main(args: Array[String]):Unit =
  {
    println("factorial(7)  = " + factorial(7))  // PRINTS: factorial(7)  = 5040
    println("factorial(8)  = " + factorial(8))  // PRINTS: factorial(8)  = 40320
    println("factorial(9)  = " + factorial(9))  // PRINTS: factorial(9)  = 362880
    println("factorial(10) = " + factorial(10)) // PRINTS: factorial(10) = 3628800

    println("fibonacci(7)  = " + fibonacci(7))  // PRINTS: fibonacci(7)  = 21
    println("fibonacci(8)  = " + fibonacci(8))  // PRINTS: fibonacci(8)  = 34
    println("fibonacci(9)  = " + fibonacci(9))  // PRINTS: fibonacci(9)  = 55
    println("fibonacci(10) = " + fibonacci(10)) // PRINTS: fibonacci(10) = 89
  }

  /**
    * A recursive function.
    */
  def factorial(number:Int):Int =
  {
    if (number < 2) { 1 }
    else (number * factorial(number-1))
  }

  /**
    * A recursive function.
    */
  def fibonacci(number:Int):Int =
  {
    if (number < 2) { 1 }
    else (fibonacci(number-1) + fibonacci(number-2))
  }
}

===================================================================

object Demo
{
  /**
    * This getList() function is BOTH a recursive function, and a
    * parameteric function--which means different data types can
    * be passed to its x argument.
    */
    def getList[T](x:T, noOfElements:Int): List[T] = {
      if (noOfElements == 0)  Nil
      // Every time the following line of code executes, a new
      // List element gets appended to the List designated by x.
      else x :: getList(x, noOfElements - 1)
    }

    def main(args: Array[String])
    {
      println(getList(3, 1))     // PRINTS: List(3)
      println(getList("Hi", 5))  // PRINTS: List(Hi, Hi, Hi, Hi, Hi)
    }
}
