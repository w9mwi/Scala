
--> https://www.journaldev.com/9609/scala-typebounds-upper-lower-and-view-bounds

In Scala, Type Bounds are restrictions on Type Parameters or Type Variable.
By using Type Bounds, we can define the limits of a Type Variable.  Scala Type
Bounds ensure Type-Safe Application Development.

Scala supports the following Type Bounds for Type Variables:

1) Scala Upper Bounds - In Scala, we can define an UPPER Bound on Type Parameter as this:
                        [T <: S]
                        Which means Type Parameter T must be either same type as S or a SUB-type of S.

2) Scala Lower Bounds - In Scala, we can define a LOWER Bound on Type Parameter as this:
                        [T >: S]
                        Which means Type Parameter T must be either same type as S or a SUPER-type of S.

3) Scala View Bounds - In Scala, a VIEW Bound is used when we want to use existing IMPLICIT CONVERSIONS
                       automatically.  We can define VIEW Bound on a Type Parameter like this:
                       [T <% S]
                       In some scenarios, we need to use IMPLICIT CONVERSIONS to automatically solve our
                       problem statement.  We can use Scalaâ€™s View Bounds to utilize these Implicits.

==============================================================================================
UPPER Bounds Sample Code.

object Demo
{
  class Animal
  class Dog   extends Animal
  class Puppy extends Dog
  class AnimalCarer
  {
    // This display() method will work if the type passed
    // to it is a Dog OR a sub-type of Dog.
    def display[T <: Dog](t:T):Unit = { println(t) }  // [T <: Dog] designates UPPER bounds.
  }

  def main(args:Array[String]):Unit =
  {
    val animal      = new Animal
    val dog         = new Dog
    val puppy       = new Puppy
    val animalCarer = new AnimalCarer

    // The following commented-out line of code will NOT compile because the type
    // passed to the display() method MUST be of type Dog, OR a subtype of Dog.
    // animalCarer.display(animal) // This won't compile cuz Animal is NOT of type Dog, or a sub-type of Dog.
    animalCarer.display(dog)       // This works cuz Dog is of type Dog.
    animalCarer.display(puppy)     // This works cuz Puppy is a sub-type of Dog.
  }
}

==============================================================================================
LOWER Bounds Sample Code.

object Demo
{
  class Animal
  class Dog   extends Animal
  class Puppy extends Animal
  class AnimalCarer
  {
    // This display() method will work if the type passed
    // to it is a Puppy OR a super-type of Puppy.
    def display[T >: Puppy](t:T):Unit = { println(t) }  // [T >: Puppy] designates LOWER bounds.
  }

  def main(args:Array[String]):Unit =
  {
    val animal      = new Animal
    val dog         = new Dog
    val puppy       = new Puppy
    val animalCarer = new AnimalCarer

    animalCarer.display(animal) // This works cuz Animal is a SUPER-type of Puppy.
    animalCarer.display(dog)    // This works cuz Dog is a SUPER-type of Puppy.
    animalCarer.display(puppy)  // This works cuz Puppy is of type of Puppy.
  }
}
==============================================================================================
VIEW Bounds Sample Code.  This program compares 2 Strings using the '>' and '<' relational operators.

object Demo
{
  class Name[T <% Ordered[T]](val firstName: T, val lastName: T)
  {
    def greaterThan = if (firstName > lastName) firstName + " > " + lastName
                      else lastName + " > " + firstName
    def lessThan    = if (firstName < lastName) firstName + " < " + lastName
                      else lastName + " < " + firstName
  }

  def main(args:Array[String]):Unit =
  {
    val name1 = new Name("Poop", "Pop")
    val name2 = new Name("Channel", "Chunnel")

    println(name1.greaterThan) // PRINTS: Pop > Poop
    println(name2.greaterThan) // PRINTS: Chunnel > Channel
    println(name1.lessThan)    // PRINTS: Poop < Pop
    println(name2.lessThan)    // PRINTS: Channel < Chunnel
  }
}


==============================================================================================
