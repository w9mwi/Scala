For more info. abouts Sets, see Page 503 of book, and:
http://docs.scala-lang.org/overviews/collections/sets.html

There are two main differences between a Set type and a Seq type.  They are:

1) A Set does NOT allow duplicate values.  If you try adding a value to a
   Set that already exists in the Set, the Set contents remain unchanged.
2) The order of elements in a Set is NOT guaranteed.

There are mutable Sets and immutable Sets.  If you don't use an import
statement to declare the type of Set you're using, the Set will be
immutable by default...

scala.collection.immutable.Set - The default Set used when an import statement for Set isn't declared.
import scala.collection.mutable.Set - To use a mutable Set, you must include this import statement.

The code below shows examples of how to use both immutable and mutable Sets..
=============================================================================================
import scala.collection.immutable
import scala.collection.mutable

object Demo
{
  def main(args: Array[String])
  {
    val arrayInt:Array[Int]         = Array[Int](10, 13, 16, 18)
    var mutSet:mutable.Set[Int]     = mutable.Set(4, 3, 2, 1)
    var immutSet:immutable.Set[Int] = immutable.Set(9, 8, 7, 6, 5)

    // WARNING!  CAUTION!  DANGER!...  The order of elements in a Set is NOT preserved!
    // Therefore, you can never trust that elements will appear in any particular order.

    // ***************************************************************************************
    // In this section, we manipulate mutSet, which is MUTABLE.
    // The ++= operator works for the TraversableOnce type.  Since all collections in Scala
    // are a subtype of TraversableOnce, the ++= operator works for all Scala collections that
    // are mutable.  Here, we add all elements contained in arrayInt to mutSet...
    println("A) mutSet = " + mutSet) // PRINTS: A) mutSet = Set(1, 2, 3, 4)
    mutSet ++= arrayInt
    println("B) mutSet = " + mutSet) // PRINTS: B) mutSet = Set(1, 16, 13, 2, 3, 18, 10, 4)

    // The --= operator works for the TraversableOnce type.  Since all collections in Scala
    // are a subtype of TraversableOnce, the --= operator works for all Scala collections that
    // are mutable.  Here, we remove all elements contained in arrayInt from mutSet...
    mutSet --= arrayInt
    println("C) mutSet = " + mutSet) // PRINTS: C) mutSet = Set(1, 2, 3, 4)

    // Remove the 4 Int value from mutSet, and then remove the 3 Int value from mutSet...
    mutSet -= 4 // -= does the same as the remove() method.
    mutSet.remove(3) // remove() does the same as -=.
    println("D) mutSet = " + mutSet) // PRINTS: D) mutSet = Set(1, 2)

    // Add the 3 Int value to mutSet, and then add the 4 Int value to mutSet...
    mutSet += 3 // += does the same as the add() method.
    mutSet.add(4) // add() does the same as +=.
    println("E) mutSet = " + mutSet) // PRINTS: E) mutSet = Set(1, 2, 3, 4)

    mutSet += -77 // Add the -77 Int value to mutSet
    println("F) mutSet = " + mutSet) // PRINTS: F) mutSet = Set(1, 2, 3, -77, 4)

    // Since the order of a Set can easily change (by adding or removing elements), accessing
    // a set element via an index doesn't have much meaning.  So instead of accessing a Set
    // element via an index (as we do with Arrays and Lists), we call a method to determine
    // whether or not a specific value is contained in the Set.  To do this, we can call any
    // of the following 3 methods, which all do the same thing:
    // The () method, the apply() method, or the contains() method
    // NOTE: true is returned by these 3 methods if the Set contains the element; otherwise, false is returned
    println("G) mutSet(-77) = " + mutSet(-77))                   // PRINTS: G) mutSet(-77) = true
    println("H) mutSet.apply(-77) = " + mutSet.apply(-77))       // PRINTS: H) mutSet.apply(-77) = true
    println("I) mutSet.contains(-77) = " + mutSet.contains(-77)) // PRINTS: I) mutSet.contains(-77) = true
    println("J) mutSet(18) = " + mutSet(18))                     // PRINTS: J) mutSet(18) = false
    mutSet.retain(x => x < -50)
    println("K) mutSet.retain(x => x < 10) = " + mutSet + "\n")  // PRINTS: K) mutSet.retain(x => x < 10) = Set(-77)

    // ***************************************************************************************
    // In this section, we manipulate immutSet, which is IMMUTABLE.
    // Notice that immutSet is declared as a var.  If immutSet was declared as a val,
    // the following code would throw errors at runtime.
    println("L) immutSet = " + immutSet) // PRINTS: L) immutSet = Set(5, 6, 9, 7, 8)
    immutSet ++= arrayInt
    println("M) immutSet = " + immutSet) // PRINTS: M) immutSet = Set(5, 10, 6, 9, 13, 7, 18, 16, 8)
    immutSet --= arrayInt
    println("N) immutSet = " + immutSet) // PRINTS: N) immutSet = Set(5, 6, 9, 7, 8)

    // Remove the 7 Int value from immutSet.  NOTE: The remove() method does NOT exist for an immutable Set.
    immutSet -= 7
    println("O) immutSet = " + immutSet) // PRINTS: O) immutSet = Set(5, 6, 9, 8)

    // Add the 3 Int value to mutSet, and then add the 4 Int value to mutSet.  NOTE: The add() method does
    // NOT exist for an immutable Set.
    immutSet += 3
    println("P) immutSet = " + immutSet) // PRINTS: P) immutSet = Set(5, 6, 9, 3, 8)

    immutSet += -77 // Add the -77 Int value to immutSet
    println("Q) immutSet = " + immutSet) // PRINTS: Q) immutSet = Set(5, 6, 9, 3, 8, -77)

    // Since the order of a Set can easily change (by adding or removing elements), accessing
    // a set element via an index doesn't have much meaning.  So instead of accessing a Set
    // element via an index (as we do with Arrays and Lists), we call a method to determine
    // whether or not a specific value is contained in the Set.  To do this, we can call any
    // of the following 3 methods, which all do the same thing:
    // The () method, the apply() method, or the contains() method
    // NOTE: true is returned by these 3 methods if the Set contains the element; otherwise, false is returned
    println("R) immutSet(-77) = " + immutSet(-77))                   // PRINTS: R) immutSet(-77) = true
    println("S) immutSet.apply(-77) = " + immutSet.apply(-77))       // PRINTS: S) immutSet.apply(-77) = true
    println("T) immutSet.contains(-77) = " + immutSet.contains(-77)) // PRINTS: T) immutSet.contains(-77) = true
    println("U) immutSet(18) = " + immutSet(18))                     // PRINTS: U) immutSet(18) = false

    // NOTE: The retain() method (called above) is available for mutable Sets only, NOT for immutable Sets.
  }
}
=============================================================================================

=============================================================================================
The following code shows how to use ordered sets, also known as sorted sets,
which is specified by Scala's SortedSet type.
import scala.collection.{immutable, mutable}

object Demo
{
  def main(args: Array[String])
  {
    var immutSortSet:immutable.SortedSet[Int] = immutable.SortedSet(10, 4, 8, 2)
    var mutSortSet:mutable.SortedSet[Int]     = mutable.SortedSet(10, 4, 8, 2)
    var mutStringSortSet:mutable.SortedSet[String]     = mutable.SortedSet("Tom", "Jim")

    // NOTE: When the mutable and immutable SortedSet contents are printed,
    //       we see that their type is TreeSet...
    println("A) immutSortSet = " + immutSortSet) // PRINTS: A) immutSortSet = TreeSet(2, 4, 8, 10)
    immutSortSet = immutSortSet.filter(x => x > 4)
    println("B) immutSortSet = " + immutSortSet)// PRINTS: B) immutSortSet = TreeSet(8, 10)

    println("C) mutSortSet = " + mutSortSet) // PRINTS: C) mutSortSet = TreeSet(2, 4, 8, 10)
    mutSortSet = mutSortSet.filter(x => x > 4)
    println("D) mutSortSet = " + mutSortSet) // PRINTS: D) mutSortSet = TreeSet(8, 10)

    // The following 2 lines of code print identical results...
    for (setElement <- immutSortSet) { println(setElement) }
    immutSortSet.foreach(println)

    // The following 2 lines of code print identical results...
    for (setElement <- mutStringSortSet) { println(setElement) }
    mutStringSortSet.foreach(println)

    /**
      * @param name
      */
    class Person(var name: String) extends Ordered[Person]
    {
      override def toString = name

      def compare (that:Person) = // NOTE: The "that" keyword is required on this line of code.
      {
        // The following line of code does NOT require the "that" keyword,
        // but using it makes the code easier to understand.
        if (this.name == that.name) 0 else if (this.name > that.name) 1 else -1;
      }
    }

    val tom = new Person("Tom")
    val jim = new Person("Jim")

    // NOTE: If the Person class above didn't extend the Ordered[Person] type,
    //       AND implement the compare() method, the following two lines of
    //       code would generate compile or runtime errors.  The Person.toString
    //       method overridden in the Person class above provides a way to print
    //       the contents of the tom and jim Person types.
    val mutPerson   = mutable.SortedSet(tom, jim)
    val immutPerson = immutable.SortedSet(tom, jim)

    // The following 2 lines of code print identical results...
    for (setElement <- mutPerson) { println(setElement) }
    mutPerson.foreach(println)

     // The following 2 lines of code print identical results...
    for (setElement <- immutPerson) { println(setElement) }
    immutPerson.foreach(println)
  }
}
=============================================================================================
