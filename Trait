There are three ways to create a data type in Scala...

1) object
2) class
3) trait

NOTE: In the Scala API documentation...
      1) A circled 'c' represents a class
      2) A circled 'o' represents an object
      3) A circled 't' represents a trait.

A trait is a kind of class that enables multiple inheritance.
Classes, case classes, objects, and traits can all extend
no more than one class.  But they can extend multiple traits,
in addition to extending zero or one class.

A trait CAN'T be instantiated, but a class can.

Traits look about the same as any other type of class.
However, like objects, traits CAN'T take class parameters.
Unlike objects, however, traits can take type parameters,
which can help to make them reusable.

This is the syntax for defining a trait:

trait <identifier> [extends <identifier>] [{ fields, methods, and classes }]

QUESTION: When coding an abstract type that will be used with inheritance,
          should a "trait" be used, or an "abstract class"?

ANSWER: The rule of thumb is to use a trait because it allows the flexibility
        of multiple inheritance.  While a trait cannot take arguments (as can
        an abstract class), any values that you'd want to provide as arguments
        can be put into a trait and left undefined, so the class that implements
        the trait will have to provide those values.

You might think that traits are like Java interfaces with concrete methods,
but they can actually do much more.  Traits can declare fields and maintain
state.  Scala traits and classes can often accomplish the same behavior.
But there are three (3) differences between a Scala class and trait...

1) A trait CAN'T contain arguments/parameters like a class can.
   For example, you can define a class like below, which contains
   the arguments/parameters x and y...
   class Point(x: Int, y: Int) // Will compile

   The following attempt to define a trait WON'T compile
   because it contains arguments/parameters...
   trait Point(x: Int, y: Int) // Won't compile

2) A call to super() IN A CLASS is STATICALLY BOUND, which means when
   the super() method is invoked, the same method always gets called,
   regardless of conditions at runtime.

   A call to super() IN A TRAIT is DYNAMICALLY BOUND, which means
   when the super() method is invoked, the method that gets called
   is determined at runtime.

3) A class CAN extend zero or one class.
   A class CAN extend zero, one, or multiple traits.
   A class CAN extend a class AND one or more traits.

   A trait CAN'T extend a class.
   A trait CAN extend zero, one, or multiple traits.

Below are three (3) examples for declaring classes and traits,
which extend other classes/traits.

// A CLASS that extends one class, and multiple traits is defined like this...
class Class_1 extends Class_2 with Trait_A with Trait_B { ... }

// A CLASS that extends no class and multiple traits is defined like this...
class Class_1 extends Trait_A with Trait_B with Trait_C { ... }

// A TRAIT that extends multiple traits is defined like this...
trait Trait_E extends Trait_D with Trait_C with Trait_B with Trait_A { ... }


METHOD RESOLUTION (LINEARIZATION) - Page 466
============================================
It's possible for a function having the same name and signature
to be defined in multiple Scala classes and traits.  Assume a
Scala base class is named Class_1, and has this definition:

class Class_1 extends Class_2 with Trait_A with Trait_B with Trait_C

Also assume a function named func_A is defined in some of those classes
and traits, and all those func_A definitions have identical signatures
(args and return type).  When Class_1.func_A() gets called, this is the
order Scala searches to determine which func_A() gets invoked:

1) Class_1 (the base class) is searched for the function.
2) The highest-to-lowest superclass of Class_2 is searched for the function.
3) Class_2 (the extended class) is searched for the function.
4) The highest-to-lowest superclass of Trait_C is searched for the function.
5) The highest-to-lowest superclass of Trait_B is searched for the function.
6) The highest-to-lowest superclass of Trait_A is searched for the function.
7) Trait_C is searched for the function.
8) Trait_B is searched for the function.
9) Trait_A is searched for the function.

The process of resolving which function gets invoked is called LINEARIZATION.
THE FIRST INSTANCE OF THAT FUNCTION FOUND IS THE FUNCTION THAT GETS INVOKED.

Below is sample code showing which function gets invoked via Scala's LINEARIZATION process.
==================================================================================

object Demo
{
  trait Trait_A
  {
    println("Trait_A instantiated.")
    def func_A() = { println("Trait_A.func_A() is called.") }
  }
  trait Trait_B extends Trait_A
  {
    println("Trait_B instantiated.")
    def func_B() = { println("Trait_B.func_B() is called.") }
  }
  trait Trait_C extends Trait_B
  {
    println("Trait_C instantiated.")
    def func_C() = { println("Trait_C.func_C() is called.") }
    def func_D() = { println("Trait_C.func_D() is called.") }
  }
  trait Trait_D extends Trait_C
  {
    println("Trait_D instantiated.")
  }
  class Class_1 extends Trait_D
  {
    println("Class_1 instantiated.")
  }
  class Class_2
  {
    println("Class_2 instantiated.")
    def func_A() = { println("Class_2.func_A() is called.") }
  }
  class Class_3 extends Class_2
  {
    println("Class_3 instantiated.")
  }

  /**********************
   * main() function.
   *********************/
  def main(args: Array[String]):Unit =
  {
    println("=============================")
    val myClass_1:Class_1 = new Class_1()
    myClass_1.func_A()  // PRINTS: Trait_A.func_A() is called.
    myClass_1.func_B()  // PRINTS: Trait_B.func_B() is called.
    myClass_1.func_C()  // PRINTS: Trait_C.func_C() is called.
    myClass_1.func_D()  // PRINTS: Trait_D.func_D() is called.
    println("=============================")
    val myClass_3:Class_3 = new Class_3()
    // NOTE: When myClass_3.func_A() below executes, Class_2.func_A() gets called.
    myClass_3.func_A()  // PRINTS: Class_2.func_A() is called.
  }
}

==================================================================================
The following sample code shows the similarities and
differences of a Scala trait versus a Scala abstract class.

object Demo
{
  abstract class Person_Abstract_Class
  {
    val name:String
    val age:Int
    override def toString = s"name: $name, age: $age"
  }

  trait Person_Trait
  {
    def name:String // Equivalent to:  val name:String
    def age:Int     // Equivalent to:  val age:Int
    override def toString = s"name: $name, age: $age"
  }

  def main(args: Array[String]): Unit =
  {
    val tom_1:Person_Trait =  new Person_Trait {
      val name:String = "Tom"
      val age:Int = 63
    }
    println(tom_1) // PRINTS: name: Tom, age: 63

    val tom_2:Person_Abstract_Class = new Person_Abstract_Class {
      val name = "Tom_2"
      val age = 6363
    }
    println(tom_2) // PRINTS: name: Tom_2, age: 6363
   }
}

==================================================================================
If a trait contains a member function that IS defined, that member method is concrete.
If a trait contains a member value that IS initialized, that member value is concrete.
If a trait contains a member function that is NOT defined, that member method is abstract.
If a trait contains a member value that is NOT initialized, that member value is abstract.

A trait is very similar to an abstract class in many ways.
When a class extends a trait that has an abstract method
(a method that's declared, but not defined), each abstract
method contained in the trait must be defined in the
in the class that extends the trait!!!  Here's an example:

trait Pet
{
   def speak() { println("Bow-Wow") } // speak() is DEFINED, which means it's a CONCRETE method.
   def comeToMaster(): Unit           // comeToMaster() is UNDEFINED, which means it's an ABSTRACT  method.
}
class Dog(name: String) extends Pet
{
   // Because Dog extends the trait Pet, and Pet contains an ABSTRACT method,
   // the ABSTRACT method comeToMaster() MUST be defined in this Dog class...
   def comeToMaster(): Unit = { println("Woo-hoo, I'm coming!") }
}

A class that extends a trait can override a trait's defined method
by redefining the trait's method inside the class, like this:

class Cat extends Pet
{
   // The following speak() method overrides the trait's speak() method
   // defined in the above example...
   override def speak(): Unit = { println("Meow") }
   def comeToMaster(): Unit   = { println("That's not gonna happen.") }
}

==========================================================================================

object Demo
{
  // THIS CODE DEMONSTRATES HOW TO USE A SCALA TRAIT
  trait Iterator[A]
  {
    // The following 2 functions (hasNext and next) are abstract because they're
    // NOT defined here, only declared.  Any class/trait that inherits from this
    // trait MUST define (implement) these 2 functions.
    def hasNext: Boolean // NOTE: The hasNext function is implemented in the below class that extends this trait.
    def next: A          // NOTE: The next    function is implemented in the below class that extends this trait.
  }

  /**
   *
   * @param maxIterIndex - This Int value designates the maximum upper limit of the iteration index.
   */
  class IntIterator(maxIterIndex: Int) extends Iterator[Int]
  {
    private var currentIterIndex:Int = 0  // NOTE: currentIterIndex is a var type!
    override def hasNext:Boolean = { currentIterIndex < maxIterIndex }
    override def next:Int =
    {
      if (hasNext)
      {
        val nextIterIndex:Int = currentIterIndex
        currentIterIndex += 1
        nextIterIndex
      }
      else { 0 } // Once the Iterator is "spent" this "else" statement (which returns zero) always executes.
    }
  }

  /**
   * @param args Arguments passed from the command line.
   */
  def main(args: Array[String])
  {
    val iterator:IntIterator = new IntIterator(10) // iterator is initialized to perform 10 iterations.

    // The following print statements collectively print this single line:
    // 0, 1, 2, 3, 4, 5, 6, 7, 8, true, 9, false, 0, 0, 0
    print(iterator.next + ", ") // PRINTS: 0
    print(iterator.next + ", ") // PRINTS: 1
    print(iterator.next + ", ") // PRINTS: 2
    print(iterator.next + ", ") // PRINTS: 3
    print(iterator.next + ", ") // PRINTS: 4
    print(iterator.next + ", ") // PRINTS: 5
    print(iterator.next + ", ") // PRINTS: 6
    print(iterator.next + ", ") // PRINTS: 7
    print(iterator.next + ", ") // PRINTS: 8
    // The following line returns true cuz the iterator is NOT yet spent.
    print(iterator.hasNext + ", ") // PRINTS: true
    print(iterator.next + ", ") // PRINTS: 9
    // The following line returns false cuz the iterator IS spent.
    print(iterator.hasNext + ", ") // PRINTS: false
    // The following 3 lines return 0 cuz the iterator IS spent.
    print(iterator.next + ", ") // PRINTS: 0
    print(iterator.next + ", ") // PRINTS: 0
    println(iterator.next)      // PRINTS: 0
  }
}

===========================================================================
Here's another sample program showing how to use Scala traits...

object Demo
{
  trait Drawable
  {
    def draw() { }
  }

  trait Cowboy extends Drawable
  {
    override def draw() = { println("BANG!  The Cowboy drew a gun.") }
  }

  trait Artist extends Drawable
  {
    override def draw() = { println("PICTURE!  The Artist drew a painting.") }
  }

  class ArtistCowboy extends Artist with Cowboy
  class CowboyArtist extends Cowboy with Artist

  def main(args: Array[String])
  {
    val artCow = new ArtistCowboy()
    val cowArt = new CowboyArtist()

    // For artCow, Scala searches for the draw() function first in the Cowboy trait, then
    // in the Artist trait.  The Cowboy.draw() function is found first, so it gets called.
    artCow.draw() // PRINTS:  BANG!  The Cowboy drew a gun.

    // For cowArt, Scala searches for the draw() function first in the Artist trait, then
    // in the Cowboy trait.  The Artist.draw() function is found first, so it gets called.
    cowArt.draw() // PRINTS:  PICTURE!  The Artist drew a painting.
  }
}

=======================================================================================
Here's another sample program showing how to use Scala traits...

object Demo
{
  trait Pet
  {
    def speak:Unit = { println("I speak the universal Pet language.") } // concrete implementation of speak() method.
    def comeToMaster:Unit  // abstract implementation of comeToMaster() method.
  }

  class Dog extends Pet
  {
    def comeToMaster:Unit = { println("I'm a Dog, so I come when called.") }
  }

  class Cat extends Pet
  {
    override def speak:Unit = { println("MEOW") } // The override key word is required here.
    def comeToMaster:Unit   = { println("I'm a Cat, so I don't follow orders.") }
  }

  def main(args: Array[String])
  {
    val catPet:Cat = new Cat()
    catPet.speak        // PRINTS: MEOW
    catPet.comeToMaster // PRINTS: I'm a Cat, so I don't follow orders.

    val dogPet:Dog = new Dog()
    dogPet.speak        // PRINTS: I speak the universal Pet language.
    dogPet.comeToMaster // PRINTS: I'm a Dog, so I come when called.
  }
}

=======================================================================================
Rich Interface - A rich interface has many methods, which makes it convenient to use
                 because the caller is likely to find a method that exactly matches the
                 functionality she needs.

Thin Interface - A thin interface has fewer methods than a rich interface, so it's easier
                 for the programmer to write a thin interface than a rich interface.
                 However, the programmer who uses a thin interface will likely require
                 her to write more code because the thin interface supplies fewer methods
                 than the rich interface.

Traits can be used to enrich a thin interface, transforming it into a rich interface,
as is shown in the following example...

Look at the Point, Rectangle, and Component classes defined here.  Continue reading below.

class Point(val x: Int, val y: Int)
class Rectangle(val topLeft: Point, val bottomRight: Point)
{
  def left = topLeft.x
  def right = bottomRight.x
  def width = right - left
  // Assume more methods belong to this Rectangle class.
}
abstract class Component
{
  def topLeft: Point
  def bottomRight: Point

  def left = topLeft.x
  def right = bottomRight.x
  def width = right - left
  // Assume more methods belong to this abstract class Component.
}

Notice the left, right, and width methods defined above in the Rectangle class
are identical to the ones defined above in the abstract class Component.
These 3 methods will also likely reside in any other classes representing
rectangular objects.

This repetition can be eliminated with an enrichment trait shown immediately
below that's named Rectangular.  This Rectangular trait has two abstract
methods: one that returns the top-left coordinate of the object, and another
that returns the bottom-right coordinate.  It can then supply concrete
implementations of all the other geometric queries.

trait Rectangular
{
  def topLeft: Point
  def bottomRight: Point

  def left = topLeft.x
  def right = bottomRight.x
  def width = right - left
  // Assume more methods belong to this trait named Rectangular.
}

We can now redefine the above class Rectangle, and abstract class Component,
as follows.  This time, both classes are defined by extending the Rectangular
trait.  In other words, both these classes "mix-in" the Rectangular trait...

abstract class Component extends Rectangular
{
  // Assume more methods belong to this abstract class Component.
}
class Rectangle(val topLeft: Point, val bottomRight: Point) extends Rectangular
{
  // Assume more methods belong to this Rectangle class.
}
=======================================================================================
For more info on Scala Traits SEE P.463 of book, or the following web pages:
https://www.artima.com/pins1ed/traits.html
http://docs.scala-lang.org/tour/traits.html

