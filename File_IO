// The following example shows how to read a text file,
// and print its contents to the screen.

import java.io.FileNotFoundException
import scala.io.{BufferedSource, Source}

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      val filePathAndName:String = "/home/tbouril/ch8.txt"
      var fileSource:BufferedSource = Source.fromFile(filePathAndName)

      // The fileSource DOES print here...
      println("1) fileSource.mkString = " + fileSource.mkString)

      // The fileSource does NOT print here, because the file iterator has been "spent."
      println("2) fileSource.mkString = " + fileSource.mkString)
      fileSource.close // When done using the file, always close it!

      // By default (as shown ABOVE), a Source and BufferedSource file iterator is of
      // type Iterator[Char], which means they read one Char at a time from the file.
      // Reading Chars one at a time is inefficient--so we can use other Iterator
      // types to read files.  For example, the code BELOW calls the getLines()
      // method, which uses a file iterator of type Iterator[String], which reads
      // one line of text (as a full String) at a time.
      fileSource = Source.fromFile(filePathAndName)
      val fileContents:Iterator[String] = fileSource.getLines
      println("\n3) fileContents = " + fileContents.mkString)
      fileSource.close // When done using the file, always close it!
    }
    catch
    {
      case fnfe:FileNotFoundException => println("File Not Found, Jack!")
    }
  }
}
=========================================================
=========================================================
object Demo
{
  def main(args: Array[String]): Unit =
  {
      val str:String = "Each word in this String is separated by a blank-space character, which is considered " +
                       "the delimiter char. This String of words is converted below to an Array[String] data type. " +
                       "Where each element in this Array will contain a single word in this String. " +
                       "No blank-space chars (the delimiter char.) will appear in the elements of this Array[String] " +
                       "because the split() method called below designates that as the delimiter char. When this " +
                       "String prints, it will also print the Array index, which begins at zero."
      var arrayString:Array[String] = str.split(" ")
      var count:Int = 0
      for (tempString <- arrayString)
      {
        println(count + ") " + tempString)
        count += 1
      }
      // The next line of code shows how to use 's' char as the delimiter, so the printed String
      // will NOT contain the 's' char.
      arrayString = str.split("s+") // The '+' char means the char before it can occur 1 or more times.  ('*' designates zero or more times.)
      println(arrayString.mkString)
  }
}
=========================================================
=========================================================
import java.io.FileNotFoundException
import scala.io.Source

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      // NOTE: The identityMatrix.txt file referenced below contains this text:
      //       1.0, 0.0, 0.0,
      //       0.0, 1.0, 0.0,
      //       0.0, 0.0, 1.0
      val filePathAndName:String = "/home/tbouril/identityMatrix.txt"
      // The following delimiter argument (" *, *") means zero or more
      // space chars. (' ') BEFORE the comma is valid, AND zero or more
      // space chars. (' ') AFTER the comma is valid.  Calling fileToDataGrid()
      // reads the identityMatrix.txt file into a 3X3 2-dimensional Array of
      // Double types.
      val matrix:Array[Array[Double]] = fileToDataGrid(filePathAndName, " *, *")
      println(matrix.flatten.mkString) // Prints: 1.00.00.00.01.00.00.00.01.0

      // ************************************************
      // The following code prints the 2 indices of each element in the 2-dimensional matrix
      // Array, and the contents of that element.  The first 2 of 8 lines printed are:
      // matrix(0)(0) = 1.0
      // matrix(0)(1) = 0.0
      var count_1:Int = 0
      var count_2:Int = 0
      for (tempArray_1 <- matrix)
      {
        for (tempArray_2 <- tempArray_1)
        {
          println("matrix(" + count_1 + ")(" + count_2 + ") = " + tempArray_2)
          count_2 += 1
        }
        count_1 += 1
        count_2 = 0 // Must reset the second index to zero.
      }
      // ************************************************
    }
    catch
    {
      case fnfe:FileNotFoundException => println("File Not Found, Jack!")
    }
  }

  /**
    * This dataGrid() function is a mind-mess.  Revisit this later.
    */
  def dataGrid(lines:Iterator[String], delim:String): Array[Array[Double]] =
  {
    (lines.map(s=>s.split(delim).map(_.toDouble))).toArray
  }

  /**
    * This fileToDataGrid() function is a mind-mess.  Revisit this later.
    */
  def fileToDataGrid(fileName:String, delim:String): Array[Array[Double]] =
  {
    val strIter:Iterator[String] = Source.fromFile(fileName).getLines()
    dataGrid(strIter, delim)
  }
}
=========================================================
=========================================================
import java.io.{File, FileNotFoundException}
import java.util.Scanner

import scala.io.{BufferedSource, Source}

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      // Instead of reading text from a file, the following line of code
      // reads text from a URL.  This text is then converted to a String.
      val text:BufferedSource = Source.fromURL("https://www.yahoo.com/")
      val pop = text.mkString

      // Below we use the Java Scanner class to read one "word" at a time,
      // and print it to the console.  Where "word" is any text String
      // separated by the delimiter, and the delimiter is whitespace by default.
      val filePathAndName:String = "/home/tbouril/ch8.txt"
      val scan:Scanner = new Scanner(new File(filePathAndName))
      while (scan.hasNext)
      {
        println(scan.next())
      }
      scan.close() // Don't forget to close the Scanner!
    }
    catch
    {
      case fnfe:FileNotFoundException => println("File Not Found, Jack!")
    }
  }
}
=========================================================
=========================================================

=========================================================
=========================================================

=========================================================
=========================================================

=========================================================
=========================================================
