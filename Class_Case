
Scala provides three (3) constructs for creating user-defined types:
1) trait
2) object (Scala has two kinds of object: "case object" and "object")
3) class  (Scala has two kinds of class:  "case class" and "class")

Scala also has the following type of classes, which are more esoteric,
not so common, and documented here: https://github.com/w9mwi/Scala
On this page we won't be concerned with these class types.
* Anonymous class
* Generic class
* Implicit class
* Inner class

A regular Scala class is capable of doing anything a "case class" can do.
But implementing a regular Scala class may require you to write lots
of additional code that a case class contains by default.  A Scala
"case class" is different from regular Scala "class" in the following
8 ways...

1) THIS IS LIKELY THE SINGLE BIGGEST ADVANTAGE OF USING A CASE CLASS...
   All data passed to a case class as arguments are automatically
   turned into public vals by default.  So it generally takes
   ONLY ONE LINE OF CODE to define and declare a case class!
   Where defining/declaring a regular class generally requires
   multiple lines of code.
   
   NOTE: Both case classes and regular classes can be defined so
         their member values are "var" (mutable) or "val" (immutable).
         When the "val" or "var" is NOT specified, member values
         are "public val" by default.

2) When you create a case class the following 6 methods become
   available BY DEFAULT, so you do NOT create them...

      apply() - This method allows you to create a case class instance WITHOUT using the "new" keyword.
                In a regular class, if you want the option of not using the "new" keyword, you must
                define your own apply() method, which should be contained inside a COMPANION OBJECT.
                The following sample code shows how this is done.  When the Scala compiler runs
                the following code...
                IT TRANSFORMS THIS:  tom = Person("Tom")
                INTO THIS:           tom = Person.apply("Tom")
                ==============================================
                object Demo
                {
                  class Person { var name:String = _ }
                  object Person // This is the COMPANION OBJECT.
                  {
                    def apply(name:String):Person = { var p = new Person();  p.name = name;  p }
                  }

                  def main(args: Array[String])
                  {
                    val tom   = Person("Tom") // EQUIVALENT TO:  tom = Person.apply("Tom")
                    val array = Array(Person("Jim"), Person("Jack"))
                  }
                }
                ==============================================
      copy() - Allows you to generate a new "case class" instance that is a copy of the existing one,
               and allows you to change member values in the newly-created copy.  Here's an example...
               
               We create a case class named Pizza that takes two constructor arguments of type CrustSize
               and type Seq[Topping].  After we create this Pizza, we want the capability to add and
               remove toppings.  To accomplish this we use the case class copy() method.  Recall that
               any type of val (like the Pizza class below) CAN'T be changed.  It may appear that the
               copy() method used below could be used to change the only the toppings on the existing
               Pizza, but that DOESN'T work.  We do use the copy() method to aid in changing the toppings,
               but we must create a new Pizza class to include the changed toppings.

               object Demo
               {
                 sealed trait Topping
                 case object Cheese    extends Topping
                 case object Pepperoni extends Topping
                 case object Sausage   extends Topping
                 case object Mushrooms extends Topping

                 sealed trait CrustSize
                 case object MediumCrustSize extends CrustSize
                 case object LargeCrustSize  extends CrustSize

                 case class Pizza(crustSize:CrustSize,  toppings:Seq[Topping])
                 {
                   override def toString = s"Pizza($toppings)"
                   def addTopping(t:Topping):Pizza =      { this.copy(toppings = this.toppings :+ t) }
                   def removeTopping(t:Topping):Pizza =   { this.copy(toppings = ListUtils.dropFirstMatch(toppings, t)) }
                   def removeAllToppings(p:Pizza):Pizza = { this.copy(toppings = Seq[Topping]()) } // NOTE: Seq[Topping]() = Nil
                 }

                 val pizza_1:Pizza = Pizza(LargeCrustSize, Seq(Pepperoni, Cheese))
                 println(s"pizza_1 = $pizza_1")
               }


      equals()   - Determines if two Scala objects are equal.  Read the hashCode() description below.
      hashCode() - The returned value is an Int.  If calling hashCode() on two Scala objects returns the
                   same Int value, they are equal.  You can use the equals() method or the '==' operator
                   instead of calling hashCode().
      toString() - Renders the classâ€™s name and fields to a String.
      unapply() - This method allows pattern matching to work on a case class.  To make
                  pattern matching work on a regular Scala class, you must define your
                  own unapply() method, which should be contained inside a COMPANION OBJECT.
                  This is very similar to the apply() method discussed above.

3) The "case class" Scala type automatically inherits from the type Serializable.

4) A case class MUST contain one or more args/params in its definition.
   However, you CAN create a "case object" without any args/params.

5) A case class CAN be abstract, as the following example line of code shows.
   abstract case class Card(id:Int)

6) A case class CAN'T extend another case class.  But a case class CAN extend
   a regular class OR an abstract class.  The following example will work
   with or without the "abstract" keyword:

   abstract class Card(id:Int)
   case class DebitCard(id:Int, name:String, number:Int) extends Card(id)

7) A case class can extend a Trait, like the following example shows:

   trait Event
   case class ComplexEvent() extends Event

8) The constructor parameters of case classes are treated as
   public values and can be accessed directly, like the
   following code sample shows...

   object Demo
   {
     def main(args:Array[String])
     {
       case class MyCaseClass(name_1: String, name_2:String)
       val caseClass:MyCaseClass = MyCaseClass("String_1", "String_2")
       println(caseClass.name_1, caseClass.name_2) // PRINTS: (String_1,String_2)
     }
   }

================================================================================

For more details about case classes, read the following web pages:
--> http://www.alessandrolacava.com/blog/scala-case-classes-in-depth/
--> http://www.scala-lang.org/old/node/258
--> http://docs.scala-lang.org/tour/case-classes.html

====================================================================================

The following sample code shows how to use a case class for pattern matching,
which you can think of as "data type" matching.  As pattern matching is used
to determine data type.

object Demo
{
  case class Person(var firstName:String, middleName:String, lastName:String, ssn:Int)

  def main(args:Array[String]): Unit =
  {
    val myArray:Array[String] = Array("AA", "BB", "YY", "ZZ")
    val myList:List[Float] = List(1.23F, 45.6F, -78.9F)
    val myChar:Char = 'T'
    val myString:String = "This is a string."
    val myInt:Int = 9876
    val myPerson:Person = Person("Tom", "Jim", "Beam", 123456789)
    val myDouble = 666.66D

    println(determineDataType(myArray))
    println(determineDataType(myList))
    println(determineDataType(myChar))
    println(determineDataType(myString))
    println(determineDataType(myInt))
    println(determineDataType(myPerson))
    println(determineDataType(myDouble))
  }

  /**
   * This function uses pattern matching to determine the data type
   * of the data parameter passed to it.
   */
  def determineDataType(data:Any):String =
  {
    data match
    {
      // NOTE: The text used immediately before the colon char (:) below is
      //       arbitrary.  In this example we use dataType, temp, and xyz.
      //       Or just the underscore char (_) can be used, which is also
      //       demonstrated below.
      //       The value to the right of the => operator is what gets returned,
      //       which in this function is a String type.
      case dataType:Array[String] => "The data type = Array[String]"
      case temp:List[Float]       => "The data type = List[Float]"
      case xyz:Char               => "The data type = Char"
      case _:String               => "The data type = String"
      case _:Int                  => "The data type = Int"
      case _:Person               => "The data type = Person"
      case _                      => "The data type is undetermined."
    }
  }
}

====================================================================================
The following sample code shows how to use a case class for pattern matching,
which you can think of as "data type" matching.  As pattern matching is used
to determine data type.

object Demo
{
  // By default, a case class's parameters are val types (when you don't specify
  // a val/var type), so they CAN'T be changed.  The following CaseClassDemo
  // class has its params declared as var types, so they CAN be changed--even
  // if the instance of CaseClassDemo is declared a val.
  case class CaseClassDemo(var str:String, var integer:Int, var float:Float)

  // NOTE: The Email, SMS, VoiceRecording, MessageInABottle, SmokeSignal case class
  //       declarations below all extend the Notification class, which is an abstract
  //       class.  Therefore, these 5 case classes can be treated as a Notification class.
  //       Since all 5 of these case classes are of the Notification class type, all
  //       5 of these case classes can be used within a "match" statement for pattern
  //       matching (as shown below).  The "match" statement below is used to determine
  //       which Notification subclass (Email, SMS, VoiceRecording, MessageInABottle,
  //       SmokeSignal) has been passed to the showNotification() function.
  abstract class Notification // Notification can be defined here as:  "abstract class", "class", "abstract trait" or "trait"
  case class Email(sender:String, title:String, body:String) extends Notification
  case class SMS(caller:String, message:String)              extends Notification
  case class VoiceRecording(contactName:String, link:String) extends Notification
  case class MessageInABottle(message:String)                extends Notification
  case class SmokeSignal(smokeCode:String)                   extends Notification

  def main(args: Array[String])
  {
    // NOTE: When declaring a case class, using the "new" keyword is optional,
    //       so generally "new" is NOT used, as in the following line of code...
    val myClass1 = CaseClassDemo("Tom", 321, 56.789F)
    println("myClass1.str = "        + myClass1.str +
            ",  myClass1.integer = " + myClass1.integer +
            ",  myClass1.float = "   + myClass1.float)

    // NOTE: Even though myClass1 is a val type, notice that we can alter its member
    //       values here cuz the parameters of CaseClassDemo are declared as var.
    myClass1.str     = "Jim"
    myClass1.integer = 666
    myClass1.float   = 345.67F
    println("myClass1.str = "        + myClass1.str +
            ",  myClass1.integer = " + myClass1.integer +
            ",  myClass1.float = "   + myClass1.float)

    // We now show how case classes are used for pattern matching.  The following
    // 4 classes were all defined (above) as subclasses of the Notification class.
    // Therefore, all 4 of these classes can be considered a Notification class,
    // and therefore can be used to match on the Notification class in the
    // showNotification function below.
    val someEmail:Email = Email("Sender Bender", "Titletown, USA", "Hi.  See you later.")
    val someSms:SMS = SMS("12345", "Are you there?")
    val someVoiceRecording:VoiceRecording = VoiceRecording("Tom", "www.420.com")
    val someMessageInABottle:MessageInABottle = MessageInABottle("SOS")
    val someSmokeSignal:SmokeSignal = SmokeSignal("Send more beer.")

    println()
    println(showNotification(someEmail))
    println(showNotification(someSms))
    println(showNotification(someVoiceRecording))
    println(showNotification(someMessageInABottle))
    println(showNotification(someSmokeSignal))
  }

  def showNotification(notification:Notification):String =
  {
    notification match
    {
      // NOTE: The names used inside the parenthesis below are arbitrary--you can use any name you want.
      case Email(email, title, _)     => s"You have an email from $email with title: $title"
      case SMS(number, message)       => s"You have an SMS from $number! Message: $message"
      case VoiceRecording(name, link) => s"You received a Voice Recording from $name!  To hear it, click: $link"
      case MessageInABottle(message)  => s"You received this message in a bottle: $message"
      case _                          => s"This is some other type of Notification message!"
    }
  }
}

====================================================================================
object Demo
{
  case class Point3D(x:Double, y:Double, z:Double)
  case class Student(name:String, assignments:List[Double], tests:List[Double], quizzes:List[Double])

  def main(args: Array[String]) =
  {
    // NOTE: The "new" keyword is optional when declaring a case class, so it's NOT used here...
    val point1  = Point3D(1.1, 2.2, 3.3)
    val point2  = Point3D(4.4, 5.5, 6.6)
    println("The distance between point1 and point2 = " + distance(point1, point2))

    val student = Student("Tom", Nil, List(81.5, 77.7, 92.3, 90.5), List(89.9, 78.5, 65.5, 99.9))
    println(studentAverage(student))
  }

  /**
   * This function returns the distance between the two 3D points passed as params.
   *
   * @param point1
   * @param point2
   */
  def distance(point1:Point3D, point2:Point3D):Double =
  {
    val dx = point1.x - point2.x
    val dy = point1.y - point2.y
    val dz = point1.z - point2.z
    math.sqrt(dx*dx + dy*dy + dz*dz)
  }

  /**
   * Calculate the weighted average of a single student's assignments + tests +  quizzes.
   */
  def studentAverage(student:Student):String =
  {
    val assignmentAvg = if (student.assignments.isEmpty) 0.0
    else student.assignments.sum /  student.assignments.length
    val quizAvg = if (student.quizzes.isEmpty) 0.0
                  else if (student.quizzes.length == 1) student.quizzes.min // There's only 1 quiz score.
                  else (student.quizzes.sum - student.quizzes.min) / (student.quizzes.length - 1) // Discard lowest quiz score
    val testAvg = if (student.tests.isEmpty) 0.0
    else (student.tests.sum / student.tests.length)

    // The following println() is used for debugging only...
    println("assignmentAvg = " + assignmentAvg + ",  quizAvg = " + quizAvg + ",  testAvg = " + testAvg)

    // Now, return the weighted average of the student's assignments + tests + quizzes...
    (student.name +"'s weighted average = " + (0.5 * assignmentAvg + 0.3 * testAvg + 0.2 * quizAvg))
  }
}

=====================================================================
=====================================================================
The following code demonstrates the use of case class's copy() method.

object Demo
{
  case class Point3D(x:Double, y:Double, z:Double)
  case class Student(name:String, assignments:List[Double], tests:List[Double], quizzes:List[Double])

  def main(args: Array[String]) =
  {
    // NOTE: The "new" keyword is optional when declaring a case class, so it's NOT used here...
    var point:Point3D   = Point3D(1.1, 2.2, 3.3)
    var student:Student = Student("Tom", Nil, List(81.5, 77.7, 92.3, 90.5), List(89.9, 78.5, 65.5, 99.9))

    // The following code shows how to create a copy of an existing case class instance,
    // where the copied case class has its values modified by using NAMED ARGUMENTS
    // as parameters to the copy() method.  NOTE: The "copy" terminology is a bit
    // misleading in this example because the values of the copied case class are
    // different than the copied-from case class!
    println("point = " + point)  // Prints: point = Point3D(1.1,2.2,3.3)
    point = point.copy(x=4.4, y=5.5, z=6.6)
    println("point = " + point)  // Prints: point = Point3D(4.4,5.5,6.6)

    // Notice that in this example, we pass only the "tests" param. to the copy() method,
    // which means ONLY the "tests" param of the copied Student class is changed.
    println(student) // Prints: Student(Tom,List(),List(81.5, 77.7, 92.3, 90.5),List(89.9, 78.5, 65.5, 99.9))
    student = student.copy(tests=44.4::student.tests)
    println(student) // Prints: Student(Tom,List(),List(44.4, 81.5, 77.7, 92.3, 90.5),List(89.9, 78.5, 65.5, 99.9))

    // Finally, create a List consisting of three Point3D classes.  Then, loop through each Point3D
    // element in the List, and print the sum of the Point3D's x + y + z values...
    var points:List[Point3D] = List(Point3D(9.9, 8.8, 7.7), Point3D(6.6, 5.5, 4.4), Point3D(3.3, 2.2, 1.1))
    for(point <- points)
    {
      println("Sum of Point3D(" + point.x + ", " + point.y + ", " + point.z + ") = "  + (point.x + point.y + point.z))
    }

    // NOTE: In the following for() loop, you can define the generator using Point3D(a, b, c)
    //       (as shown below) to obtain each element contained in the points collection.
    for(Point3D(a, b, c) <- points)
    {
      println("Point3D(a, b, c) = " + a, b, c)
    }

    // If you're interested in obtaining only the a and c values of point, you
    // can use the _ wildcard char to "catch and discard" the b value of point...
    for(Point3D(a, _, c) <- points)
    {
      println("Point3D(a, b, c) = (" + a + ", _, " + c + ")")
    }
  }
}
======================================================================================
The following code demonstrates the case class's copy() method on classes that
contain other classes.

object Demo
{
  case class Name(firstName:String, middleName:String, lastName:String)
  case class CreditCard(name:Name, number:String, month:Int, year:Int, cvv:String)
  case class User(id:Int, name:Name, billingInfo:BillingInfo, phone:String, email:String)
  case class BillingInfo(creditCards:Seq[CreditCard])

  def main(args: Array[String]) =
  {
    val jacksName:Name          = Name("Jack", "Drunk", "Daniels")
    val creditCards:CreditCard  = CreditCard(jacksName, "3333-5555-7777-9999", 6, 2024, "987")
    val billingInfo:BillingInfo = BillingInfo(Seq(creditCards))
    var jack_1:User             = User(1, jacksName, billingInfo, "608-456-7890", "jack@daniels.com")
    println(jack_1)

    // Change/Update the User.phone field of jack_1...
    jack_1 = jack_1.copy(phone="608-987-3456")
    println(jack_1)

    // Change/Update the Name.middleName field of jack_1...
    var newName:Name = jack_1.name.copy(middleName = "Boozer")
    jack_1 = jack_1.copy(name = newName)
    println(jack_1)

    // Change/Update the CreditCard.number field of jack_1...
    // NOTE: The BillingInfo class can contain MULTIPLE credit cards.  Therefore, the following
    //       line of code must contain the Seq index referencing the desired credit card.
    var newCreditCard:CreditCard = jack_1.billingInfo.creditCards(0).copy(number = "8888-4444-9999-3333")
    jack_1 = jack_1.copy(billingInfo = BillingInfo(Seq(newCreditCard)))
    println(jack_1)
  }
}
