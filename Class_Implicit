In this discussion we ignore 'implicit' arguments, which get
passed to a function.  For details about 'implicit' arguments,
see the section titled: Implicit_Parameters

'implicit' is a Scala keyword.  The 'implicit' keyword can be used when
defining a class, an object, or a function.  Some examples are:

1) implicit class  someClass(str: String) { ... }
2) implicit object someObject(str: String) { ... }
3) implicit def    someFunction(str: String) { ... }

When the 'implicit' keyword is used in a function definition, the function
MUST return a class, an object, or a trait, which then makes the returned
object, class or trait implicit.  The 'implicit' keyword can also be used
on a val/var declaration, but only when the val/var is assigned a class,
an object, or a trait.

The following code sample shows how to use an implicit class.  You can
add new functions to an existing Scala class by using an implicit class.
In this example we add the decrement() and increment() functions to the
String class, which already exists in Scala.

In the following example, we create a var named 'state' of type String.
Then, when you type the text 'state.' into your IDE, and then press
"Ctrl + space bar", the increment() and decrement() functions that you
have written (inside the implicit class MyEnhancedString) will appear
in the IDE's dropdown menu, so you can select them.  This demonstrates
that the decrement() and increment() functions you defined are now
avaliable for the String data type.

For this to work, your implicit class must have a single parameter
(that matches the type of an existing Scala type), and your new
function name(s) must be different than function names that already
exist for that type.

NOTE: The two (2) sample programs below have identical behavior.
      The first sample shows the 'implicit' keyword being used
      ONLY on a class definition.  The second sample shows the
      'implicit' keyword being used ONLY on a function definition.

====================================================================
This sample program has identical behavior to the sample program further
below, except we use the 'implicit' keyword in the class definition,
instead of in the function definition.

object Demo
{
  // NOTE: This implicit class can be given any name, as long as
  //       it doesn't conflict with an existing Scala class...
  implicit class MyEnhancedString(str: String)
  {
    // increment or decrement every Char in the String by one.
    def decrement:String = { str.map(ch => (ch - 1).toChar) }
    def increment:String = { str.map(ch => (ch + 1).toChar) }
  }

  def main(args: Array[String]): Unit =
  {
    var state:String = "Wisconsin"

    state = state.increment
    println(state) // PRINTS: Xjtdpotjo
    state = state.decrement
    println(state) // PRINTS: Wisconsin
    state = state.decrement
    println(state) // PRINTS: Vhrbnmrhm
  }
}

====================================================================
IMPORTANT: This sample program has identical behavior to the sample
           program above, except the 'implicit' keyword is by the
           function definition, instead of by the class definition.

Since the implicit function defined below returns a MyEnhancedString class,
an implicit class is actually what's being defined.  In other words,
this example shows an alternative (but convoluted) way of defining an
implicit class by returning an implicit class via a function call.

object Demo
{
  // NOTE: Unlike the sample program above, this class is defined
  //       without using the 'implicit' keyword.
  class MyEnhancedString(str: String)
  {
    // increment or decrement every Char in the String by one.
    def decrement:String = { str.map(ch => (ch - 1).toChar) }
    def increment:String = { str.map(ch => (ch + 1).toChar) }
  }

  // NOTE: This function returns the MyEnhancedString class, and its
  //       definition MUST include the "implicit" keyword.  This
  //       function can be given ANY NAME, except for function names
  //       that already exist on the String class (i.e., compare, split,
  //       toInt, etc.).  If this implicit function isn't defined,
  //       this program won't compile, even though this program never
  //       explicitly calls the dumbFuncName() function.  This
  //       function gets called implicitly.
  implicit def dumbFuncName(str: String):MyEnhancedString =
  {
    new MyEnhancedString(str)
  }

  def main(args: Array[String]): Unit =
  {
    var state:String = "Wisconsin"

    state = state.increment
    println(state) // PRINTS: Xjtdpotjo
    state = state.decrement
    println(state) // PRINTS: Wisconsin
    state = state.decrement
    println(state) // PRINTS: Vhrbnmrhm
  }
}

===============================================================
The following code sample is similar to the examples above.
Read in-line comments for explanations.

object Demo
{
  sealed trait Animal
  final case class Bird(name:String) extends Animal
  final case class Cat(name:String)  extends Animal
  final case class Dog(name:String)  extends Animal

  // The [A] represents any type of defined Animal.
  // In this program it would be Bird, Cat, or Dog.
  trait BehavesLikeHuman[A]
  {
    // This method is undefined here.  It must be defined
    // in the code that declares a BehavesLikeHuman type.
    def speak(animalType:A):Unit
  }

  /****************************
   * main()
   ***************************/
  def main(args: Array[String]): Unit =
  {
    // Here we define the BehavesLikeHuman.speak() method for a Dog type.
    // NOTE: This code works with or without the 'implicit' keyword preceding the 'val' keyword.
    implicit val dogBehavesLikeHuman:BehavesLikeHuman[Dog] =  new BehavesLikeHuman[Dog]
    {
      def speak(dog:Dog):Unit =
      {
        println(s"I am a dog, and my name is ${dog.name}.")
      }
    }

    // Here we define the BehavesLikeHuman.speak() method for a Cat type.
    // NOTE: This code works with or without the 'implicit' keyword preceding the 'val' keyword.
    implicit val catBehavesLikeHuman:BehavesLikeHuman[Cat] = new BehavesLikeHuman[Cat]
    {
      def speak(cat:Cat):Unit =
      {
        println(s"I am a cat, and my name is ${cat.name}.")
      }
    }

    val myDog:Dog = Dog("Bow-Wow")
    dogBehavesLikeHuman.speak(myDog) // PRINTS: I am a dog, and my name is Bow-Wow.

    val myCat:Cat = Cat("Meow-Meow")
    catBehavesLikeHuman.speak(myCat) // PRINTS: I am a cat, and my name is Meow-Meow.
  }
}
