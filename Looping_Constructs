LOOPING CONSTRUCTS
To understand more about how for() loops and yield work, SEE:
https://alvinalexander.com/scala/scala-for-loops-foreach-how-to-translated-by-compiler
=====================================================
do
{
   Some code here.
} while(condition);

// -------------------------------------------------------
To iterate through a data type that inherits from sequence
(such as List, Array, ArrayBuffer, Vector, Seq, etc.),
use the foreach() method...

val x = List(1,2,3)
x.foreach { println }


val names = Vector("Bob", "Fred", "Joe", "Julia", "Kim")
// The following 3 lines print the same result...
for (name <- names) println(name)
names.foreach(println)
names.foreach {println}
// The following for() loop prints only names beginning with 'J'...
for (name <- names if name.startsWith("J")) { println(name) }


var sum = 0
val x = List(7,8,9)
x.foreach(sum += _)
println(sum) // Prints the sum of 7 + 8 + 9 = 24

// -------------------------------------------------------
// for() loop examples...
object Demo
{
  def main(args: Array[String])
  {
    type Point = (Double, Double)

    var points:Array[Point] = Array((-0.3, 0.6), (1.2, 2.3), (3.4, 5.6))
    var result = for ((x, y) <- points; if magnitude(x, y) < 1.0) yield magnitude(x, y)
    result.foreach(println) // Prints: 0.6708203932499369

    result = for ((x, y) <- points; if magnitude(x, y) > 1.0) yield magnitude(x, y)
    result.foreach(println) // Prints: 2.5942243542145693, 6.55133574166368
  }

  def magnitude(x:Double, y:Double):Double = math.sqrt(x*x+y*y)
}


val evenNumbers:Range = new Range(0, 10, 2)
val oddNumbers:Range  = new Range(1, 9, 2)

// NOTE: The 'number' variable used below is NOT declared before it's used....
for (number <- 0 to 100 by 5)
{
  println( "number = " + number);
}
for (number <- evenNumbers)
{
  println( "number = " + number);
}
for (number <- oddNumbers)
{
  println( "number = " + number);
}

var intSeq:IndexedSeq[Int] = for (jdx <- 0 to 9) yield jdx*jdx
intSeq.foreach(println) // Prints:  0, 1, 2, 4, 9, 16, 25, 36, 49, 64, 81

val tomsList:List[Int] = List(95, 96, 97, 98, 99, 100)
for (number <- tomsList.reverse)
{
  println( "number = " + number);
}

// if() statements embedded within a for() loop as shown
// below are known as "guards".  When the if() statement
// is true, the for() loop is exited.  The following TWO
// for() loops have identical behavior...
for
{
  i <- 0 to 10
  if (i % 2 == 0  &&  i > 5)
}
println(i)

for
{
  i <- 0 to 10
  if i % 2 == 0
  if i > 5
}
println(i)


// -------------------------------------------------------
// How to break out of a loop...
val numList = List(1,2,3,4,5,6,7,8,9,10);
val loop    = new Breaks;
loop.breakable
{
  // NOTE: The 'number' variable used below is NOT declared before it's used....
  for (number <- numList)
  {
    println("number = " + number );// -------------------------------------------------------

    if (number == 4)
    {
      println("Here, we 'break' out of the for() loop, when number = " + number);
      loop.break;
    }
  }
}
// ========================================================
HOW TO LOOP THROUGH A MAP
object Demo
{
  def main(args: Array[String])
  {
    val names:Map[String, String] = Map("fname" -> "Robert", "lname" -> "Goren")
    for ((k,v) <- names)
    {
      println(s"key = $k, value = $v")
    }
  }
}
// ========================================================
// ========================================================
// ========================================================
// ========================================================
