LOOPING CONSTRUCTS
=====================================================
do
{
   statement(s);
} 
while(condition);

// -------------------------------------------------------
To iterate through a data type that inherits from sequence
(such as List, Array, ArrayBuffer, Vector, Seq, etc.),
use the foreach() method...

val x = List(1,2,3)
x.foreach { println }


val names = Vector("Bob", "Fred", "Joe", "Julia", "Kim")
// The following 3 lines print the same result...
for (name <- names) println(name)
names.foreach(println)
names.foreach {println}
// The following for() loop prints only names beginning with 'J'...
for (name <- names if name.startsWith("J")) { println(name) }


var sum = 0
val x = List(7,8,9)
x.foreach(sum += _)
println(sum) // Prints the sum of 7 + 8 + 9 = 24

// -------------------------------------------------------
// for() loop examples...

val evenNumbers:Range  = new Range(0, 10, 2)
val oddNumbers:Range   = new Range(1, 9, 2)

// NOTE: The 'number' variable used below is NOT declared before it's used....
for (number <- evenNumbers)
{
  println( "number = " + number);
}
for (number <- oddNumbers)
{
  println( "number = " + number);
}

val tomsList:List[Int] = List(95, 96, 97, 98, 99, 100)
// ABOVE LINE IS EQUIVALAENT TO: val tomsList = List(95, 96, 97, 98, 99, 100)
for (number <- tomsList.reverse)
{
  println( "number = " + number);
}

// if() statements embedded within a for() loop as shown
// below are known as "guards".  When the if() statement
// is true, the for() loop is exited.  The following TWO
// for() loops have identical behavior...
for
{
  i <- 0 to 10
  if (i % 2 == 0  &&  i > 5)
}
println(i)

for
{
  i <- 0 to 10
  if i % 2 == 0
  if i > 5
}
println(i)


// -------------------------------------------------------
// How to break out of a loop...
val numList = List(1,2,3,4,5,6,7,8,9,10);
val loop    = new Breaks;
loop.breakable
{
  // NOTE: The 'number' variable used below is NOT declared before it's used....
  for (number <- numList)
  {
    println("number = " + number );// -------------------------------------------------------

    if (number == 4)
    {
      println("Here, we 'break' out of the for() loop, when number = " + number);
      loop.break;
    }
  }
}

// ----------------------------------------------------------
// ----------------------------------------------------------
// for() loop examples that return a "yield" value...
// In Scala, yield is part of for() loop comprehensions.
// For each iteration of your for loop, yield generates a value
// which will be remembered.  It's like the for loop has a buffer
// you canâ€™t see, and for each iteration of your for loop another
// item is added to that buffer.  When your for loop finishes
// running, it will return this collection of all the yielded
// values.  The type of the collection that is returned is the
// same type that you were iterating over, so a Map yields a
// Map, a List yields a List, and so on.
//
// Also, note that the initial collection is not changed; the
// for/yield construct creates a new collection according to
// the algorithm you specify.
// ***************************************************************

object Demo
{
  def main(args: Array[String])
  {
    // NOTE: To determine the data type of the following numList val,
    //       using the IntelliJ IDE, place the cursor on numList,
    //       then press the "Alt" and the "=" keys simultaneously.
    //       It will show the data type as: List[Int]
    val numList = List(1,2,3,4,5,6,7,8,9,10);

    val className:String = numList.getClass.getName
    println(s"className = $className")
    println("className = " + numList.getClass)

    // Set retVal so it contains all numbers in numList EXCEPT 3, 8, 9, and 10
    var retVal = for { number <- numList if number != 3; if number < 8 } yield number

    // Print all numbers in retVal...
    for (number <- retVal)
    {
      println( "Value of number = " + number);
    }
  }
}
// ***************************************************************

// array_2 will contain the array_1 values X 10
val array_1 = Array(1, 2, 3, 4, 5)
array_1.foreach(println)
val array_2 = for (x <- array_1) yield x * 10
array_2.foreach(println)
