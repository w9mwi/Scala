
Currying - If you have a function that takes multiple arguments,
           you can translate that function into series of function
           calls that each take a single argument.  The following
           code shows an example of how to call the 3-parameter-list
           curried function named:  addXYZ_Curried(x)(y)(z)
           This curried function returns the result of x + y + z

============================================================================

object Demo
{
  def funcX(x:Int):Int = { x+10 }
  def funcY(y:Int):Int = { y-3 }
  def funcZ(z:Int):Int = { z*4 }
  def addXYZ_Curried(x:Int)(y:Int)(z:Int):Int = { x+y+z }

  def main(args: Array[String])
  {
    // This section demonstrates the standard way of calling functions.
    // This is NOT an example of currying!
    // NOTE:  funcZ(funcY(funcX(7))) = (((7 + 10) - 3) * 4) = 56
    var result:Int = funcZ(funcY(funcX(7)))
    println("funcZ(funcY(funcX(7))) = " + result) // PRINTS: funcZ(funcY(funcX(7))) = 56

    // ======================================================
    // This section demonstrates how to call the addXYZ_Curried()()()
    // function in one line of code, to add 3 Int values...
    result = addXYZ_Curried(1)(2)(3) // Adds 1 + 2 + 3
    println("result = " + result) // PRINTS: result = 6

    // ======================================================
    // This section demonstrates how to call addXYZ_Curried()()()
    // in 3 separate lines of code to obtain result of adding
    // 3 Ints (1 + 2 + 3).
    // NOTE: The underscore char (_) is used below to designate that we're
    //       calling addXYZ_Curried()()() with only ONE (1) parameter list.
    //       The 2nd and 3rd parameter lists are ignored.
    var func1:(Int => (Int => Int)) = addXYZ_Curried(1)_ // Returns a function.
    var func2:(Int => Int) = func1(2) // Returns a function.
    result = func2(3) // Returns an Int value.
    println("result = " + result) // PRINTS: result = 6

    // Instead of calling addXYZ_Curried()()() in 3 separate lines of code,
    // as in the above example, this section calls that curried function
    // in only 2 lines of code.  Just to demonstrate that it can be called
    // in different ways.  Again, the underscore char (_) is used below
    // to designate that we're ignoring the 3rd parameter.
    func2 = addXYZ_Curried(1)(2)_ // Returns a function.
    result = func2(3) // Returns an Int value.
    println("result = " + result) // PRINTS: result = 6
  }
}

============================================================================




























Assume we have these 3 functions:
           f(x) = x + 10
           f(y) = y - 3
           f(z) = z * 4
           
           From the above 3 functions, we can create this expression:
           f(x)(y)(z)
           
           CORRECT -- The above expresion reads like this:
           1) Call function f(x), passing it a numeric value.
           2) Call function f(y), passing it the numeric value returned by f(x).
           3) Call function f(z), passing it the numeric value returned by f(y).
           4) f(z) returns the resultant numeric value.
           
           WRONG -- The above expresion reads like this:
           1) Call function f(x), passing it a numeric value.
           2) Call function f(y), passing it the numeric value returned by f(x).
           3) Call function f(z), passing it the numeric value returned by f(y).
           4) f(z) returns the resultant numeric value.

           In Scala code the above f(x)(y)(z) expression can be written like this:

           func(x)       = x + 10
           func(x)(y)    = func((x + 10) - 3)
           func(x)(y)(z) = func(((x + 10) - 3)) * 4)

           result = func(x)(y)(z)

object Demo
{
  def funcX(x:Double):Double = { x + 10.0D }
  def funcY(y:Double):Double = { y - 3.0D }
  def funcZ(z:Double):Double = { z * 4.0D }

  def main(args: Array[String])
  {
      val result:Double = funcZ(funcY(funcX(7.0D)))
      println("result = " + result) // PRINTS: result = 56.0
  }
}




