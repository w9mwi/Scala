
Read the following link, and use info. from the link
to add infor to this page.
--> https://conorfennell.github.io/scala-zen/articles/functional-jargon.html#higher-order-functions-hof-


A Scala method/function can be written to accept MULTIPLE ARGUMENT LISTS.
Both of the following methods (add_1 and add_2) add two Int values and return
the Int result.

The add_1 method below accepts A SINGLE ARGUMENT LIST containing two Int arguments.
The add_2 method below accepts TWO ARGUMENT LISTS, each containing a single Int argument.

object Demo
{
  def main(args:Array[String]): Unit =
  {
    def add_1(x:Int, y:Int):Int = x + y  // 1 argument list.
    def add_2(x:Int)(y:Int):Int = x + y  // 2 argument lists.
    println(s"add(1, 2) = ${add_1(1, 2)}") // PRINTS: add(1, 2) = 3
    println(s"add(1)(2) = ${add_2(1)(2)}") // PRINTS: add(1)(2) = 3
  }
}

Both of the following definitions have the same meaning, they're only worded differently.

CURRYING DEFINITION 1
=====================
Currying is the process of converting a function having multiple argument lists
into a sequence of functions that accepts only one argument list.  Each function,
when invoked, returns another function that consumes the following argument list.
The sequence of function calls terminates when the last function in the sequence
returns a value, instead of a function.  Curried functions are demonstrated in the
code sample below.

CURRYING DEFINITION 2
=====================
Currying transforms a function into a chain of functions.  Where each function
in the chain gets passed a single argument list, and returns a function that
accepts a single argument list.  When a curried function is finally called with
its last (of multiple) argument lists, the curried function becomes fully applied,
and returns NOT a function, but a final value.


Whenever a Scala curried function is called, the function is either
partially applied, or fully applied.  Here are the definitions.

PARTIALLY-APPLIED FUNCTION - Calling a curried function with fewer than all its argument
                             lists means the function is partially applied, which means
                             it returns a function that accepts a single argument list.

FULLY-APPLIED FUNCTION - When a curried function is called with the last of its
                         multiple argument lists, it returns a final value, not a
                         function.  This makes the curried function fully applied.

ARGUMENT LISTS AND CURRIED FUNCTIONS
====================================

A Scala method/function can be defined to accept multiple argument lists.
So both methods and functions can be curried.  In this section the term
"method" and "function" are used interchangeably as they often are.

All Scala functions that contain multiple argument lists are curried functions,
with the exception of implicit arguments.  When a function includes an implicit
argument list, that implicit argument list doesn't make it a curried function.

Although curried methods/functions are almost always written with multiple argument
lists, it's possible to write a curried method/function containing only a single
argument list.  An example of this is shown further below.  To find that example
search for this text:  subtractXYCurried_2

Argument lists of a curried function are not limited to accepting a single argument.
Any argument list can contain one or multiple arguments.

==================================================================================
object Demo
{
  def main(args:Array[String]): Unit =
  {
    // This add method is a curried function because it accepts 2 argument lists.
    def add(x:Int)(y:Int):Int = x + y

    // When you invoke add by supplying both of its argument lists at once,
    // the function becomes "fully applied" and returns the final result.
    var result:Int = add(77)(13)
    println(s"add(77)(13) = $result") // PRINTS: add(77)(13) = 90

    // A curried function becomes "partially applied" by invoking it with fewer than
    // all of its argument lists.  When a curried function becomes "partially applied",
    // it returns a function.
    //
    // The syntax used in each of the following 3 lines is slightly different, but
    // they're equivalent and return the same result.  Invoking the add method
    // below with only one argument list makes the add function "partially applied."
    // So it returns a function that gets assigned to the var func.
    var func:(Int => Int) = add(77)
    func = add(77)_
    func = add(77)(_)

    // To make the add method "fully applied", the function returned
    // above must be invoked with its final argument list, like this:
    result = func(13)
    println(s"func(13) = $result")  // PRINTS: func(13) = 90

    // The curriedSum_0 and curriedSum_1 functions below are identical.
    // curriedSum_1 is written using parenthesis making it easier to read.
    val curriedSum_0: Int =>  Int => Int   =   x =>  y => x + y
    val curriedSum_1:(Int => (Int => Int)) = { x => (y => x + y) }

    result = curriedSum_0(77)(13)
    println(s"curriedSum_0(77)(13) = $result") // PRINTS: curriedSum_0(77)(13) = 90

    result = curriedSum_1(77)(13)
    println(s"curriedSum_1(77)(13) = $result")   // PRINTS: curriedSum_1(77)(13) = 90
  }
}
==================================================================================

A curried function is usually written so it has multiple argument lists.  But
it's possible to write a curried function that has a single argument list, as
shown in the following code.  Remember, a curried function returns a function
that accepts a single argument list.

object Demo
{
  def main(args:Array[String]): Unit =
  {
    // Both of the following 2 functions are equivalent curried functions.
    // subtractXYCurried_1 is defined with two argument lists.
    // subtractXYCurried_2 is defined with a single argument list, but
    // it's a curried function because it also returns a function that
    // accepts a single argument list.
    def subtractXYCurried_1(x:Int)(y:Int):Int   = { x - y }
    def subtractXYCurried_2(x:Int):(Int => Int) = { (y:Int) => x - y }

    println("SECTION 1) =============================================")
    var result:Int = subtractXYCurried_1(1)(2) // Invoke as a fully-applied function.
    println(s"subtractXYCurried_1(1)(2) = ${subtractXYCurried_1(1)(2)}") // PRINTS: subtractXYCurried_1(1)(2) = -1
    var func:(Int=>Int) = subtractXYCurried_1(1) // Invoke as a partially-applied function.
    result = func(2) // Calling func(2) makes it fully applied.
    println(s"func(2) = $result") // PRINTS: func(2) = -1

    result = subtractXYCurried_2(1)(2) // Invoke as a fully-applied function.
    println(s"subtractXYCurried_2(1)(2) = ${subtractXYCurried_2(1)(2)}") // PRINTS: subtractXYCurried_2(1)(2) = -1
    func = subtractXYCurried_2(1) // Invoke as a partially-applied function.
    result = func(2) // Calling func(2) makes it fully applied.
    println(s"func(2) = $result") // PRINTS: func(2) = -1

    println("SECTION 2) =============================================")
    func = subtractXYCurried_2(_)(2) // Invoke as a partially-applied function.
    result = func(1) // Calling func(1) makes it fully applied.
    println(s"func(1) = $result") // PRINTS: func(1) = -1

    println("SECTION 3) =============================================")
    func = subtractXYCurried_2(2)(_) // Invoke as a partially-applied function.
    result = func(1) // Calling func(1) makes it fully applied.
    println(s"func(1) = $result") // PRINTS: func(1) = 1
  }
}
==================================================================================


Sometimes multiple parameter lists are used in while() loops or
for() loops.  Under those circumstances the first parameter list
evaluates to a true/false expression, and the second parameter
list contains a "block of code" that gets executed for each
iteration of the loop.  SEE SECTION TITLED:
WHEN MULTIPLE PARAMETER LISTS ARE USED FOR LOOPING

========================================================================================

========================================================================================
FUNCTIONS WITH IMPLICIT PARAMETER LISTS ARE NOT CURRIED FUNCTIONS
=================================================================

When a function definition contains multiple parameter lists, that function
is generally a curried function, but not always!  Here is an exception...

When a function definition contains multiple parameter lists, and one
of those parameter lists contains an implicit argument, that function
is NOT a curried function.

Read the section titled "Implicit_Parameters" for more info on this.
SEE --> https://github.com/w9mwi/Scala/blob/master/Implicit_Parameters

========================================================================================
WHEN MULTIPLE PARAMETER LISTS ARE USED FOR LOOPING
==================================================

The myWhileLoop()() method in the sample code shown below has this definition:

def myWhileLoop(testCondition: => Boolean)(codeBlock: => Unit):Unit = { ... }

Its 1st parameter list is:  (testCondition: => Boolean)
Its 2nd parameter list is:  (codeBlock: => Unit)

Obviously, the "=> Boolean" designates a function that returns a Boolean,
and "=> Unit" designates a function that returns Unit.  But the
following question arises...

QUESTION: Why is there no data type specified between the colon (:) and
          the rocket (=>) in these two parameter lists, as you may expect?

          (testCondition: => Boolean)
          (codeBlock: => Unit)

ANSWER:  Because both those parameter lists do NOT get passed a value (i.e.,
         Int, String, Boolean, List[Float], etc.).

         In the code sample below the first parameter list (testCondition) gets passed
         a Scala expression that evaluates to true/false.  A Scala expression like
         "idx > 0" is NOT a data type, even though it evaluates to the Boolean data type.
         "idx > 0" is actually executable code, and executable code isn't a data type.

         The second parameter list (codeBlock) also gets passed execuatable code; but
         instead of being a single line of code (like "idx > 0"), the second parameter
         list below gets passed multiple lines of code (a block of code), which is
         also NOT a data type.  Therefore, no data type is specified for the testCondition
         and codeBlock argument lists in the code sample below.

         The last line of code executed by the (codeBlock) argument ("idx -= 1")
         doesn't evaluate to any data type; therefore, the return data type of
         codeBlock is specified as Unit.  If the last line of the codeBlock argument
         did evalate to some data type like Int, than the return type of the codeBlock
         argument would be specified as Int instead of Unit.

object Demo
{
  def myWhileLoop(testCondition: => Boolean)(codeBlock: => Unit):Unit =
  {
    // The following line of code can be written using any of these 3 variations:
    // 1) while(testCondition)(codeBlock)
    // 2) while(testCondition){codeBlock}
    // 3) while(testCondition) codeBlock
    // The following line of code is executed recursively
    // 5 times until testCondition evaluates to false.
    while(testCondition)(codeBlock)
  }

  def main(args: Array[String])
  {
    var idx:Int = 5
    myWhileLoop(idx > 0)
    {
      // The code between these braces {} gets passed as the second argument
      // list to the myWhileLoop()() method defined below.
      print("idx = " + idx + ", ") // PRINTS: idx = 0, idx = 1, idx = 2, idx = 3, idx = 4,
      idx -= 1
    }
  }
}

========================================================================================
Here is another example of currying.  Read in-line comments below for details.

object Demo
{
  // NOTE: This wrap function is a curried function that takes
  //       3 parameter lists (all 3 are Strings), and returns a String.
  def wrap(prefix:String)(html:String)(suffix:String) =
  {
    prefix + html + suffix
  }

  // NOTE: This wrapWithDiv function RETURNS the above wrap function, where
  //       the wrap function's middle parameter list isn't specified, which
  //       is designated by the the (_) parameter list.  Therefore, this
  //       wrapWithDiv function is defined as a PARTIALLY APPLIED function
  //       call to the wrap function.
  def wrapWithDiv:(String => String) = wrap("<div>")(_)("</div>")

  def main(args: Array[String])
  {
    // NOTE: When main() calls wrapWithDiv by passing it a String, the wrap
    //       function gets called as a FULLY APPLIED function call because it's
    //       now supplied with its previously-unspecified parameter list (_).
    println(wrapWithDiv("My_Text")) // PRINTS: <div>My_Text</div>
    println(wrapWithDiv("XYZ"))     // PRINTS: <div>XYZ</div>
  }
}

========================================================================================
The following sample code includes this parametric function:

def funcOfGunc[A,B,C](func:(B=>C), gunc:(A=>B)):(A=>C) = { x=>func(gunc(x)) }

Although funcOfGunc() is defined with ONE parameter list, it must get called
by passing it two (2) parameter lists.  The first parameter list gets passed
the func and gunc functions as two arguments.  The second parameter gets passed
the numeric value of x.  Read in-line comments below to better understand how
this works.

object Demo
{
  def main(args:Array[String]): Unit =
  {
    val plus5Func:(Double=>Double)  = { x:Double => x+5.0D }
    val squareFunc:(Double=>Double) = { x:Double => x*x }

    var result:Double = funcOfGunc(plus5Func, squareFunc)(7.0D)
    println("1A) result = " + result) // PRINTS: 1A) result = 54.0 // = [5.0+(7.0*7.0)]
    var func:Double=>Double = funcOfGunc(plus5Func, squareFunc)
    result = func(7.0D)
    println("1B) result = " + result) // PRINTS: 1B) result = 54.0 // = [5.0+(7.0*7.0)]

    result = funcOfGunc(squareFunc, plus5Func)(7.0D)
    println("2A) result = " + result) // PRINTS: 2A) result = 144.0 // = [(5.0+7.0)*(5.0+7.0)]
    func = funcOfGunc(squareFunc, plus5Func)
    result = func(7.0D)
    println("2B) result = " + result) // PRINTS: 2B) result = 144.0 // = [(5.0+7.0)*(5.0+7.0)]
  }

  // Because the A, B, and C in this example all use the same data type (Int), the
  // funcOfGunc definition below could instead be written this way, containing ONLY
  // a single parametric data type of A.
  // def funcOfGunc[A](func:(A=>A), gunc:(A=>A)):(A=>A) = { x=>func(gunc(x)) }
  def funcOfGunc[A,B,C](func:(B=>C), gunc:(A=>B)):(A=>C) = { x=>func(gunc(x)) }
}

========================================================================================

The following code sample shows another example of transforming a regular
function into a curried function by first performing an eta expansion on
it by adding the underscore (_) character, and then calling Scala's .curried()
method.

object Demo
{
  def main(args: Array[String])
  {
    // The add_1() function is a regular/normal function.
    // The first time the add_1() is called here, it's
    // called in the usual way....
    println("add_1(7, 3) = " + add_1(7, 3)) // PRINTS: add_1(7, 3) = 10

    // Perform an "Eta Expansion" on add_1() by using the underscore (_) character...
    val addFunc:((Int, Int) => Int) = add_1 _

    val addFuncCurried:(Int => (Int => Int)) = addFunc.curried // Make the add_1() function a curried function.
    println("addFuncCurried(7)(3) = " + addFuncCurried(7)(3)) // PRINTS: addFuncCurried(7)(3) = 10

    // addFuncCurried called with one param returns a PARTIALLY APPLIED function...
    val partiallyAppliedCurried:(Int => Int) = addFuncCurried(7)
    // Call partiallyAppliedCurried to make addFuncCurried FULLY APPLIED...
    println("partiallyAppliedCurried(3) = " + partiallyAppliedCurried(3)) // PRINTS: partiallyAppliedCurried(3) = 10

    // *****************************************************************************************
    // The add_2()() function called below is a curried function,
    // and can be called in the following two (2) ways...
    //
    // 1) Call sum_2()() once by passing to it both Int params, so it
    //    returns an Int result...
    println("add_2(7)(3) = " + add_2(7)(3)) // PRINTS: add_2(7)(3) = 10

    // 2) Call sum_2()() twice...  sum_2()() is called the first time by
    //    initializing its x Int parameter, and it returns a function.
    //    (At this point, the sum_2()() function is PARTIALLY APPLIED)
    //    Then, sum_2()() is called the second time by initializing
    //    its y Int parameter so it will now return an Int value.
    //    (At this point, the sum_2()() function is FULLY APPLIED.)
    val func:(Int => Int) = add_2(7)(_) // The func function is PARTIALLY APPLIED here.
    println("func(3) = " + func(3)) // PRINTS: func(3) = 10  (func is now FULLY APPLIED.)
  }

  /**
   * This add_1() function is a normal function, NOT a curried function.
   */
  def add_1(x:Int, y:Int):Int = { x + y }

  /**
   * This add_2() function is a CURRIED FUNCTION because
   * it takes multiple arguments, and returns a function
   * that takes a single argument.
   */
  def add_2(x:Int) = { (y:Int) => x + y }
}

========================================================================================

The foldLeft and foldRight functions implemented by the Scala List class are recursive
AND curried functions.  Below is sample code showing the use of the List.foldLeft and
List.foldRight functions.

The first argument list of foldLeft and foldRight represents the STARTING VALUE used on
the first function call of these recursive functions.  The second argument list of
foldLeft and foldRight represents the the function that gets applied.

object Demo
{
  def main(args:Array[String]): Unit =
  {
    // NOTE: foldLeft and foldRight are both RECURSIVE, CURRIED FUNCTIONS.
    //       When foldLeft and foldRight are called below, they get called
    //       with TWO PARAMETER LISTS.

    // ******************************************************************************
    // In this section we show how to use the List.foldLeft and List.foldRight
    // functions on the following intList, implementing the subtraction operation.
    // Notice we demonstrate TWO (2) different ways of implementing the subtraction
    // operation for foldLeft and foldRight that return the same result.
    // The math operation that occurs for foldLeft is:  0−7−4−6−3−9−1 = -30
    val intList:List[Int] = List[Int](7, 4, 6, 3, 9, 1)
    var intResult:Int = intList.foldLeft(0)(_ - _)
    println("foldLeft A = " + intResult) // PRINTS: foldLeft A = -30
    intResult = intList.foldLeft(0)((x, y) => x-y)
    println("foldLeft B = " + intResult) // PRINTS: foldLeft B = -30

    // The math operation that occurs for foldRight is:  0−(1−(9−(3−(6−(4−7))))) = 14
    intResult = intList.foldRight(0)(_ - _)
    println("foldRight A = " + intResult) // PRINTS: foldRight A = 14
    intResult = intList.foldRight(0)((x, y) => x-y)
    println("foldRight B = " + intResult) // PRINTS: foldRight B = 14

    // ******************************************************************************
    // In this section we show how to count the number of characters in the following
    // wordList, using the List.foldLeft and List.foldRight functions.  Notice we
    // demonstrate TWO (2) different ways of obtaining this character count for
    // foldLeft and foldRight that return the same result.
    val wordList:List[String] = List[String]("How", "many", "characters", "are", "in", "this", "wordList?")
    intResult = wordList.foldLeft(0)((count:Int, word:String) => count + word.length)
    println("foldLeft #1 = " + intResult) // PRINTS: foldLeft #1 = 35
    intResult = wordList.foldLeft(0)(_ + _.length)
    println("foldLeft #2 = " + intResult) // PRINTS: foldLeft #2 = 35

    intResult = wordList.foldRight(0)((word:String, count:Int) => count + word.length)
    println("foldRight #1 = " + intResult) // PRINTS: foldRight #1 = 35
    intResult = wordList.foldRight(0)(_.length + _)
    println("foldRight #2 = " + intResult) // PRINTS: foldRight #2 = 35

    // ******************************************************************************
    // In this section we call the foldLeft and FoldRight functions on the
    // following strList.
    val strList:List[String] = List[String]("ABC", "DEF", "GHI", "JKL", "MNO")
    var strResult:String = strList.foldLeft("START")(myFunc)
    println(strResult) // PRINTS: START-ABC-DEF-GHI-JKL-MNO

    strResult = strList.foldRight("BEGIN")(myFunc)
    println(strResult) // PRINTS: ABC-DEF-GHI-JKL-MNO-BEGIN
  }


  /**
   * NOTE: Scala defines List.foldLeft as this:   def foldLeft[B](z: B)(op: (B, A) => B): B
   *       Scala defines List.foldRight as this:  def foldRight[B](z: B)(op: (A, B) => B): B
   *
   * Therefore, this myFunc function satisfies the 2nd parameter list of foldLeft and foldRight,
   * because myFunc gets passed 2 values as a single parameter list, and returns a value.
   */
  def myFunc(str1:String, str2:String):String =
  {
    str1.concat("-").concat(str2)
  }
}

========================================================================================

In the code sample immediately ABOVE, the Scala API functions List.foldRight
and List.foldLight are demonstrated.  In the sample code BELOW, we write our
own functions named myFoldRightFunc and myFoldLeftFunc (both curried, recursive
functions), which emulate Scala's List.foldRight and List.foldLeft functions.

object Demo
{
  def main(args:Array[String]): Unit =
  {
    val floatList:List[Float] = List[Float](7.7F, 4.9F, 6.6F, 3.5F, 9.2F, 1.4F)

    // ********************************************************************************
    // In this section we demonstrate calling the myFoldRightFunc and myFoldLeftFunc
    // functions (defined below) on floatList.
    // The math operation performed by myFoldRightFunc is:  0.0-(1.4−(9.2−(3.5−(6.6−(4.9−7.7))))) = 13.7
    var floatResult:Float = myFoldRightFunc(floatList, 0.0F)(_ - _)
    println("floatResult = " + floatResult) // PRINTS: floatResult = 13.7

    // The math operation performed by myFoldLeftFunc is:  0.0 − 7.7 − 4.9 − 6.6 − 3.5 − 9.2 − 1.4 = -33.3
    floatResult = myFoldLeftFunc(floatList, 0.0F)(_ - _)
    println("floatResult = " + floatResult) // PRINTS: floatResult = -33.3

    // ********************************************************************************
    // In this section we demonstrate calling the myFoldLeftFunc and myFoldRightFunc
    // functions (defined below) on strList.
    val strList:List[String] = List[String]("ABC", "DEF", "GHI", "JKL", "MNO")
    var strResult:String = myFoldLeftFunc(strList, "START")(concat2Strings)
    println(strResult) // PRINTS: START-ABC-DEF-GHI-JKL-MNO

    strResult = myFoldRightFunc(strList, "BEGIN")(concat2Strings)
    println(strResult) // PRINTS: ABC-DEF-GHI-JKL-MNO-BEGIN
  }

  /**
   * THIS IS A CURRIED, RECURSIVE FUNCTION.
   */
  def myFoldLeftFunc[A,B](list:List[A], base:B)(funcOperation:(B,A)=>B):B =
  {
    if (list.isEmpty)
    {
      base // Terminate recursion when list is empty.
    }
    else
    {
      // Concat the result returned by the recursive myFoldLeftFunc call with list.head.
      funcOperation(myFoldLeftFunc(list.tail, base)(funcOperation),   list.head)
    }
  }

  /**
   * THIS IS A CURRIED, RECURSIVE FUNCTION.
   */
  def myFoldRightFunc[A,B](list:List[A], base:B)(funcOperation:(A,B)=>B):B =
  {
    if (list.isEmpty)
    {
      base // Terminate recursion when list is empty.
    }
    else
    {
      // Concat list.head with the result returned by the recursive myFoldRightFunc call.
      funcOperation(list.head,   myFoldRightFunc(list.tail, base)(funcOperation))
    }
  }

  /**
   * NOTE: myFoldRightFunc is defined above as this:
   *       def myFoldRightFunc[A,B](list:List[A], base:B)(func:(A,B)=>B):B
   *
   *       myFoldLeftFunc is defined above as this:
   *       def myFoldLeftFunc[A,B](list:List[A], base:B)(func:(B,A)=>B):B
   *
   * Therefore, this concat2Strings function satisfies the 2nd parameter list of myFoldLeftFunc
   * and myFoldRightFunc because concat2Strings gets passed 2 values as a single parameter list,
   * and returns a value.
   */
  def concat2Strings(str1:String, str2:String):String =
  {
    str1.concat("-").concat(str2)
  }
}

========================================================================================
