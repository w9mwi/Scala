
Currying - If you have a function that takes multiple arguments,
           you can translate that function into series of function
           calls that each take a single argument.  Here is an
           example.  Assume we have these 3 functions:
           f(x) = x + 10
           f(y) = y - 3
           f(z) = z * 4
           
           From the above 3 functions, we can create this expression:
           f(x)(y)(z)
           
           CORRECT -- The above expresion reads like this:
           1) Call function f(x), passing it a numeric value.
           2) Call function f(y), passing it the numeric value returned by f(x).
           3) Call function f(z), passing it the numeric value returned by f(y).
           4) f(z) returns the resultant numeric value.
           
           WRONG -- The above expresion reads like this:
           1) Call function f(x), passing it a numeric value.
           2) Call function f(y), passing it the numeric value returned by f(x).
           3) Call function f(z), passing it the numeric value returned by f(y).
           4) f(z) returns the resultant numeric value.

           In Scala code the above f(x)(y)(z) expression can be written like this:

           func(x)       = x + 10
           func(x)(y)    = func((x + 10) - 3)
           func(x)(y)(z) = func(((x + 10) - 3)) * 4)

           result = func(x)(y)(z)

object Demo
{
  def funcX(x:Double):Double = { x + 10.0D }
  def funcY(y:Double):Double = { y - 3.0D }
  def funcZ(z:Double):Double = { z * 4.0D }

  def main(args: Array[String])
  {
      val result:Double = funcZ(funcY(funcX(7.0D)))
      println("result = " + result) // PRINTS: result = 56.0
  }
}




