

CURRYING
========
Currying transforms a function that has MULTIPLE PARAMETER LISTS
into a chain of functions, where each function in the chain takes
take a parameter.

Each set of parenthesis represents a PARAMETER LIST.  Multiple parameter
lists shouldn't be confused with multiple parameters.  (Multiple parameters
are contained within a SINGLE set of parenthesis.)

A Scala function that has MULTIPLE PARAMETER LISTS is a CURRIED FUNCTION,
and looks like this:  addXYZ_Curried(x)(y)(z)

A curried function has this behavior:

1) It gets passed a value and returns a function.
   AND
2) The returned function takes a parameter value and
   returns a value, or returns another function.

A curried function can go further than this.  If step 2) above
returns a function (instead of a value), that function would
take a parameter value, and return a value, or return another
function.  This could go on, and on, dependent on the number
of parameter lists the curried function can accept.


FULLY APPLIED FUNCTION
======================
A curried function can be called by passing values to ALL its
parameter lists, like this:

addXYZ_Curried(1)(2)(3)

When a curried function is called with all its parameter lists,
it's a FULLY APPLIED FUNCTION call.


PARTIALLY APPLIED FUNCTION
==========================
When a curried function is called without all its parameter lists
it's called as a PARTIALLY APPLIED FUNCTION.

When a curried function is called as a partially applied function,
a single underscore character (_) designates all parameter list(s)
that aren't specified.  For example, the following 2 lines are
partially applied function calls:

addXYZ_Curried(1)_
addXYZ_Curried(1)(2)_

It is possible to define a curried function with only a single
parameter list, like this:

def addXY_Curried(x:Int):(Int => Int) = { (y:Int) => x + y }

Although addXY_Curried() is defined with only one parameter list,
it's still a curried function because it can be called with two
parameter lists!  (Shown further below.)

What makes addXY_Curried() a curried function is that it returns
a function that takes a parameter list.  Since addXY_Curried() is
defined with only one parameter list, it CAN'T be called as a
partially applied function with the underscore character (_),
as it won't compile...

addXY_Curried(5)_ // WON'T COMPILE!

To call addXY_Curried() as a partially applied function,
it must be called it like this:

addXY_Curried(5) // WILL COMPILE!

As addXY_Curried(5) returns a function, which takes a parameter list.

Even though addXY_Curried() is defined with one parameter list,
you can call it with 2 parameter lists as a fully applied
function call, like this...

addXY_Curried(5)(2) // WILL COMPILE!

The addXY_Curried() function was defined above as this:
def addXY_Curried(x:Int):(Int => Int) = { (y:Int) => x + y }

The addXY_Curried() function can be redefined as follows.

def addCurried_2(x:Int)(y:Int) = { x+y }

addCurried_2()() also returns the Int result of x + y.
The only difference is that addCurried_2()() can be called
using the underscore charater (_) as shown below, while
the addXY_Curried() function cannot.

addCurried_2()_

The following code sample demonstrates all of the above examples
in detail.  Read the in-line comments for explanations.

========================================================================================

object Demo
{
  def funcX(x:Int):Int = { x + 10 }
  def funcY(y:Int):Int = { y - 3 }
  def funcZ(z:Int):Int = { z * 4 }
  def addXY_Curried(x:Int):(Int => Int)       = { (y:Int) => x + y }
  def addXYZ_Curried(x:Int)(y:Int)(z:Int):Int = { x + y + z }

  def main(args: Array[String])
  {
    // This section demonstrates the standard way of calling functions.
    // This is NOT an example of currying!
    // NOTE: funcZ(funcY(funcX(7))) = (((7 + 10) - 3) * 4) = 56
    var result: Int = funcZ(funcY(funcX(7)))
    println("funcZ(funcY(funcX(7))) = " + result) // PRINTS: funcZ(funcY(funcX(7))) = 56

    // ======================================================
    // This section demonstrates how to call the addXYZ_Curried()()()
    // function in one line of code, to add 3 Int values...
    result = addXYZ_Curried(1)(2)(3) // Adds 1 + 2 + 3
    println("result = " + result) // PRINTS: result = 6

    // ======================================================
    // This section demonstrates how to call addXYZ_Curried()()()
    // in 3 separate lines of code to obtain the result of adding
    // 3 Ints (1 + 2 + 3).
    // NOTE: The underscore char (_) is used below to designate that we're
    //       calling addXYZ_Curried()()() with only ONE (1) parameter list.
    //       The 2nd and 3rd parameter lists are ignored.
    var func1:(Int => (Int => Int)) = addXYZ_Curried(1)_ // Returns a function that returns a function.
    var func2:(Int => Int)          = func1(2)           // Returns a function that returns an Int.
    result = func2(3) // Returns an Int value.
    println("result = " + result) // PRINTS: result = 6

    // Instead of calling addXYZ_Curried()()() in 3 separate lines of code
    // as in the above example, this section calls that curried function
    // in only 2 lines of code.  Just to demonstrate that it can be called
    // in different ways.  Again, the underscore char (_) is used below
    // to designate that we're ignoring the 3rd parameter list.
    func2 = addXYZ_Curried(1)(2)_ // Returns a function that returns an Int.
    result = func2(3) // Returns an Int value.
    println("result = " + result) // PRINTS: result = 6

    // ======================================================
    // This section demonstrates how to call the addXY_Curried() function.
    // NOTE: The following commented-out line WON'T COMPILE because the
    //       underscore char (_) MUST follow a function/method call.
    //       The call to addXY_Curried(5) returns NOT a function that
    //       returns a function, but returns a function that returns an Int.
    // addXY_Curried(5)_ // THIS LINE WON'T COMPILE!

    // Add the two numbers: 5 + 15
    func2 = addXY_Curried(5) // Returns a function that returns an Int.
    result = func2(15)       // Returns an Int.
    println("result = " + result) // PRINTS: result = 20

    // NOTE: Even though the addXY_Curried() function is defined above with only
    //       ONE parameter list, it can be called with TWO parameter lists because
    //       it's a curried function.  That is, addXY_Curried(5) returns
    //       a function that takes an Int parameter, and returns an Int.
    result = addXY_Curried(5)(20)
    println("result = " + result) // PRINTS: result = 25
  }
}

========================================================================================
The following code is an example of calling a recursive curried function.  The curried
forloop()() function is called as a fully-applied function (with 2 parameter lists)
every time it executes a loop.

When 'count > 0' evaluates to false in the main() function, the forloop()()
function is called as a partially-applied function (with only 1 parameter list),
and then terminates.
========================================================================================

object Demo
{
  def main(args: Array[String])
  {
    var count = 5
    forloop(count > 0) // 'count > 0' is passed to the 1st param. list of the forloop()() function.
    {
      // The code contained within these curly braces {} is passed as
      // the 2nd param. list to the curried forloop()() function.
      print("count = " + count + ",  ") // PRINTS: count = 5,  count = 4,  count = 3,  count = 2,  count = 1,
      count -= 1
    }
    println("\nProgram Terminated.") // PRINTS: Program Terminated.
  }

  /**
   * This forloop()() function is a RECURSIVE CURRIED FUNCTION with 2 argument lists.
   * BOTH its arguments are Pass-By-Value functions (aka, Nullary functions), which
   * means they get passed A BLOCK OF SCALA CODE.
   */
  def forloop(rule: => Boolean)(body: => Unit):Unit =
  {
    if (rule)
    {
      body // Executes the Scala code passed to the 2nd parameter list.
      forloop(rule)(body) // This is a RECURSIVE function call.
    }
  }
}

========================================================================================
========================================================================================
========================================================================================
========================================================================================
