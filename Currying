

CURRYING
========
Currying transforms a function that has MULTIPLE PARAMETER LISTS into a
chain of functions, where each function in the chain takes a single parameter.

Each set of parenthesis represents a PARAMETER LIST.  Multiple parameter lists
shouldn't be confused with multiple parameters.  (Multiple parameters
are contained within a SINGLE set of parenthesis.)

A curried function has this behavior:

1) It gets passed a value and returns a function.
   AND
2) The returned function takes a parameter value, and
   returns a value, or returns another function.

A curried function can go further than the above behavior.
If step 2) above returns a function (instead of a value),
that function would take a parameter value, and return
a value, or return another function.  This could go on,
and on, dependent on the number of parameter lists the
curried function takes.

A Scala function that has MULTIPLE PARAMETER LISTS is a CURRIED FUNCTION,
and looks like this:  addXYZ_Curried(x)(y)(z)

A curried function can be called by passing values to ALL its parameters,
like this:  addXYZ_Curried(1)(2)(3)


PARTIALLY APPLIED FUNCTION
==========================
When a curried function is called without all its parameter lists
it's being called as a PARTIALLY APPLIED FUNCTION.

A curried function can also be called without all its parameter lists,
where an underscore character (_) must be the last character to
designate the parameter list(s) that aren't specified.  FOR EXAMPLE:
addXYZ_Curried(1)_
addXYZ_Curried(1)(2)_








============================================================================

object Demo
{
  def funcX(x:Int):Int = { x + 10 }
  def funcY(y:Int):Int = { y - 3 }
  def funcZ(z:Int):Int = { z * 4 }
  def addXY_Curried(x:Int):(Int => Int)       = { (y:Int) => x + y }
  def addXYZ_Curried(x:Int)(y:Int)(z:Int):Int = { x + y + z }

  def main(args: Array[String])
  {
    // This section demonstrates the standard way of calling functions.
    // This is NOT an example of currying!
    // NOTE: funcZ(funcY(funcX(7))) = (((7 + 10) - 3) * 4) = 56
    var result: Int = funcZ(funcY(funcX(7)))
    println("funcZ(funcY(funcX(7))) = " + result) // PRINTS: funcZ(funcY(funcX(7))) = 56

    // ======================================================
    // This section demonstrates how to call the addXYZ_Curried()()()
    // function in one line of code, to add 3 Int values...
    result = addXYZ_Curried(1)(2)(3) // Adds 1 + 2 + 3
    println("result = " + result) // PRINTS: result = 6

    // ======================================================
    // This section demonstrates how to call addXYZ_Curried()()()
    // in 3 separate lines of code to obtain the result of adding
    // 3 Ints (1 + 2 + 3).
    // NOTE: The underscore char (_) is used below to designate that we're
    //       calling addXYZ_Curried()()() with only ONE (1) parameter list.
    //       The 2nd and 3rd parameter lists are ignored.
    var func1:(Int => (Int => Int)) = addXYZ_Curried(1)_ // Returns a function that returns a function.
    var func2:(Int => Int)          = func1(2)           // Returns a function that returns an Int.
    result = func2(3) // Returns an Int value.
    println("result = " + result) // PRINTS: result = 6

    // Instead of calling addXYZ_Curried()()() in 3 separate lines of code
    // as in the above example, this section calls that curried function
    // in only 2 lines of code.  Just to demonstrate that it can be called
    // in different ways.  Again, the underscore char (_) is used below
    // to designate that we're ignoring the 3rd parameter list.
    func2 = addXYZ_Curried(1)(2)_ // Returns a function that returns an Int.
    result = func2(3) // Returns an Int value.
    println("result = " + result) // PRINTS: result = 6

    // ======================================================
    // This section demonstrates how to call the addXY_Curried() function.
    // NOTE: The following commented-out line WON'T COMPILE because the
    //       underscore char (_) MUST follow a function/method call.
    //       The call to addXY_Curried(5) returns NOT a function that
    //       returns a function, but returns a function that returns an Int.
    // addXY_Curried(5)_ // THIS LINE WON'T COMPILE!

    // Add the two numbers: 5 + 15
    func2 = addXY_Curried(5) // Returns a function that returns an Int.
    result = func2(15)       // Returns an Int.
    println("result = " + result) // PRINTS: result = 20

    // NOTE: Even though the addXY_Curried() function is defined above with only
    //       ONE parameter list, it can be called with TWO parameter lists because
    //       it's a curried function.  That is, addXY_Curried(5) returns
    //       a function that takes an Int parameter, and returns an Int.
    result = addXY_Curried(5)(20)
    println("result = " + result) // PRINTS: result = 20
  }
}

============================================================================




























Assume we have these 3 functions:
           f(x) = x + 10
           f(y) = y - 3
           f(z) = z * 4
           
           From the above 3 functions, we can create this expression:
           f(x)(y)(z)
           
           CORRECT -- The above expresion reads like this:
           1) Call function f(x), passing it a numeric value.
           2) Call function f(y), passing it the numeric value returned by f(x).
           3) Call function f(z), passing it the numeric value returned by f(y).
           4) f(z) returns the resultant numeric value.
           
           WRONG -- The above expresion reads like this:
           1) Call function f(x), passing it a numeric value.
           2) Call function f(y), passing it the numeric value returned by f(x).
           3) Call function f(z), passing it the numeric value returned by f(y).
           4) f(z) returns the resultant numeric value.

           In Scala code the above f(x)(y)(z) expression can be written like this:

           func(x)       = x + 10
           func(x)(y)    = func((x + 10) - 3)
           func(x)(y)(z) = func(((x + 10) - 3)) * 4)

           result = func(x)(y)(z)

object Demo
{
  def funcX(x:Double):Double = { x + 10.0D }
  def funcY(y:Double):Double = { y - 3.0D }
  def funcZ(z:Double):Double = { z * 4.0D }

  def main(args: Array[String])
  {
      val result:Double = funcZ(funcY(funcX(7.0D)))
      println("result = " + result) // PRINTS: result = 56.0
  }
}




