======================================================================================

object Demo
{
  def main(args: Array[String]): Unit = {

    // *********************************************************************
    // This section calls the map() function defined further below.
    val intNumbersList = List(1, 2, 3, 4, 5, 6, 7, 8, 9)
    val doubleIntFunc:(Int => Int) = (number:Int) => number * 2
    map(doubleIntFunc, intNumbersList)

    val floatNumbersList = List(1.1F, 2.2F, 3.3F, 4.4F, 5.5F)
    val doubleFloatFunc:(Float => Float) = (number:Float) => number * 2.0F
    map(doubleFloatFunc, floatNumbersList)

    val floatNumbersArray = Array(1.1F, 2.2F, 3.3F, 4.4F, 5.5F)
    map(doubleFloatFunc, floatNumbersArray)

    // *********************************************************************
    // This section calls the filter() function defined further below.
    val floatNumberFilterFunc:(Float => Boolean) = (number:Float) => number > 2.2F
    filter(floatNumberFilterFunc, floatNumbersList)
    filter(floatNumberFilterFunc, floatNumbersArray)
  }

  /**
   * @param func - A function taking an argument of data type A, and returning the data type B.
   * @param Seq - A Seq of values having data type A (Seq[A]).
   * @tparam A
   * @tparam B
   * @return - A Seq of values having the data type B (Seq[B]).
   */
  def map[A, B](func:(A => B), seq:Seq[A]):Seq[B] =
  {
    val result: Seq[B] = for (x <- seq) yield func(x)
    println(result)
    result
  }

  def filter[A](func: (A => Boolean), seq: Seq[A]): Seq[A] =
  {
    val result: Seq[A] = for (x <- seq; if func(x)) yield x
    println(result)
    result
  }
}

======================================================================================

