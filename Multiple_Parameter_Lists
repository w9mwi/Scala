Functions in Scala can have not only multiple parameters, but
multiple parameter lists/groups.  For example, the myWhileLoop()()
function below contains two separate parameter groups.  Even though
the code below appears very short and simple, it's quite difficult
to really understand all its syntax.  For example, why do the 1st
and 2nd parameter groups of the myWhileLoop()() function have this
syntax...

1st parameter group: (testCondition: => Boolean)
2nd parameter group: (codeBlock: => Unit)

It's easy to understand the "=> Boolean" (returns a Boolean) and
the "=> Unit" (returns nothing) syntax, but undertanding the
"testCondition:" and "codeBlock:" syntax isn't so easy--as you'd
expect some text to exist between the colon (:) and the rocket
(=>) symbols, OR for the colon (:) symbol to not exist at all.

object Demo
{
  def main(args: Array[String])
  {
    var idx:Int = 0
    myWhileLoop(idx < 5)
    {
      print("idx = " + idx + ", ") // PRINTS: idx = 0, idx = 1, idx = 2, idx = 3, idx = 4,
      idx += 1
    }
  }

  def myWhileLoop(testCondition: => Boolean)(codeBlock: => Unit):Unit =
  {
    // NOTE: The below syntax...      while(testCondition){codeBlock}
    //       can be replaced with...  while(testCondition)(codeBlock)
    //       or replaced with...      while(testCondition) codeBlock
    //       ...and it functions the same.
    //
    //       (testCondition) below represents this code: (idx < 5)
    //       {codeBlock}     below represents this code: { print("idx = " + idx + ", ");  idx += 1 }
    while(testCondition){codeBlock}
  }
}
============================================================
Here's another code example similar to the one above...

object Demo
{
  def main(args: Array[String])
  {
    val age:Int = 19
    val numberOfAccidents:Int = 0

    ifBothTrue (age > 18)(numberOfAccidents == 0)
    {
      print("You get to purchase our overpriced insurance!")
    }
  }

  def ifBothTrue(test1: => Boolean)(test2: => Boolean)(codeBlock: => Unit):Unit =
  {
    // NOTE: The below syntax...      (test1 && test2){codeBlock}
    //       can be replaced with...  (test1 && test2)(codeBlock)
    //       or replaced with this... (test1 && test2) codeBlock
    //       ...and it functions the same.
    if (test1 && test2){codeBlock}
  }
}
============================================================
