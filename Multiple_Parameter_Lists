Functions in Scala can have not only multiple parameters, but
multiple parameter lists/groups.  For example, the myWhileLoop()()
function below contains two separate parameter groups.  Even though
the code below appears very short and simple, it's quite difficult
to really understand all its syntax.  For example, why do the 1st
and 2nd parameter groups of the myWhileLoop()() function have this
syntax...

1st parameter group: (testCondition: => Boolean)
2nd parameter group: (codeBlock: => Unit)

It's easy to understand the "=> Boolean" (returns a Boolean) and
the "=> Unit" (returns nothing) syntax, but undertanding the
"testCondition:" and "codeBlock:" syntax isn't so easy--as you'd
expect some text to exist between the colon (:) and the rocket
(=>) symbols, OR for the colon (:) symbol to not exist at all.

object Demo
{
  def main(args: Array[String])
  {
    var idx:Int = 0
    myWhileLoop(idx < 5)
    {
      print("idx = " + idx + ", ") // PRINTS: idx = 0, idx = 1, idx = 2, idx = 3, idx = 4,
      idx += 1
    }
  }

  def myWhileLoop(testCondition: => Boolean)(codeBlock: => Unit):Unit =
  {
    // NOTE: The below syntax...      while(testCondition){codeBlock}
    //       can be replaced with...  while(testCondition)(codeBlock)
    //       or replaced with...      while(testCondition) codeBlock
    //       ...and it functions the same.
    //
    //       (testCondition) below represents this code: (idx < 5)
    //       {codeBlock}     below represents this code: { print("idx = " + idx + ", ");  idx += 1 }
    while(testCondition){codeBlock}
  }
}
============================================================
Here's another code example similar to the one above...

object Demo
{
  def main(args: Array[String])
  {
    val age:Int = 19
    val numberOfAccidents:Int = 0

    ifBothTrue(age > 18)(numberOfAccidents == 0)
    {
      println("You get to purchase our overpriced insurance!")
    }

    // YIKES, this also works!...
    ifBothTrue(age > 18)(numberOfAccidents == 0)( println("You get to purchase our overpriced insurance!") )
  }

  def ifBothTrue(test1: => Boolean)(test2: => Boolean)(codeBlock: => Unit):Unit =
  {
    // NOTE: The below syntax...      (test1 && test2){codeBlock}
    //       can be replaced with...  (test1 && test2)(codeBlock)
    //       or replaced with this... (test1 && test2) codeBlock
    //       ...and it functions the same.
    if (test1 && test2){codeBlock}
  }
}
============================================================
This code example demonstrates how a function (with multiple
parameter lists) can use an implicit parameter.  If a function
gets called numerous times, you may want to use an implicit
parameter so you don't have to keep passing that same parameter
to the function, over and over again.

NOTE: A method/function/constructor can have ONLY ONE implicit parameter
      (regardles of how many parameters or parameter lists exist), and
      and it MUST occur in the LAST parameter list.

object Demo
{
  def main(args: Array[String])
  {
    printIntIfTrue(123)(false) // PRINTS: nothing because the second param is false
    printIntIfTrue(456)(true)  // PRINTS: 456 because the second param is true

    // Because the printIntIfTrue()() function below takes an implicit parameter
    // of type Boolean, and because an implicit Boolean val/var exists before
    // printIntIfTrue() gets called, the printIntIfTrue()() will execute when
    // calling it WITHOUT a second parameter!  NOTE: If multiple implicit Boolean
    // vals/vars exist before printIntIfTrue()() gets called without a second
    // parameter, a runtime error occurs.  Multiple implicit vals/vars can
    // exist (without causing an error) as long as they are of different types,
    // as shown below.
    implicit val boolean_1:Boolean = true
    implicit val string_1:String   = "BEER"
    printIntIfTrue(420) // PRINTS: 420 because the boolean_1 val is true
  }

  def printIntIfTrue(a:Int)(implicit b:Boolean):Unit =
  {
    if (b) { println(a) }
  }
}
