
The following sample program shows how to write the bind() function,
which is used to bind the results of these 3 functions into a single
final result...

1) doubleFunc()
2) tripleFunc()
3) quadFunc()


object Demo
{
  type IntStringTuple = (Int, String)

  def bind(func:(Int=>IntStringTuple), tuple:IntStringTuple):IntStringTuple =
  {
    // println("bind() called.")
    val (intResult, strResult):IntStringTuple = func(tuple._1)
    (intResult, tuple._2 + strResult) // PRINTS:
  }

  def doubleFunc(a:Int):IntStringTuple =
  {
    // println("doubleFunc() called.")
    val intResult:Int = a * 2
    (intResult, s"\ndoubleFunc result = $intResult")  // PRINTS: doubleFunc = 200
  }

  def tripleFunc(a:Int):IntStringTuple =
  {
    // println("tripleFunc() called.")
    val intResult:Int = a * 3
    (intResult, s"\ntripleFunc result = $intResult") // PRINTS: tripleFunc = 600
  }

  def quadFunc(a:Int):IntStringTuple =
  {
    // println("quadFunc() called.")
    val intResult:Int = a * 4
    (intResult, s"\nquadFunc = $intResult") // PRINTS: quadFunc = 2400
  }

  def main(args: Array[String]):Unit =
  {
    val doubleResult:IntStringTuple = doubleFunc(100)
    val tripleResult:IntStringTuple = bind(tripleFunc, doubleResult)
    val quadResult:IntStringTuple   = bind(quadFunc,   tripleResult)
    println(s"quadResult._1 =  ${quadResult._1}, quadResult._2 =  ${quadResult._2}")
    // PRINTS: quadResult._1 =  2400, quadResult._2 =
  }
}

==================================================================================

The following code sample defines and instantiates a class named Wrapper.
The Wrapper class does nothing more than wrap a single data value
(having the parametric type A) inside the Wrapper class.  The Wrapper
class also implements the following two (2) functions, which enables
the Wrapper class to work within a for() expression.

1) Wrapper.flatMap()
2) Wrapper.map()

A for expression will work with ANY DATA TYPE that implements both
the map() and flatMap() functions--it doesn't have to be a class.

object Demo
{
  /**
   *   The ONLY purpose this Wrapper companion object (and its apply() method)
   *   serves is to allow the Wrapper class to be instantiated without using
   *   the 'new' keyword.
   */
  object Wrapper
  {
    def apply[A](value:A) = new Wrapper(value) // The 'new' keyword is REQUIRED here.
  }

  class Wrapper[A](value:A)
  {
    override def toString = value.toString

    def flatMap[B](func:A=>Wrapper[B]):Wrapper[B] =
    {
      println("flatMap() called.")
      func(value)
    }

    def map[B](func:A=>B):Wrapper[B] =
    {
      println("map() called.")
      val myValue:B = func(value)
      Wrapper(myValue)
    }
  }

  def main(args: Array[String]):Unit =
  {
    val wrap:Wrapper[Int]= Wrapper(123)
    println(wrap) // PRINTS: 123

    // The following code shows that the for() expression
    // can be written using parenthesis (), or using braces {}...
    var resultWrapper:Wrapper[Int] = for (x <- Wrapper(1);
                                          y <- Wrapper(2);
                                          z <- Wrapper(3)) yield x+y+z
    println(resultWrapper) // PRINTS: 6

    resultWrapper = for {x <- Wrapper(1)
                         y <- Wrapper(2)
                         z <- Wrapper(3)} yield x+y+z
    println(resultWrapper) // PRINTS: 6
  }
}

==================================================================================

The following code sample is a modified implementation of the sample
code shown immediately ABOVE.  Where the "class Wrapper" defined in
the code ABOVE is changed to "case class Debuggable" in the code BELOW.

Notice that the for() expression in the ABOVE code sample contains this text:
yield x+y+z
While the for() expression in the code BELOW contains the text:
yield z

The reason the ABOVE for() expression contains "yield x+y+z" is because the
x, y, and z values are calculated independent of one another, so they must
be added within the "yield" statement to generate the correct result.

The BELOW for() expression contains only "yield z" because the x result
is passed to tripleFunc(x), which returns a result into the y value.
The y value is then passed to quadFunc(y), which returns the final
result into the z value.

NOTE: Both of the for() expressions in the below sample code are
      translated into the following for() expression by the
      Scala compiler.  Notice that the flatMap() method gets
      called twice, and then the map() method is called last.

      finalResult = doubleFunc(100)
            .flatMap((x: Int) =>
              tripleFunc(x)
                .flatMap((y: Int) =>
                  quadFunc(y)
                    .map((z: Int) => z)
          )
      )

      To view the above translated for() expression in IntelliJ, place
      focus on the first "for" expression in the below code.  Right-click
      mouse button, then select from the menu "Desugar Scala Code..."
      and run the program.

object Demo
{
  case class Debuggable(value:Int, message:String)
  {
    def flatMap(func:Int=>Debuggable):Debuggable =
    {
      // println("flatMap() called.")
      val newValue:Debuggable = func(value)
      // NOTE: newValue.message contains the most-recent message.
      Debuggable(newValue.value, message + "\n" + newValue.message)
    }

    def map[B](func:Int=>Int):Debuggable =
    {
      // println("map() called.")
      val newValue:Int = func(value)
      Debuggable(newValue, message)
    }
  }

  def main(args: Array[String]):Unit =
  {
    def doubleFunc(a:Int):Debuggable =
    {
      val intResult:Int = a * 2
      val message:String = s"doubleFunc: $a * 2 = $intResult"
      Debuggable(intResult, message)
    }

    def tripleFunc(a:Int):Debuggable =
    {
      val intResult:Int = a * 3
      val message:String = s"tripleFunc: $a * 3 = $intResult"
      Debuggable(intResult, message)
    }

    def quadFunc(a:Int):Debuggable =
    {
      val intResult:Int = a * 4
      val message = s"quadFunc: $a * 4 = $intResult"
      Debuggable(intResult, message)
    }

    // The following 2 for() expressions show that a for() expression
    // can be written using parenthesis (), or using braces {}.
    var finalResult:Debuggable = for (x <- doubleFunc(100);
                                      y <- tripleFunc(x);
                                      z <- quadFunc(y)) yield z
    println(s"finalResult.value   = ${finalResult.value}")
    println(s"finalResult.message = ${finalResult.message}\n")
    // PRINTS: finalResult.value   = 2400
    //         finalResult.message = doubleFunc: 100 * 2 = 200
    //                               tripleFunc: 200 * 3 = 600
    //                               quadFunc:   600 * 4 = 2400

    finalResult = for {x <- doubleFunc(100)
                       y <- tripleFunc(x)
                       z <- quadFunc(y)} yield z
    println(s"finalResult.value   = ${finalResult.value}")
    println(s"finalResult.message = ${finalResult.message}")
    // PRINTS: IDENTICAL TEXT to the text printed above.
  }
}
