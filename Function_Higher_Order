HIGHER-ORDER FUNCTION
=====================

A higher-order function is a method, or a function, that accepts an
argument that is a function, and/or returns a function.  In the
following code sample, the bind() method accepts the multiplyFunc()
function as an argument, calls that function, and returns an Int
result.  Read the comments for details.

object Demo
{
  /**
   * This bind() method accepts the following 2 arguments:
   *
   * @multiplyFunc - A function that multiplies 2 Int values and returns the Int result.
   * @multiplier   - An Int value.
   *
   * @return  The Int value returned by:  multiplyFunc(multiplier)
   */
  def bind(multiplyFunc:(Int => Int), multiplier:Int):Int = multiplyFunc(multiplier)

  def doubleFunc(number:Int):Int = number * 2
  def tripleFunc(number:Int):Int = number * 3
  def quadFunc(number:Int):Int   = number * 4

  def main(args: Array[String]): Unit =
  {
    val doubleResult:Int = doubleFunc(100)                // doubleResult = 100 * 2 = 200
    val tripleResult:Int = bind(tripleFunc, doubleResult) // tripleResult = 200 * 2 = 400
    val quadResult:Int   = bind(quadFunc, tripleResult)
    println(s"quadResult = $quadResult")  // PRINTS: quadResult = 2400
  }
}

===============================================




The following
code defines the compose_1() and compose_2() functions that are
higher-order functions--as they both get passed functions as parameters,
and they both return a function.  Both compose_1() and compose_2()
return the function f(g(x))...


