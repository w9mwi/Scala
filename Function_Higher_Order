HIGHER-ORDER FUNCTION
=====================

A higher-order function is a method, or a function, that accepts an
argument that is a function, and/or returns a function.  In the
following code sample, the bind() method is considered a higher-order
function--even though bind() is defined as a method.
Read the comments for details.

object Demo
{
  /**
   * This bind() method accepts the following 2 arguments:
   *
   * @multiplyFunc - A function that multiplies 2 Int values and returns the Int result.
   * @multiplier   - An Int value.
   *
   * @return  The Int value returned by:  multiplyFunc(multiplier)
   */
  def bind(multiplyFunc:(Int => Int), multiplier:Int):Int = multiplyFunc(multiplier)

  def doubleFunc(number:Int):Int = number * 2
  def tripleFunc(number:Int):Int = number * 3
  def quadFunc(number:Int):Int   = number * 4

  def main(args: Array[String]): Unit =
  {
    val doubleResult:Int = doubleFunc(100)                // doubleResult = (100 * 2) = 200
    val tripleResult:Int = bind(tripleFunc, doubleResult) // tripleResult = (200 * 3) = 600
    val quadResult:Int   = bind(quadFunc, tripleResult)   // quadResult   = (600 * 4) = 2400
    println(s"quadResult = $quadResult")  // PRINTS: quadResult = 2400
  }
}

======================================================================

The following code sample demonstrates another example of higher-order functions.
Read the comments for details.

object Demo
{
  /**
   * compose_1() is a METHOD that accepts two arguments that are both functions,
   *             and returns a function.
   */
  def compose_1(f: Double => Double, g: Double => Double): (Double => Double) = { x => f(g(x)) }

  /**
   * compose_2 is a val that gets assigned a FUNCTION.  The function accepts three arguments.
   *           The first two arguments are functions, the third argument is of type Double.
   *           It returns a type Double.
   */
  val compose_2:(((Double=>Double), (Double=>Double), Double) => Double) = {
    (f: Double => Double, g: Double => Double, x: Double) => f(g(x))
  }

  // plus5 is a val that get assigned a function.
  // The plus5 function could be rewritten as a method like this:
  // def plus5(x:Double):Double = x + 5.0
  val plus5:(Double => Double) = (x:Double) => x + 5.0

  // square is a val that get assigned a function.
  // The square function could be rewritten as a method like this:
  // def square(x:Double):Double = x*x
  val square:(Double => Double) = (x:Double) => x * x

  def main(args: Array[String])
  {
    val a:(Double => Double) = compose_1(plus5, square)
    val b:(Double => Double) = compose_1(square, plus5)

    println("a(3) = " + a(3)) // PRINTS: a(3) = 14.0
    println("b(3) = " + b(3)) // PRINTS: b(3) = 64.0

    // The following line is equivalent to calling:  a(3)
    println("compose_2(plus5,  square, 3) = " + compose_2(plus5, square, 3)) // PRINTS: compose_2(plus5,  square, 3) = 14.0

    // The following line is equivalent to calling:  b(3)
    println("compose_2(square, plus5,  3) = " + compose_2(square, plus5, 3)) // PRINTS: compose_2(square, plus5,  3) = 64.0
  }
}

======================================================================

Recall that a higher-order function is a method, or a function, that accepts
an argument that is a function, and/or returns a function.  Based on that
criteria, the funcOfGunc() method in the below code sample is considered
a higher-order function--even though funcOfGunc is defined as a method

NOTICE: The 2 functions that funcOfGunc() accepts as arguments, and the function
        that funcOfGunc() returns, accept generic data types because they are
        defined as generic data types in the funcOfGunc() method definition.

object Demo
{
  /*******************************************************************************
   * Any function that accepts MULTIPLE argument lists is a curried function.
   * The funcOfGunc() method defined below is a curried function because it
   * accepts TWO argument lists.  When you invoke funcOfGunc() with only one
   * argument list, it returns a function, which makes it a partially-applied
   * function.  When you invoke that returned function by passing to it a
   * generic numeric value (Int, Float, Double), a final numeric result is
   * returned, making funcOfGunc() a fully-applied function.
   *
   * When this funcOfGunc() method becomes fully applied by passing to it a
   * numeric value (Int, Float, Double), it first invokes the gunc() function,
   * and then it invokes the func() function.
   *******************************************************************************/
  def funcOfGunc[A,B,C](func:(B=>C), gunc:(A=>B)):(A=>C) = { x=>func(gunc(x)) }

  def main(args:Array[String]): Unit =
  {
    // Define the plus5() and square() functions, assigning them each to a val.
    val plus5:(Double=>Double)  = (x:Double) => x+5
    val square:(Double=>Double) = (x:Double) => x*x

    // Test the plus5() and square() functions.
    println("plus5(3)  = " + plus5(3))  // PRINTS: plus5(3)  = 8.0
    println("square(3) = " + square(3)) // PRINTS: square(3) = 9.0

    // The following line invokes funcOfGunc() as a partially-applied function,
    // by calling it with only one of its two argument lists.
    val partiallyAppliedFunc:(Double=>Double) = funcOfGunc(plus5, square)
    // Invoking the partially-applied function returned by funcOfGunc()
    // below makes it fully applied.
    var result:Double = partiallyAppliedFunc(7.0D)
    println(s"Result 1 = $result") // PRINTS: Result 1 = 54.0  (NOTE: 54.0 = (7.0*7.0) + 5.0)

    // The following line invokes funcOfGunc() as a fully-applied function,
    // by calling it with both of its two argument lists at once.
    result = funcOfGunc(square, plus5)(7.0D)
    println(s"Result 2 = $result") // PRINTS: Result 2 = 144.0  (NOTE: 144.0 = (7.0+5.0) * 12.0)
  }
}
