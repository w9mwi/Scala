HIGHER-ORDER FUNCTION
=====================

A higher-order function is a method, or a function, that accepts an
argument that is a function, and/or returns a function.  In the
following code sample, the bind() method accepts the multiplyFunc()
function as an argument, calls that function, and returns an Int
result.  Read the comments for details.

object Demo
{
  /**
   * This bind() method accepts the following 2 arguments:
   *
   * @multiplyFunc - A function that multiplies 2 Int values and returns the Int result.
   * @multiplier   - An Int value.
   *
   * @return  The Int value returned by:  multiplyFunc(multiplier)
   */
  def bind(multiplyFunc:(Int => Int), multiplier:Int):Int = multiplyFunc(multiplier)

  def doubleFunc(number:Int):Int = number * 2
  def tripleFunc(number:Int):Int = number * 3
  def quadFunc(number:Int):Int   = number * 4

  def main(args: Array[String]): Unit =
  {
    val doubleResult:Int = doubleFunc(100)                // doubleResult = 100 * 2 = 200
    val tripleResult:Int = bind(tripleFunc, doubleResult) // tripleResult = 200 * 2 = 400
    val quadResult:Int   = bind(quadFunc, tripleResult)
    println(s"quadResult = $quadResult")  // PRINTS: quadResult = 2400
  }
}

===============================================

In the following code sample:

compose_1() is a METHOD that accepts two arguments as functions, and returns a function.

compose_2 is a val that gets assigned a FUNCTION.  The function accepts three arguments.
          The first two arguments are functions, the third argument is of type Double.

Both the compose_1() method and the compose_2 function return a function.

object Demo
{
  val plus5  = (x:Double) => x+5.0  // EQUIVALENT TO:  def plus5(x:Double):Double = x+5.0
  val square = (x:Double) => x*x    // EQUIVALENT TO:  def square(x:Double):Double = x*x

  // The following compose_1() function gets passed 2 functions as params (f and g),
  // and returns a function that gets passed a Double and returns a Double.
  def compose_1(f:Double => Double, g:Double => Double):(Double => Double) = { x => f(g(x)) }
  val compose_2 = (f:Double => Double, g:Double => Double, x:Double) => f(g(x))

  def main(args: Array[String])
  {
    val a:(Double => Double) = compose_1(plus5, square) // EQUIVALENT TO:  val a  = compose_1(plus5, square)
    val b                    = compose_1(square, plus5) // EQUIVALENT TO:  val b:(Double => Double) = compose_1(square, plus5)

    println("a(3) = " + a(3)) // PRINTS: a(3) = 14.0
    println("b(3) = " + b(3)) // PRINTS: b(3) = 64.0

    // The following 2 calls to compose_2() are identical
    // to the above two function calls a(3) and b(3)...
    println("compose_2(plus5,  square, 3) = " + compose_2(plus5, square, 3)) // PRINTS: compose_2(plus5,  square, 3) = 14.0
    println("compose_2(square, plus5,  3) = " + compose_2(square, plus5, 3)) // PRINTS: compose_2(square, plus5,  3) = 64.0
  }
}





The following
code defines the compose_1() and compose_2() functions that are
higher-order functions--as they both get passed functions as parameters,
and they both return a function.  Both compose_1() and compose_2()
return the function f(g(x))...


