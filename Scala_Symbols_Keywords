
FOR MORE INFORMATION ABOUT SCALA SYMBOLS AND KEYWORDS,
SEE THE FOLLOWING WEB PAGES.

https://docs.scala-lang.org/tutorials/FAQ/finding-symbols.html
https://docs.scala-lang.org/tutorials/FAQ/finding-symbols.html

# Symbol - The pound sign (#) operator in Scala.

See:
https://stackoverflow.com/questions/9443004/what-does-the-operator-mean-in-scala
https://stackoverflow.com/questions/48498685/what-is-somethinga-in-scala?noredirect=1&lq=1

======================================================================
@ Symbol - When pattern matching "variable@pattern" binds the variable
part to the value matched by the pattern, if the pattern matches.
For more info, see:
https://stackoverflow.com/questions/2359014/scala-operator
======================================================================
Sealed classes - Traits and classes can be marked with the "sealed"
keyword, which means all subtypes must be declared in the same file.
This assures that all subtypes are known.  This is useful for pattern
matching because we donâ€™t need a "catch all" case, where the underscore
character (_) is used.  Here's an example...

sealed abstract class Furniture
case class Couch() extends Furniture
case class Chair() extends Furniture

def findPlaceToSit(pieceOfFurniture:Furniture):String =
pieceOfFurniture match
                 {
                   case a: Couch => "Lie on the couch"
                   case b: Chair => "Sit on the chair"
                 }
======================================================================
??? (3 Question Marks) - In Scala, three consecutive question marks
(???) designates a method/function stub that has NOT been coded.
This is used only to document that a method/function should be needed
in the future, but is curently not coded.  Examples:

def myFutureFunction = ???                 // Argument list and return type NOT required.
def myFutureFunction(s: String):Int = ???  // Argument list and return type can be included.
======================================================================
