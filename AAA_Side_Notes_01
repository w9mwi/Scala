Page 156-157
Every object in Scala is an instance the Any object, which is the top object
in the object tree.  So every other object in Scala is a child of the Any object.
At the bottom of the object tree is the Nothing object, which is a subtype
(a child) of ALL Scala objects.  The Nothing object exists to handle situations
where functions never return.

Page 230
Scala provides 3 constructs for creating user-defined types:
1) classes
2) traits
3) objects - Singleton objects, meaning "static" (only one instance) objects.

==================================================================

Every object in Scala is an instance of the "Any" object, because the
"Any" object is the parent of ALL other objects.  The Any object is
the direct parent of these two objects: AnyVal and AnyRef

The "Nothing" object (which has no value) is a subtype of ALL Scala
objects, and it exists to handle situations when functions don't
return a value.
==================================================================
OBJECT-ORIENTED PROGRAMMING (PAGE 394)

An object contains both data and functonality that operates on that
data.  A class is a blueprint for an object.

Case classes do NOT contain curly braces, as do regular classes.

When you specify def to write a function within a method, it's
considered a method, which can access and vals/vars (and alter
vars) declared within the method.

In the following sample code, the name and id parameters passed to
the Student class upon instantiation are NOT ACCESSIBLE outside the
Student class because BY DEFAULT, arguments passed to a class are
NOT turned into class members, and thus cannot be accessed outside
the class.  Read the coments in the code below to better understand this.

object Demo
{
  class Student(name:String, id:String)
  {
    var tests       = List[Double]()
    var quizzes     = List[Double]()
    var assignments = List[Double]()

    def testAverage       = tests.sum / tests.size
    def quizAverage       = quizzes.sum / quizzes.size
    def assignmentAverage = assignments.sum / assignments.size

    // Unlike the 2 println() methods called at the bottom of main(),
    // the following 2 println() methods won't cause a runtime exception
    // because the name and id params are accessible here--within
    // the Student class definition.
    println(name);  println(id)
  }

  def main(args: Array[String]):Unit =
  {
    val john = new Student("John Doe", "0123456")
    john.tests ::= 78
    john.tests ::= 85
    println(john.testAverage)

    // BOTH of the following 2 println() statements will cause a runtime
    // error because values passed as parameters to a class, upon its
    // instantiation, are NOT accessible UNLESS the class is modified
    // by doing one (or both) of the following:
    // 1) Change the above class definition to this:
    //    case class Student(name:String, id:String) // The case keyword is added.
    // 2) Change the above class definition to this:
    //    class Student(val name:String, val id:String) // var will also work in place of val.
    println(john.name);  println(john.id);
  }
}


