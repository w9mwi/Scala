Like most other Scala collections, a Map can be mutable or immutable.
By default, Maps are immutable, which means you don't need to specify
an import statement for Map.  Use the following import statements
accordingly...

import scala.collection.immutable.Map
import scala.collection.mutable.Map
import scala.collection.{immutable, mutable}

The term Map has its origins in mathematics.  A mapping in mathematics is something that
takes values from one set and returns values from another set.  A function in mathematics
is technically a mapping.  The Scala Map collection type is very similar to that definition,
in that it maps from a "key" to a "value."  For example a key could be a zip code that's
of type Int, and the value would be "city, state" of type String.

The contents of a Map are essentially a tuple type having two values.
So a Map of ("two" -> 2) is stored as the tuple pair ("two", 2).
The code sample below shows this by printing the the contents
of a Map one Map element at a time.

A Map can have multiple elements where the key->value pairs in each element
are of different types.  For example, the following val myMap has as its first
element an Int->String key->value pair.  Its second element a String->Int
key->value pair.  And its third element a Double->Float key->value pair.

val myMap = Map(1 -> "one", "two" -> 2, 123.4D -> 567.8F)
println(myMap) // PRINTS: Map(1 -> one, two -> 2, 123.4 -> 567.8)
==========================================================================================
This small block of code demonstrates how to use a mutable Map...

object Demo
{
  import scala.collection.mutable

  def main(args: Array[String])
  {
    // NOTE: tom is a val, so we cannot change the Map that tom points to.
    //       However, because tom is a mutable.Map, we can change/update
    //       any existing value stored in it, as the below code demonstrates.
    val tom:mutable.Map[String, Int] = mutable.Map("pop" -> 1)
    println("A) tom = " + tom)      // PRINTS: A) tom = Map(pop -> 1)
    println("B) " + tom.get("pop")) // PRINTS: Some(1)   The following line of code uses this same construct...

    // The following line of code UPDATES (CHANGES) the mutable.Map tom--incrementing its Int value by one...
    tom.put("pop" , tom.get("pop").get + 1)
    println("C) tom = " + tom) // PRINTS: C) tom = Map(pop -> 2)
  }
}

==========================================================================================
import scala.collection.{immutable, mutable}

object Demo
{
  def main(args: Array[String])
  {
    var immutMap:immutable.Map[Int, String] = Map(1 -> "one", 2 -> "two", 3 -> "three", 4 -> "four", 5 -> "five")
    // NOTE: When iterating through all elements of a Map, the order of its elements
    //       may be different than the order of when the Map was constructed.
    println("A) " + immutMap) // PRINTS:  A) Map(5 -> five, 1 -> one, 2 -> two, 3 -> three, 4 -> four)

    // NOTE: A Map's key can be of any type, and a Map's value can be of any type!
    //       Here's how to obtain a Map's value from its key.  (key = 3, value = "three")
    println("B) immutMap(3) = "       + immutMap(3))       // PRINTS: B) immutMap(3) = three
    println("C) immutMap.apply(3) = " + immutMap.apply(3)) // PRINTS: C) immutMap.apply(3) = three

    // To add a Map element to an existing Map, do the following...
    immutMap += (6 -> "six")
    println("D) " + immutMap) // PRINTS: D) Map(5 -> five, 1 -> one, 6 -> six, 2 -> two, 3 -> three, 4 -> four)

    // To remove a Map element from an existing Map, use the key after the - or -= operator.
    // So the following line of code removes the (6 -> "six") element...
    immutMap -= 6
    println("E) " + immutMap) // PRINTS: E) Map(5 -> five, 1 -> one, 2 -> two, 3 -> three, 4 -> four)

    // If you try to remove a Map element that doesn't exist in the Map, nothing will happen.
    // Example: Here, we try removing the Map element having a key of 99, which doesn't exist...
    immutMap -= 99
    println("F) " + immutMap + "\n") // PRINTS: F) Map(5 -> five, 1 -> one, 2 -> two, 3 -> three, 4 -> four)

    // NOTE: The contents of a Map are essentially a tuple type having two values.  This can be
    //       viewed by printing the contents of immutMap in the following 2 lines of code, which
    //       both print identical results--all elements (tuples) contained in immutMap...
    immutMap.foreach(print); println     // PRINTS: (5,five)(1,one)(2,two)(3,three)(4,four)
    for (map <- immutMap) { print(map) } // PRINTS: (5,five)(1,one)(2,two)(3,three)(4,four)

    // To use a mutable Map, declare it by specifying the mutable.Map type like this...
    var mutMap:mutable.Map[String, Int] = mutable.Map("one" -> 1, "two" -> 2, "three" -> 3)
    println("\n\nG) " + mutMap) // PRINTS: G) Map(one -> 1, three -> 3, two -> 2)

    // Obtain all elements from mutMap that are NOT the ("three" -> 3) pair.
    // NOTE: In the following line of code, replacing ("three" -> 3) with ("three", 3)
    //       obtains the identical results...
    mutMap = mutMap.filterNot(x => x == ("three" -> 3))
    println("H) " + mutMap) // PRINTS: H) Map(one -> 1, two -> 2)

    // By calling the map() method as shown on the following line of code,
    // we transform the (one -> 1, two -> 2) contents of mutMap to
    // an ArrayBuffer.  If this same map() method was called on an
    // immutable.Iterable[Int] type instead, the map() method would
    // have returned a value of List(2, 4) instead of ArrayBuffer(2, 4).
    var arrayBuf:mutable.Iterable[Int] = mutMap.map(tuple => tuple._2 * 2)
    println("I) " + arrayBuf) // PRINTS: I) ArrayBuffer(2, 4)

    // The following for() comprehension returns the identical result
    // as does calling the mutMap.map() method immediately above.
    arrayBuf = for ((key, value) <- mutMap) yield value * 2
    println("J) " + arrayBuf) // PRINTS: J) ArrayBuffer(2, 4)

    mutMap = mutMap.map(tuple => tuple._1 -> tuple._2 * 2)
    println("K) " + mutMap) // PRINTS: K) Map(one -> 2, two -> 4)
    mutMap = for((key, value) <- mutMap) yield (key -> value * 2)
    println("L) " + mutMap) // PRINTS: L) Map(one -> 4, two -> 8)
  }
}
==========================================================================================
