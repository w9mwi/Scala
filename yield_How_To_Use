// ----------------------------------------------------------
// ----------------------------------------------------------
// for() loop examples that return a "yield" value...
// In Scala, yield is part of for() loop comprehensions.
// For each iteration of your for loop, yield generates a value
// which will be remembered.  It's like the for loop has a buffer
// you canâ€™t see, and for each iteration of your for loop another
// item is added to that buffer.  When your for loop finishes
// running, it will return this collection of all the yielded
// values.  The type of the collection that is returned is the
// same type that you were iterating over, so a Map yields a
// Map, a List yields a List, and so on.
//
// Also, note that the initial collection is not changed; the
// for/yield construct creates a new collection according to
// the algorithm you specify.
// *******************************************************************
object Demo
{
  def main(args: Array[String])
  {
    // NOTE: To determine the data type of numList below. using the
    //       IntelliJ IDE, place the cursor on the text numList, then
    //       press both the 'Alt' and '=' keys simultaneously.  Doing
    //       so reveals the data type of numList is:  List[Int]
    val numList = List(1, 2, 3, 4, 5)

    // The following for() loop will yield a List[Int] containing all
    // numbers in numList multiplied by 10.  This result will then
    // get set into result.
    val result = for (x <- numList) yield (x * 10)
    result.foreach(println)
  }
}
// *******************************************************************
object Demo
{
  def main(args: Array[String])
  {

    // NOTE: To determine the data type of numList below. using the
    //       IntelliJ IDE, place the cursor on the text numList, then
    //       press both the 'Alt' and '=' keys simultaneously.  Doing
    //       so reveals the data type of numList is:  List[Int]
    val numList = List(1,2,3,4,5,6,7,8,9,10);

    // The following for() loop will yield a List[Int] containing all
    // numbers in numList EXCEPT 3, 8, 9, and 10.  This result will
    // then get set into retVal.
    var retVal = for { number <- numList if number != 3; if number < 8 } yield number

    // Print all numbers in retVal...
    for (number <- retVal)
    {
      println(number);
    }

    // The following line of code does exactly the same as the
    // above for() loop--it prints all numbers in retVal.
    retVal.foreach(println)
  }
}
// *******************************************************************
