A Scala object is a type of class that can have NO MORE THAN ONE INSTANCE.  Therefore,
a Scala object is known as a SINGLETON in object-oriented design terminology.

Everything in Scala is an object, including classes, traits, and functions.
Unlike a Scala class, a Scala object can't be passed any arguments.  This
is because an object is NEVER created using the 'new' keyword, as you
use with a class.

An object CAN extend another class, but a class CAN'T extend an object.
Objects DON'T take any parameters, but you can define fields (vals or vars),
methods, and classes within an object, as you can with regular classes.

The syntax for defining an object is as follows,
where square brackets [] contain options:

object <identifier> [extends <identifier>] [{ fields, methods, and classes }]

A Scala object is like a Java static type, in that its members and methods are
independent of any class that references the object's members or methods.  If
two different Scala classes named ClassA and ClassB both reference the same Scala
object, they will reference the object's same members and methods.  This is because
a Scala object is NOT instantiated like a Scala class.  A Scala object is
instantiated only one time--the first time it's referenced.

=============================================================================
OBJECT TYPES - Read in-line comments in the sample code below to understand
               the difference between an object type and a class type.

object Demo
{
  class Kid(name:String, age:Int)
  {
    def greeting():String = s"My name is $name, I am $age years old."
  }
  object Kid
  {
    val IS_ADULT:Boolean            = false
    val IS_COLLEGE_GRADUATE:Boolean = false
  }

  def main(args: Array[String]):Unit =
  {
    val kidClass:Kid = new Kid("Jane Train", 13)
    println(s"${kidClass.greeting}") // PRINTS: My name is Jane Train, I am 13 years old.

    // IMPORTANT: A Kid class has the type:  Kid
    //            A Kid object has the type: Kid.type
    //
    // If you uncomment the following commented-out line, it WON'T COMPILE!
    // It won't compile because kid_1 is defined as type Kid, which
    // is the type of the Kid CLASS.  And we're trying to assign Kid
    // (which is the OBJECT Kid) to a CLASS of type Kid.
    // val kid_1:Kid = Kid

    // The following line of code WILL COMPILE because kid_2 is defined
    // as type Kid.type.  Kid.type is the type of a Kid OBJECT.  Therefore,
    // Kid (which is a Kid OBJECT) can be assigned to kid_2.
    val kid_2:Kid.type = Kid
  }
}

=============================================================================
COMPANION OBJECT - When a single file contains both a class definition and an
                   object definition having IDENTICAL NAMES, the object is
                   know as a COMPANION OBJECT to that class.  Read in-line
                   comments in the sample code below for details.

object Demo
{
  // NOTE: The following Adult class definition DOESN'T have a
  //       companion object because there is no corresponding
  //       Adult object definition in this file.
  class Adult(name: String, age: Int)
  {
    def greeting(): String = s"My name is $name, I am $age years old."
    // The following 2 commented-out lines WON'T COMPILE because the
    // 2 fields they try to obtain from the Kid object are NOT public.
    // val adultStatus   = Kid.IS_ADULT
    // val collegeStatus = Kid.IS_COLLEGE_GRADUATE

    // The following line WILL COMPILE because the field
    // it obtains from the Kid object is public.
    val youngStatus = Kid.IS_YOUNG
  }

  // The following Kid class is a COMPANION CLASS to the Kid object defined below.
  class Kid(name:String, age:Int)
  {
    def greeting():String = s"My name is $name, I am $age years old."

    // The following 3 lines do compile because ALL fields, classes,
    // and methods in a class's COMPANION OBJECT are accessible from
    // that class.  The Kid object defined below is this Kid class's
    // companion object.
    val adultStatus   = Kid.IS_ADULT
    val collegeStatus = Kid.IS_COLLEGE_GRADUATE
    val youngStatus   = Kid.IS_YOUNG
  }

  // The following Kid object is a COMPANION OBJECT to the Kid class defined above.
  object Kid
  {
    protected val IS_ADULT:Boolean = false
    private   val IS_COLLEGE_GRADUATE:Boolean = false
    val IS_YOUNG:Boolean = true
  }

  def main(args: Array[String]):Unit =
  {
    // The following 2 commented-out lines WON'T COMPILE because the
    // 2 fields they try to obtain from the Kid object are NOT public.
    // val adultStatus   = Kid.IS_ADULT
    // val collegeStatus = Kid.IS_COLLEGE_GRADUATE

    // The following line WILL COMPILE because the field
    // it obtains from the Kid object is public.
    val youthStatus = Kid.IS_YOUNG

    val kidClass:Kid = new Kid("Jane Train", 13)
    println(kidClass.greeting() + s"\nyouthStatus = $youthStatus")
    // PRINTS: My name is Jane Train, I am 13 years old.
    //         youthStatus = true
  }
}

=============================================================================
object Demo
{
  object DBConnection {
    // This following apply() method is REQUIRED for this code to compile.
    def apply() = new DBConnection("www.bing.com")
    println("The object DBConnection is instantiated.")
  }
  class DBConnection(url:String) {
    println("The class DBConnection is instantiated.")
  }

  def main(args: Array[String]):Unit =
  {
    // The following line of code instantiates the object DBConnection.
    // And when the object DBConnection instantiates, its code then
    // instantiates the class DBConnection.
    val conn = DBConnection() // PRINTS: The object DBConnection is instantiated.
                              //         The class DBConnection is instantiated.
    // The following line of code instantiates ONLY the class DBConnection.
    val conn2 = new DBConnection("www.poop.com") // PRINTS: The class DBConnection is instantiated.
  }
}

================================================================================
