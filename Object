A Scala object is a type of class that can have NO MORE THAN ONE INSTANCE.  Therefore,
a Scala object is known as a SINGLETON in object-oriented design terminology.

An object can extend another class, but a class CAN'T extend an object.
Objects DON'T take any parameters, but you can define fields (vals or vars),
methods, and classes within an object, as you can with regular classes.

The syntax for defining an object is as follows,
where square brackets [] contain options:

object <identifier> [extends <identifier>] [{ fields, methods, and classes }]

An Scala object is like a Java static type, in that its members and methods are
independent of any class that references the object's members or methods.  If
two different Scala classes named ClassA and ClassB both reference the same Scala
object, they will reference the object's same members and methods.  This is because
a Scala object is NOT instantiated as are classes--Scala objects are "static."

The following sample code shows how a very simple object named Hello is used.
=============================================================================
object Demo
{
  object Hello
  {
    def hey:String = "Hey, there."
    println("The Hello object is instantiated.")
  }

  def main(args: Array[String]):Unit =
  {
    val myHello:Demo.Hello.type = Hello // PRINTS: The Hello object is instantiated.
    println(myHello.hey)                // PRINTS: Hey, there.

    val myHello_2:Demo.Hello.type = Hello // This line DOESN'T execute the println() statement contained
                                          // in the Hello object because that happens ONLY ONCE, when
                                          // the Hello object is first instantiated--in the first line
                                          // of this main() method.
    println(myHello_2.hey)                // PRINTS: Hey, there.
  }
}
=============================================================================
A Scala object name should have its first letter capitalized, just like a Scala class name.
Declaring an object creates a single object in the current scope, and it contains any members
and methods that you define within the object.

Scala objects are most commonly used as COMPANION OBLECTS to a Scala class.
A companion object is an object that HAS THE SAME NAME as the class to which
it is a companion.  The companion object has access to private members of the
companion class.  Likewise, the class can see private elements in the object.

To put that in other words, companion objects and classes are considered a
single unit in terms of access controls, so they can access each otherâ€™s
private and protected fields and methods.  BOTH the class and its companion
object should be placed in the same file.

Below is a code sample showing how to use a class (named DBConnection) that has
a companion object (named DBConnection).
NOTE: The first line of code in the main() method instantiates the object DBConnection,
      which contains an apply() method that instantiates the class DBConnection.

================================================================================
object Demo
{
  object DBConnection {
    def apply() = new DBConnection("www.bing.com")  // This apply() method is REQUIRED for the code to compile.
    println("object DBConnection is instantiated.")
  }

  class DBConnection(url:String) {
    println("class DBConnection is instantiated.")
  }

  def main(args: Array[String]):Unit = {
    val conn = DBConnection() // PRINTS: object DBConnection is instantiated.
                              //         class DBConnection is instantiated.

    // The following line of code instantiates ONLY the class DBConnection;
    // so conn2 DOESN'T reference or have access to the object DBConnection.
    val conn2 = new DBConnection("www.poop.com") // PRINTS: class DBConnection is instantiated.
  }
}
================================================================================

Everything in Scala is an object, including classes, traits, and functions.
Unlike a Scala class, a Scala object can't be passed any arguments!
This is because an object is NEVER created using the 'new' keyword, as you
use with a class.

To use a Scala object's members or methods, you precede the member or method with the
name of the object followed by the period (.) character, the same way you reference
class members and methods.

A top-level object declaration defines an entry point to a Scala application if it
contains a method defined with this name and signature: main(Array[String])
Here's an example...

object Demo
{
  var myStuff:Float = -123.987F

  def getMyStuff():Float = Demo.myStuff
  def setMyStuff(value:Float):Unit = { Demo.myStuff = value }

  def main(args: Array[String]):Unit =
  {
    println(Demo.myStuff)     // PRINTS: -123.987
    println(Demo.getMyStuff)  // PRINTS: -123.987
    setMyStuff(987.666F)
    println(Demo.myStuff)     // PRINTS: 987.666
    println(Demo.getMyStuff)  // PRINTS: 987.666
    Demo.myStuff = -666.666F
    println(Demo.myStuff)     // PRINTS: -666.666

    // Here we call the Demo2 object...
    val demo2 = Demo2
    demo2.main
  }
}

object Demo2
{
  // From this Demo2 object we reference the Demo object, and its Demo.myStuff value...
  val myDemo = Demo
  def main():Unit =
  {
    // Print the Demo.myStuff value of the above-defined Demo object,
    // from this Demo2 object.
    println(Demo.myStuff)   // PRINTS: -666.666
    println(myDemo.myStuff) // PRINTS: -666.666
  }
}

=============================================================================

NOTE: In the Scala API documentation...
      1) A circled 'c' represents a class
      2) A circled 'o' represents an object
      3) A circled 't' represents a trait.
