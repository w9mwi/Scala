A Scala object is a type of class that can have NO MORE THAN ONE INSTANCE.  Therefore,
a Scala object is known as a SINGLETON in object-oriented design terminology.

An object can extend another class, but a class CAN'T extend an object.
Objects DON'T take any parameters, but you can define the fields, methods,
and classes within an object, as you can with regular classes.

The syntax for defining an object is as follows,
where square brackets [] contain options:

object <identifier> [extends <identifier>] [{ fields, methods, and classes }]

The following sample code shows how a very simple object named Hello is used.
==============================================
object Demo
{
  object Hello
  {
    def hey:String = "Hey, there."
    println("This line executes when the Hello object is instantiated.")
  }

  def main(args: Array[String]):Unit =
  {
    val myHello:Demo.Hello.type = Hello // PRINTS: This line executes when the Hello object is instantiated.
    println(myHello.hey)                // PRINTS: Hey, there.
  }
}

==============================================
Everything in Scala is an object, including classes, traits, and functions.
Unlike a Scala class, a Scala object can't be passed any arguments!
This is because an object is NEVER created using the 'new' keyword, as you
use with a class.

A Scala object is somewhat similar to a Scala class.  Just as it's convention for
a Scala class name to have its first letter capitalized, a Scala Object name should
also have its first letter capitalized.  Declaring an object creates a single object
in the current scope, and it contains any members and methods that you define within
the object.

An Scala object is like a Java static type, in that its members and methods are
independent of any class that references the object's members or methods.  If
two different Scala classes named ClassA and ClassB both reference the same Scala
object, they will reference the object's same members and methods.  This is because
a Scala object is NOT instantiated as are classes--Scala objects are "static."

To use a Scala object's members or methods, you precede the member or method with the
name of the object followed by the period (.) character, the same way you reference
class members and methods.

A top-level object declaration defines an entry point to a Scala application if it
contains a method defined with this name and signature: main(Array[String])
Here's an example...

object Demo
{
  var myStuff:Float = -123.987F

  def getMyStuff():Float = Demo.myStuff
  def setMyStuff(value:Float):Unit = { Demo.myStuff = value }

  def main(args: Array[String]):Unit =
  {
    println(Demo.myStuff)     // PRINTS: -123.987
    println(Demo.getMyStuff)  // PRINTS: -123.987
    setMyStuff(987.666F)
    println(Demo.myStuff)     // PRINTS: 987.666
    println(Demo.getMyStuff)  // PRINTS: 987.666
    Demo.myStuff = -666.666F
    println(Demo.myStuff)     // PRINTS: -666.666
  }
}

object Demo2
{
  val myDemo = Demo
  def main(args: Array[String]):Unit =
  {
    // Print the Demo.myStuff value of the above-defined Demo object,
    // from this Demo2 object.
    println(Demo.myStuff)   // PRINTS: -123.987
    println(myDemo.myStuff) // PRINTS: -123.987
  }
}

Scala objects are most commonly used as COMPANION OBLECTS to a Scala class.
A companion object is an object that has the same name as the class to which
it is a companion.  The companion object has access to private members of the
companion class.  Likewise, the class can see private elements in the object.
BOTH the class and its companion object should be placed in the same file.

When building a new Scala object, you may use the 'new' keyword, but it is
optional.  Building an object always call the 'new' keyword.  If you don't
use 'new' explicitly in your code, 'new' gets invoked via the object's
apply() method.

NOTE: In the Scala API documentation...
      1) A circled 'c' represents a class
      2) A circled 'o' represents an object
      3) A circled 't' represents a trait.
