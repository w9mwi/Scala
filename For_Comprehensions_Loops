
================================================================================
object Demo
{
  def main(args: Array[String]):Unit =
  {
    val range1:Range = 0 to 9
    val range2:Range = 0 until 9

    for (x <- range1) { print(x) }; println  // PRINTS: 0123456789
    for (x <- range2) { print(x) }; println  // PRINTS: 012345678

    val list1:List[Int] = List(1,2,3)
    val list2:List[Int] = List(4,5,6)
    val list3:List[Int] = List(7,8,9)

    // NOTICE: Each of the following 4 for() loops uses a different
    //         combination of parenthesis () and curly braces {}.
    for (x <- list1) ( print(x) ); println // PRINTS: 123
    for (x <- list1) { print(x) }; println // PRINTS: 123
    for {x <- list1} ( print(x) ); println // PRINTS: 123
    for {x <- list1} { print(x) }; println // PRINTS: 123

    // The following commented-out for() loop will NOT compile cuz when a for() loop executes
    // more than one statement, it REQUIRES curly braces {} instead of parenthesis ().
    // for (x <- list1; y <- list2; z <- list3) ( print(x); print(y); print(z + "-") )

    // The following for() loop REQUIRES curly braces {} cuz it executes more than one statement.
    // The following for() loop prints a total of 81 single-digit Ints ranging from 1 through 9.
    // (9 X 9 = 81)  The following for() loop prints this:
    // 147-148-149-157-158-159-167-168-169-247-248-249-257-258-259-267-268-269-347-348-349-357-358-359-367-368-369-
    for (x <- list1; y <- list2; z <- list3) { print(x); print(y); print(z + "-")}; println;

    // To iterate through any collection (like a List), you can use a foreach() statement
    // instead of using a for() loop, as shown in the following line of code.
    list1.foreach(print); println // PRINTS: 123

    // A for() loop can contain one or multiple if() statements to "filter" its results, as shown here...
    for (x <- list1 if (x > 1); if (x < 3) ) { println("x = " + x) } // PRINTS: x = 2


    // *****************************************************************************************
    // USING FOR LOOPS WITH THE YIELD KEYWORD.

    // NOTE: The variable used by the yield statement must be the same variable the
    //       for() loop uses to obtain a value.  In the following line of code
    //       that variable is x.
    var result:List[Int] = for { x <- list1 if (x > 1)} yield x
    println(result) // PRINTS: List(2, 3)

    // NOTE: The variable(s) used by the yield statement must be the same variable(s)
    //       the for() loop uses to obtain value(s).  In the following line of code
    //       those variables are: a, b, c
    result = for { a <- list1; b <- list2; c <- list3 } yield combine(a,b,c)
    // The following println(result) prints this:
    // List(12, 13, 14, 13, 14, 15, 14, 15, 16, 13, 14, 15, 14, 15, 16, 15, 16, 17, 14, 15, 16, 15, 16, 17, 16, 17, 18)
    // Those Int values are THE SUM of the single-digit Int values printed above.  For example:
    // 147-148-149-157-158-... = 1+4+7=12, 1+4+8=13, 1+4+9=14, 1+5+7=13, 1+5+8=14,...
    println(result)
  }

  def combine(a:Int, b:Int, c:Int):Int = { a + b + c }
}
================================================================================
