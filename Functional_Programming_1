object Demo
{
  def main(args: Array[String])
  {
    val intList:List[Int] = List(1, 2, 3).map(doubleFunc)
    intList.foreach(print) // PRINTS: 246
    println

    // The following line of commented-out code will NOT compile.
    // To rectify this problem, see the TWO LINES immediately below
    // that are NOT commented out.
//  val functions_1                           = Map("2X" -> doubleFunc,   "3X" -> tripleFunc)
    val functions_1:Map[String, (Int) => Int] = Map("2X" -> doubleFunc,   "3X" -> tripleFunc)
    val functions_2                           = Map("2X" -> doubleFunc _, "3X" -> tripleFunc _)

    var doubleVar = functions_1("2X") // PRINTS: 246
    var tripleVar = functions_1("3X") // PRINTS: 369
    println(doubleVar(123))
    println(tripleVar(123))

    doubleVar = functions_2("2X") // PRINTS: 246
    tripleVar = functions_2("3X") // PRINTS: 369
    println(doubleVar(123))
    println(tripleVar(123))
  }

  def doubleFunc(i:Int):Int = { i * 2 }
  def tripleFunc(i:Int):Int = { i * 3 }
}
==========================================================
object Demo
{
  def main(args: Array[String])
  {
    val intList:List[Int] = List.range(0, 12)
    var evenInts = intList.filter(isEven)
    evenInts.foreach(print)  // PRINTS: 0246810

    // Here's a second way of obtaining the identical
    // evenInts result shown above...
    evenInts = intList.filter(_ % 2 == 0)
    println
    evenInts.foreach(print)  // PRINTS: 0246810

    // Here's a third way of obtaining the identical
    // evenInts result shown above...
    evenInts = intList.filter(i => (i % 2 == 0))
    println
    evenInts.foreach(print)  // PRINTS: 0246810
  }

  def isEven(number: Int) = number % 2 == 0
}
==========================================================
object Demo
{
  type IntTuple = (Int, Int)

  def main(args: Array[String])
  {
    sayHello(helloJoe)  // PRINTS: Hey, Joe!
    println
    executeNtimes(helloJoe, 5)  // PRINTS: Hey, Joe!  Hey, Joe!  Hey, Joe!  Hey, Joe!  Hey, Joe!
    println
    executeAndPrint(sum, 7, 4)      // PRINTS: 11  (7 + 4 = 11)
    executeAndPrint(multiply, 7, 4) // PRINTS: 28  (7 * 4 = 28)

    val intTuple:IntTuple = executeTwoFunctions(sum, multiply, 7, 4)
    println("intTuple = " + intTuple) // PRINTS: intTuple = (11,28)
    println("sum(7, 4) = " + intTuple._1 +
            ", multiply(7, 4) = " + intTuple._2) // PRINTS: sum(7, 4) = 11,  multiply(7, 4) = 28
  }

  def sayHello(callback: () => Unit): Unit = { callback() }
  def helloJoe(): Unit                     = { print("Hey, Joe!  ") }

  def executeNtimes(func: () => Unit, n: Int): Unit =
  {
    for (x <- 1 to n) { func() }
  }

  def executeAndPrint(func: ((Int, Int) => Int), x:Int, y:Int):Unit =
  {
    val result:Int = func(x, y)
    println(result)
  }

  def executeTwoFunctions(f1:(Int, Int) => Int,
                          f2:(Int, Int) => Int,
                          a:Int, b:Int): IntTuple =
  {
    val result1 = f1(a, b)
    val result2 = f2(a, b)
    (result1, result2)  // EQUIVALENT TO THIS LINE OF CODE : (f1(a, b),  f2(a, b))
  }

  def sum(number1: Int, number2: Int)      = number1 + number2
  def multiply(number1: Int, number2: Int) = number1 * number2
}
==========================================================
