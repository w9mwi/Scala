==========================================================================
This sample code does the following:
1) Reads text from a file and prints that text to the screen.
2) Reads text from a file and writess that text to another file.


import java.io.{BufferedReader, File, FileReader, PrintWriter}
import scala.io.{BufferedSource, Source}

object Demo
{
  def main(args: Array[String]): Unit =
  {
    // This section reads text from a file and prints it to the screen.
    var inputFile:BufferedSource = Source.fromFile("/home/tjb/file.txt")
    // Either of the following 2 lines of code can print the contents
    // of file.txt.  But only the first line will succeed, because it will
    // spend the inputFile iterator, so the second line won't print anything.
    inputFile.foreach(print)        // PRINTS: The contents of file.txt
    for (x <- inputFile) {print(x)} // PRINTS: Nothing because the above line spends the iterator.
    inputFile.close


    // This section reads text from a file and writes that text to an output file.
    inputFile = Source.fromFile("/home/tjb/file.txt")
    val writer = new PrintWriter(new File("/home/tjb/output.txt" ))
    for (line <- inputFile.getLines())
    {
      writer.write(line + "\n")
    }
    writer.close()
    inputFile.close()
  }
}

==========================================================================

The following example shows how to read a text file with an Iterator,
and print the file's contents to the console.  Because reading/writing
files is very slow, you'll want to do all reading/writing in a single
swoop.  This is why an Iterator gets "spent", because it's designed
for efficiency.  If an Iterator was designed to be reusable, iterating
through a file would be less efficient.  And, as was just stated,
there is no good reason to iterate through a file more than once.

Just as the Array and List types are parametric (you can have
List[String], List[Char], Array[Double], Array[Any], etc.),
so are Iterators.  Source and BuferedSource are specifically
Iterator[Char].

import java.io.FileNotFoundException
import scala.io.{BufferedSource, Source}

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      // NOTE: For this program to work, create a ch8.txt file as shown on the next line.
      val filePathAndName:String = "/home/tbouril/ch8.txt"
      var fileSource:BufferedSource = Source.fromFile(filePathAndName)

      // The following line of code prints to the console the entire contents
      // of filePathAndName, exactly as it'd appear in a text editor.
      println("The fileSource Iterator is NOT SPENT because fileSource.isEmpty() = " + fileSource.isEmpty)
      println("1) fileSource.mkString = \n" + fileSource.mkString)
      println("The fileSource Iterator IS SPENT because fileSource.isEmpty() = " + fileSource.isEmpty)

      // The following line of code PRINTS NOTHING to the console because
      // the file iterator has been "spent."
      println("2) fileSource.mkString = \n" + fileSource.mkString)

      // Reinitialize fileSource so its iterator gets reset...
      fileSource = Source.fromFile(filePathAndName)

      // The type Source extends Iterator[Char], and BufferedSource extends Source.
      // That means BufferedSource and Source read one Char at a time from the file.
      // Reading Chars one at a time is inefficient--so we can use other Iterator
      // types to read files.  The code BELOW calls getLines(), which returns a type
      // of Iterator[String], which reads one line of text (as a String) at a time.
      val fileContents:Iterator[String] = fileSource.getLines
      println("3) fileContents.foreach(println) = ")
      // The following line of code prints to the console the entire contents
      // of filePathAndName, exactly as it'd appear in a text editor.
      println("The fileContents Iterator is NOT SPENT because fileContents.isEmpty() = " + fileContents.isEmpty)
      fileContents.foreach(println)
      println("The fileContents Iterator IS SPENT because fileContents.isEmpty() = " + fileContents.isEmpty)

      // The following line of code PRINTS NOTHING to the console because
      // the fileContents iterator has been "spent."
      println("4) fileContents.mkString = " + fileContents.mkString)
      fileSource.close // Close the file because we're done using it.
    }
    catch
      { case fnfe:FileNotFoundException => println("File Not Found, Jack!") }
  }
}

==========================================================================================

The following code shows how to...
1) Read a comma-delimited matrix of numbers stored in a text file.
2) Convert that text matrix into an two-dimensional Array of type Double.

import java.io.FileNotFoundException
import scala.io.Source

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      // NOTE: The identityMatrix.txt file referenced below contains the following text.
      //       Where there MUST NOT be any chars after the final 0 char shown below.
      //       1.0, 0.0, 0.0,
      //       0.0, 1.0, 0.0,
      //       0.0, 0.0, 1.0
      val filePathAndName:String = "/home/tbouril/identityMatrix.txt"

      // The following delimiterString (" *, *") means zero or more
      // space chars. (' ') occur BEFORE the comma, AND zero or more
      // space chars. (' ') occur AFTER the comma.
      val delimiterString = " *, *"

      // The following call to fileToDataGrid() initializes the matrix val into
      // a 3X3 two-dimensional Array.  Where each element of matrix corresponds
      // to one of the 9 numbers contained in the identityMatrix.txt file...
      val matrix:Array[Array[Double]] = fileToDataGrid(filePathAndName, delimiterString)

      // PRINT the entire contents of matrix, as shown immediately below...
      printMatrixContents(matrix)
      // matrix(0)(0) = 1.0
      // matrix(0)(1) = 0.0
      // matrix(0)(2) = 0.0
      // matrix(1)(0) = 0.0
      // matrix(1)(1) = 1.0
      // matrix(1)(2) = 0.0
      // matrix(2)(0) = 0.0
      // matrix(2)(1) = 0.0
      // matrix(2)(2) = 1.0
    }
    catch
      { case fnfe:FileNotFoundException => println("File Not Found, Jack!") }
  }

  /**
    *
    */
  def fileToDataGrid(fileName:String, delim:String): Array[Array[Double]] =
  {
    // Initialize strIter so it will contains the following 3 lines of text,
    // obtained from the identityMatrix.txt file.
    // 1.0, 0.0, 0.0,
    // 0.0, 1.0, 0.0,
    // 0.0, 0.0, 1.0
    val strIter:Iterator[String] = Source.fromFile(fileName).getLines()
    dataGrid(strIter, delim)
  }

  /**
    * The lines:Iterator[String] argument passed to this function contains this text:
    * 1.0, 0.0, 0.0,
    * 0.0, 1.0, 0.0,
    * 0.0, 0.0, 1.0
    *
    * This function converts the lines argument (of type Iterator[String]) to an
    * Array[Array[Double]] type by returning the following result...
    * Array(Array(1.0, 0.0, 0.0), Array(0.0, 1.0, 0.0), Array(0.0, 0.0, 1.0))
    */
  def dataGrid(lines:Iterator[String], delim:String): Array[Array[Double]] =
  {
    val result:Array[Array[Double]] = (lines.map(s=>s.split(delim).map(_.toDouble))).toArray
    result
  }

  /**
    * Print to the console the entire contents of the two-dimensional Array
    * matrix passed to this function.
    */
  def printMatrixContents(matrix:Array[Array[Double]]): Unit =
  {
    var rowIndex:Int = 0
    var columnIndex:Int = 0
    for (row <- matrix)
    {
      columnIndex = 0
      for (number <- row)
      {
        println("matrix(" + rowIndex + ")(" + columnIndex + ") = " + number)
        columnIndex += 1
      }
      rowIndex += 1
    }
  }
}

==========================================================================================
import java.io.{File, FileNotFoundException}
import java.util.Scanner

import scala.io.{BufferedSource, Source}

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      // NOTE: The identityMatrix.txt file referenced below contains the following text.
      //       Where there MUST NOT be any chars after the final 0 char shown below.
      //       1.0, 0.0, 0.0,
      //       0.0, 1.0, 0.0,
      //       0.0, 0.0, 1.0
      val filePathAndName:String = "/home/tbouril/identityMatrix.txt"

      // Below we use the Java Scanner class to read from the file one "word"
      // at a time, and print it to the console.  Where "word" is any text
      // string separated by the delimiter.  If you don't specify a delimiter
      // (as is done below by calling useDelimiter()), the default delimiter
      // is whitespace (a space char, tab char, etc.).  FYI, calling the
      // Calling the reset() method sets the Scanner to the default delimiter
      // (whitespace).
      val scan:Scanner = new Scanner(new File(filePathAndName))

      // Set the delimiter pattern for the file we're reading.  The following delimiter
      // pattern (" *, *") means that zero or more space chars can occur BEFORE the
      // comma, AND zero or more space chars can occur AFTER the comma.
      scan.useDelimiter(" *, *")

      // The following while() loop prints the contents of scan with
      // a single space char after each number, as is shown below...
      while (scan.hasNext) { print(scan.next() + " ") }
      // PRINTS: 1.0 0.0 0.0
      //         0.0 1.0 0.0
      //         0.0 0.0 1.0

        // The following while() loop prints NOTHING because the scan iterator is "spent."
      while (scan.hasNext) { print(scan.next() + " ")}

      scan.close() // Close the Scanner when done using it.

      // Instead of reading text from a file, the following line of code reads text from
      // a URL.  This text is then converted to a string and printed to the console.
      val yahooText:BufferedSource = Source.fromURL("https://www.yahoo.com/")
      println(yahooText.mkString)

      // The following println PRINTS NOTHING because the yahooText iterator
      // was "spent" in its above call to mkString
      println(yahooText.mkString)
    }
    catch
      { case fnfe:FileNotFoundException => println("File Not Found, Jack!") }
  }
}

==========================================================================================
import java.io.{FileNotFoundException, FileWriter, PrintWriter}
import scala.io.{BufferedSource, Source}

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      val filePathAndName:String = "/home/tbouril/output.txt"

      // Create a new file, then write 5 random numbers to it,
      // where each number is followed by a single-space char.
      var pw = new PrintWriter(filePathAndName)
      for (idx <- 1 to 5) { pw.print(math.random + " ") }
      pw.flush(); // flush the PrintWriter before it's used again below.

      // Next, append 5 integers to the existing output.txt file created above.
      // The "true" Boolean parameter below prevents the file from being overwritten
      // if it already exists, so all new data will be APPENDED to existing data.
      pw = new PrintWriter(new FileWriter(filePathAndName, true))
      for (idx <- 1 to 5) { pw.print(idx + " ") }
      pw.flush(); // Always flush the PrintWriter before closing it.
      pw.close(); // Always close the PrintWriter when done using it.

      // Open the output.txt file that was created above,
      // and print its contents to the console window.
      val fileSource:BufferedSource = Source.fromFile(filePathAndName)
      val stringOfNumbers:String = fileSource.mkString.map(replaceChar)
      fileSource.close() // Close the file when done using it.
      println(stringOfNumbers)
      // NOTE: The first 5 numbers printed will be different than the ones shown below, as they're random numbers.
      // PRINTS: 0.648140024571042
      //         0.40746398975208087
      //         0.31017414471515214
      //         0.5752929936068312
      //         0.6250777711271934
      //         1
      //         2
      //         3
      //         4
      //         5

      // NOTE: It may be difficult to understand the replaceChar() function because
      //       in its definition below it appears to not take an argument, and it
      //       appears to return a function.  In reality, replaceChar() is passed
      //       a Char, and returns a Char.  Notice how the replaceChar() function is
      //       passed to the map() function above, and how it's called here...
      val myChar:Char = replaceChar(' ')
      println(myChar) // Prints the newline char ('\n'), which is invisible.
    }
    catch
      { case fnfe:FileNotFoundException => println("File Not Found, Jack!") }

    /**
      * This function gets passed a Char value and returns a Char value.
      * NOTICE the unconventional-looking syntax for this function!!!
      *
      * @return a newline ('\n') Char when passed a space (' ') Char;
      *         otherwise, return the same Char passed to this function.
      */
    def replaceChar:(Char => Char) =
    {
      (myChar:Char) => (if (myChar == ' ') '\n' else myChar)
    }
  }
}

==========================================================================================
import java.io.{FileNotFoundException, PrintWriter}
import scala.io.{BufferedSource, Source}

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      // NOTE: This program won't work unless you first create the input.txt file.
      //       shown below.  The input.txt file should contain multiple lines of
      //       mostly lower-case chars.  This program will then convert all those
      //       chars to upper-case, and write the results to the output.txt file.
      val inFile:String  = "/home/tbouril/input.txt"
      val outFile:String = "/home/tbouril/output.txt"

      // The literal function c=>c.toUpper is what's used to convert
      // all lower-case chars to upper-case chars.
      convertFile(inFile, outFile, c=>c.toUpper)
    }
    catch
      { case fnfe:FileNotFoundException => println("File Not Found, Jack!") }
  }

  /**
    * This function reads from the infile param passed to this method,
    * converts all its lower-case chars to upper-case chars, and then
    * writes the results to the outfile param passed to this method.
    *
    * @param inFile - An input file that contains text.
    * @param outFile - An output file that contains text copied from the inFile.
    * @param trans - A literal function that converts a char to uppercase.
    */
  def convertFile(inFile:String, outFile:String, trans:Char=>Char): Unit =
  {
    val pw:PrintWriter    = new PrintWriter(outFile)
    val in:BufferedSource = Source.fromFile(inFile)

    // The following for() loop reads each char (one-by-one) from the
    // inFile.  It then converts each lower-case char to upper-case
    // (if applicable), and writes all chars (whether converted to
    // lower-case or not) to the outfile.
    for (char <- in) { pw.print(if (char >= 'a' && char <= 'z') trans(char) else char) }
    in.close();  pw.close();  // Close the input and output files.
  }
}

==========================================================================================
import scala.io.Source

object Demo
{
  // The following defined type NameData is a tuple that corresponds to data
  // data values contained in every line of text in the WI.TXT file, which
  // this program reads from.
  type NameData = (String, Int, String, Int) // Corresponds to: (sex, year, name, numberBorn)

  def main(args: Array[String]) =
  {
    // Each line of the WI.TXT file (that is read from below) contains a comma-delimited
    // string of data in this format:  stateAbbreviation, sex, year, name, numberBorn
    // The following is a snippet of text from the WI.TXT file:
    // WI,F,1910,Mary,260
    // WI,F,1910,Helen,252
    // WI,F,1910,Margaret,244
    // WI,F,1910,Dorothy,207
    // WI,F,1910,Evelyn,186
    // WI,F,1910,Alice,165
    // WI,F,1910,Ruth,162
    // WI,F,1910,Mildred,147
    // WI,F,1910,Marie,145
    // WI,F,1910,Florence,134
    // WI,M,1958,Thomas,1445
    // WI,F,1959,Rose,100
    // WI,F,1959,Mary,1775
    // WI,F,1960,Pam,69
    // WI,F,1960,Roxanne,69
    // WI,F,1960,Sheryl,69
    val fileName:String = "/home/tbouril/software_dev/scala/ScalaData/WI.TXT"

    // The following line of code reads every line of text from the WI.TXT file
    // into nameArray.  The number of elements in nameArray will equal the number
    // of lines (rows) of text in the WI.TXT file.
    val nameArray:Array[String]  = Source.fromFile(fileName).getLines().toArray
    println("nameArray.length = " + nameArray.length + " (Equals the number of lines in the WI.TXT file.)")

    // The following line of code calls the map() function on every element of nameArray,
    // and returns an Array of type NameData.  The nameData Array will contains the same
    // number of elements as nameArray.  But the nameData Array has elements of type NameData.
    val nameData:Array[NameData] = nameArray.map(parseLine)
    println("nameData.length = " + nameData.length)

    // Set the following 3 vals to the sex, year, and name you want to filter on.
    val sex:String  = "M"
    val year:Int    = 1958
    val name:String = "Thomas"

    // The following line of code filters the nameData Array on the sex, year, and name
    // defined above.  The filteredData Array will get assigned the filtered result.
    // Since only one line of text in WI.TXT can possibly match the filter settings,
    // the filteredData Array will contain either 0 elements (if no data matches the
    // filter) or 1 element.
    var filteredData:Array[NameData] = nameData.filter(data => data._1.equalsIgnoreCase(sex) &&
                                                       data._2 == year &&
                                                       data._3.equalsIgnoreCase(name))
    if (filteredData.length == 1)
    { println("Year = " + year + ", Sex = " + sex + ", Name = " + name + ", Number Born = " + filteredData(0)._4) }
    else
    { println("No data found for Year = " + year + ", Sex = " + sex + ", Name = " + name) }

    // Filter the nameData Array on females born in 1959.
    filteredData = nameData.filter(data => data._1 == "F"  &&  data._2 == 1959)
    println("Number of females born in 1959 = " + filteredData.length)

    // For all the elements contained in filteredData, obtain the maximum number contained
    // in the tuple's 4th element.  We'll use this mostPopular Int value below.
    var mostPopular:Int = filteredData.map(_._4).max

    // Print the NameData for the most common female name(s) born in 1959.
    println("The most popular female names of 1959 are: ")
    filteredData.filter(_._4 == mostPopular).foreach(println)

    // Print the NameData for all female names occurring 100 times and born in 1959.
    println("List of all females names born in 1959, where the total born was 100:")
    filteredData = nameData.filter(x => x._1 == "F"  &&  x._2 == 1959  &&  x._4 == 100)
    filteredData.foreach(println)
  }

  /**
    * Pass this function a single line of text read from the WI.TXT file.
    * Return 4 values of data from that line of text as the tuple defined
    * by NameData at the top of this program.
    */
  def parseLine(line:String): NameData =
  {
    // The following line of code reads 5 data values (delimited by 4 commas) from
    // the line of text passed to this function into the data Array.  This means
    // the data Array will contain 5 elements, one element for each piece of data.
    val data:Array[String] = line.split(",")

    // Construct a NameData type (defined at the top of this program) from
    // the data Array.  NOTE: We don't use the first element of the data Array
    // (data(0)) because that's the state abbreviation, which we don't need.
    val nameData:NameData = (data(1), data(2).toInt, data(3), data(4).toInt)
    nameData
  }
}
==========================================================================================
