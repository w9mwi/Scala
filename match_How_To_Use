HOW TO USE THE match KEYWORD
=============================================================
import scala.annotation.switch

object Demo
{
  def main(args: Array[String]): Unit =
  {
    var monthNumber = 7;
    // NOTE:  Use @switch to issue possible warning at compile time AND to improve performance.
    (monthNumber: @switch) match
    {
      case 1  => println("January")
      case 2  => println("February")
      case 3  => println("March")
      case 4  => println("April")
      case 5  => println("May")
      case 6  => println("June")
      case 7  => println("July")
      case 8  => println("August")
      case 9  => println("September")
      case 10 => println("October")
      case 11 => println("November")
      case 12 => println("December")
      // If monthNumber is invalid, catch it and print it...
      case error => println("Invalid month number: " + error.toString)
    }

    monthNumber = 77

    // NOTE:  Use @switch to issue possible warning at compile time AND to improve performance.
    val monthName:String = (monthNumber: @switch) match
    {
      case 1  => "January"
      case 2  => "February"
      case 3  => "March"
      case 4  => "April"
      case 5  => "May"
      case 6  => "June"
      case 7  => "July"
      case 8  => "August"
      case 9  => "September"
      case 10 => "October"
      case 11 => "November"
      case 12 => "December"
      case _  => "Invalid Month"  // the default, catch-all
    }
    println(s"monthNumber = $monthNumber,  monthName = $monthName")
  }
}
=============================================================
object Demo
{
  def main(args: Array[String])
  {
    val alice   = new Person("Alice",   25)
    val bob     = new Person("Bob",     32)
    val charlie = new Person("Charlie", 44)
    val tom     = new Person("Tom",    999)

    for (person <- List(alice, bob, charlie, tom))
    {
      person match
      {
        case Person("Alice",   25) => println("Hi Alice!")
        case Person("Bob",     32) => println("Hi Bob!")
        case Person("Charlie", 44) => println("Hi Charlie!")
        case Person(name,   age)   => println("Hi " + name + "!" + "  Age = " + age)
      }
    }

    // This prints the data for each instantiated class of type Person.
    // This data was automatically created by Scala when these Person
    // classes were instantiated.  The programmer did NOT have to
    // write any code to create and initialize local "name" and age "vals".
    println()
    println("alice.name = "   + alice.name   + ", alice.age = "   + alice.age)
    println("bob.name = "     + bob.name     + ", bob.age = "     + bob.age)
    println("charlie.name = " + charlie.name + ", charlie.age = " + charlie.age)
    println("tom.name = "     + tom.name +     ", tom.age = "     + tom.age)
  }

  // NOTE: When a "case class" is used in this program, a "name" and "age"
  //       field are created, and instantiated by default.
  //       Setter methods are generated for case classes ONLY WHEN "var" is specified
  //       in the constructor argument, in which case you get the same getter/setter
  //       generation as regular classes
  case class Person(val name:String, val age:Int)
}
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
=============================================================
