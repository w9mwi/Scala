import scala.collection.immutable.NumericRange
import scala.collection.immutable

object Demo
{
  def main(args: Array[String]):Unit =
  {
    println("PART 1) ================================")
    val number = 54321L
    println("isPrime(" + number + ") = " + isPrime(number))

    println("PART 2) ================================")
    val list_1:List[Int]   = List(9, 8, 7, 6, 5)
    val list_2:List[Int]   = List(10, 11, 12)
    val list_3:List[Int]   = List(13, 14, 15, 16)
    val array_1:Array[List[Int]] = Array(list_1, list_2, list_3)
    for (list <- array_1) // Loops through each element of array_1
    {
      // Prints all Int numbers in list_1, then in list_2, then in list_3.
      list.foreach(println) // PRINTS: 9 8 7 6 5 10 11 12 13 14 15 16
    }

    // PART 3) below prints the IDENTICAL results as PART 2) above...
    println("PART 3) ================================")
    val result_1:Array[Int] = array_1.flatten // result_1 = Array(9, 8, 7, 6, 5, 10, 11, 12, 13, 14, 15, 16)
    result_1.foreach(println) // PRINTS: 9 8 7 6 5 10 11 12 13 14 15 16

    println("PART 4) ================================")
    val array_2:Array[Int] = Array(22, 33, 44)
    val array_3:Array[Int] = Array(55, 66, 77)
    val array_4:Array[Int] = Array(88, 99)
    val list_4:List[Array[Int]] = List(array_2, array_3, array_4)
    for (array <- list_4) // Loops through each element of list_4
    {
      // Prints all Int numbers in array_2, then in array_3, then in array_4
      array.foreach(println) // PRINTS: 9 8 7 6 5 10 11 12 13 14 15 16
    }

    // PART 5) below prints the IDENTICAL results as PART 4) above...
    println("PART 5) ================================")
    val result_2:List[Int] = list_4.flatten // result_2 = List(22, 33, 44, 55, 66, 77, 88, 99)
    result_2.foreach(println) // PRINTS: 22 33 44 55 66 77 88 99

    println("PART 6) ================================")
    val list_5:List[List[Int]] = List(list_1, list_2, list_3)
    val result_3 = list_5.flatten.map(x=>x*x)
    result_3.foreach(println) // PRINTS: 81 64 49 36 25 100 121 144 169 196 225 256

    // The following 2 lines of code are used for nothing at this time.
    val immutSet:immutable.Set[Int] = immutable.Set(9, 8, 7, 6, 5)
    val immutSet_2:immutable.Set[Int] = immutable.Set(1, 8, 7, 6, 5)
  }

  /**
    * Determine if a Long value is or isn't prime.
    * @param number
    * @return
    */
  def isPrime(number:Long):Boolean =
  {
    // NOTE: NumericRange is a more generic version of the Range class,
    //       as it's a parametric function that can work with different
    //       data types (Int., Long, BigInt).
    var numericRange = NumericRange(2L, number, 1L)

    // Test ALL elements of numericRange.  If ALL elements of numericRange
    // cannot be divided by 2, true is returned.  Otherwise, false is returned.
    numericRange.forall(number % _ != 0)
  }
}
