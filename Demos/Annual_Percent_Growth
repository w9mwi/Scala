[PART 1 OF 2] - ANNUAL PERCENTAGE GROWTH USING AN ArrayBuffer
=============================================================
The sample program immediately BELOW this program generates
identical results, but instead uses an Array.


import scala.collection.mutable.ArrayBuffer
object Demo
{
  def main(args: Array[String])
  {
    val yearRange:Range = 1 to 150
    val annualPercentGrowthRate:Float = 2.0F

    // Print the header.
    println("\nYEAR  | UNITS CONSUMED | ANNUAL PERCENT GROWTH RATE")
    println("---------------------------------------------------")

    // Calling zipWithIndex on the calculate() method transforms
    // data type:      ArrayBuffer[Float]
    // into data type: ArrayBuffer[(Float, Int)]
    // Where Int corresponds to the index value.
    val resultArrayBuf:ArrayBuffer[(Float, Int)] =
      calculate(annualPercentGrowthRate * 0.01F, yearRange).zipWithIndex
    // Print contents of entire resultArrayBuf.
    resultArrayBuf.foreach{ x => printResult(x, annualPercentGrowthRate) }
  }

  def calculate(annualRate:Float, yearRange:Range):ArrayBuffer[Float] =
  {
    val resultArrayBuf:ArrayBuffer[Float] = new ArrayBuffer()

    // For each year in yearRange, add an element to resultArrayBuffer.
    // Then populate that element with the calculated result.
    for (idx <- yearRange)
    {
      if (resultArrayBuf.size == 0)
        resultArrayBuf += 1.0F  // Add the first element to the resultArrayBuf.
      else {
        // Calculate result, then assign it to a new element in resultArrayBuf.
        val resultInPreviousArrayElement:Float = resultArrayBuf(resultArrayBuf.size - 1)
        resultArrayBuf += (resultInPreviousArrayElement * annualRate) + resultInPreviousArrayElement
      }
    }
    resultArrayBuf
  }

  def printResult(result:(Float, Int),  annualPercentGrowthRate:Float):Unit =
  {
    val floatResult:Float = result._1
    val indexResult:Int   = result._2 + 1

    if (indexResult < 10)
      printf("%d     | %14.2f | %5.2f\n", indexResult, floatResult, annualPercentGrowthRate)
    else if (indexResult < 100)
      printf("%d    | %14.2f | %5.2f\n", indexResult, floatResult, annualPercentGrowthRate)
    else if (indexResult < 1000)
      printf("%d   | %14.2f | %5.2f\n", indexResult, floatResult, annualPercentGrowthRate)
    else
      printf("%d  | %14.2f | %5.2f\n", indexResult, floatResult, annualPercentGrowthRate)
  }
}

======================================================================================
[PART 2 OF 2] - ANNUAL PERCENTAGE GROWTH USING AN Array
=======================================================
The sample program immediately ABOVE this program generates
identical results, but instead uses an ArrayBuffer.

object Demo
{
  def main(args: Array[String])
  {
    val yearRange:Range = 1 to 150
    val annualPercentGrowthRate:Float = 2.0F

    // Print the header.
    println("\nYEAR  | UNITS CONSUMED | ANNUAL PERCENT GROWTH RATE")
    println("---------------------------------------------------")

    // Calling zipWithIndex on the calculate() method transforms
    // data type:      Array[Float]
    // into data type: Array[(Float, Int)]
    // Where Int corresponds to the index value.
    val array:Array[(Any, Int)] = (new Array(yearRange.size)).zipWithIndex
    calculate(array, annualPercentGrowthRate*0.01F)
    array.foreach{ x => printResult(x._1, x._2, annualPercentGrowthRate) }
  }

  /**
   *  NOTE: Each element of the array passed to this method holds a tuple of type: (Any, Int)
   *        The Any value stores the result as a Float, and the Int stores the array index.
   */
  def calculate(array:Array[(Any, Int)], percent:Float):Unit = {
    for (x <- array) {
      if (x._2 == 0) // x._2 stores the index of the current array element.
        array(0) = (1.0F, 0) // Set the first element of the array tuple, which ALWAYS = (1.0F, 0)
      else {
        // Calculate the result for the current array element and set it.
        val resultInPreviousArrayElement:Float = array(x._2 - 1)._1.asInstanceOf[Float]
        val currentResult:Float = (resultInPreviousArrayElement * percent) + resultInPreviousArrayElement
        array(x._2) = (currentResult, x._2)
      }
    }
  }

  def printResult(result:Any, index:Int, annualPercentGrowthRate:Float):Unit =
  {
    val floatResult:Float = result.asInstanceOf[Float]

    if (index < 10)
      printf("%d     - %14.2f - %5.2f\n", index, floatResult, annualPercentGrowthRate)
    else if (index < 100)
      printf("%d    - %14.2f - %5.2f\n", index, floatResult, annualPercentGrowthRate)
    else if (index < 1000)
      printf("%d   - %14.2f - %5.2f\n", index, floatResult, annualPercentGrowthRate)
    else
      printf("%d  - %14.2f - %5.2f\n", index, floatResult, annualPercentGrowthRate)
  }
}

======================================================================================

