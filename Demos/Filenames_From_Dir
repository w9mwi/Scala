This program demonstrates the following:

1) How to execute a Linux script file in Scala.
2) How to read and write files in Scala.
3) How to rename (move) files in Scala.

The Scala program below will change all filenames that end with
the text ".mp3" and ".wav", and are located in this directory:

val dirPath:String = "/home/tjb/junkDir/"

The above line of code is taken from the main() method in the following
program.  So all .mp3 and .wav files in the directory "/home/tjb/junkDir/"
will be changed in this manner:

1) The ".mp3" and ".wav" text is NOT case sensitive.  So filenames ending with
   ".mp3", ".mP3", ".wav", ".WaV", etc. will be changed.  After the filename
   is changed, the ".mp3" and ".wav" text will become all lower case characters.

2) All whitespace characters will be removed from the filename and replaced
   with the underscore (_) character.  However, multiple consecutive whitespace
   characters will be replaced with only a single underscore (_) character.

3) Multiple consecutive underscore (_) characters will be replaced
   with a single underscore (_) character.

4) After the filename is changed, the first character of the filename will never
   be an underscore (_) character.  The character immediately before the ".mp3"
   or ".wav" text will also never be an underscore (_) character.

5) All alpha characters in the changed filename will be lower case,
   with these two exceptions:

   * When the first character in the changed filename is an alpha
     character, it will be upper case.
   * Every alpha character that appears immediately after an underscore
     (_) character will be changed to upper case.

EXAMPLES:
This filename:       '  ____ aBc _ _ _ _dEF__ ghi  ___JKL____.wAV'
Will be changed to:  Abc_Def_Ghi_Jkl.wav

This filename:       ' _ 1ABC .MP3'
Will be changed to:  1abc.mp3

==============================================================================

import java.io.{File, PrintWriter}
import java.nio.file.{Files, Path, Paths, StandardCopyOption}
import scala.collection.mutable.ArrayBuffer
import scala.sys.{SystemProperties}
import sys.process._

object Demo
{
  type StringTuple = (String, String)

  def main(args: Array[String]): Unit =
  {
    // This section of code creates and executes a Linux script file,
    // which contains the "ls -la" command.  Certain filenames returned
    // by that script file are then used to rename files.
    val dirPath:String = "/home/tjb/junkDir/"
    // Obtain filenames via the "ls -la" command in the linuxScriptTester.sh file.
    val linuxFilesTextList:Option[String] = executeLinuxScriptFile(dirPath)
    if (linuxFilesTextList != None)
    {
      // If this code executes, the executeLinuxScriptFile() function returned successfully.
      val fileNames:Array[String] = getMp3WavFilenames(linuxFilesTextList.get)
      val origAndNewFilenames:ArrayBuffer[StringTuple] = transformFilenames(fileNames)
      renameFiles(dirPath, origAndNewFilenames)
    }
  }

  /************************************************************************
  * Read in-line comments for details.
  ************************************************************************/
  def getMp3WavFilenames(filesInfo:String):Array[String] =
  {
    // Each element of varArray will contain each row of text returned by the "ls -la" command.
    var varArray:Array[String] = filesInfo.toString.split("\n")
    val filenameIndex:Int = getFilenameIndex(varArray)

    // *****************************************************************************
    // NOTE: This block of commented-out code could replace all the below code in
    //       this function!  But that's like drinking from a firehose, so the
    //       current code will stand for now.
    //  (for (x <- filesInfo.split("\n").drop(3).filter(x => x.startsWith("-")))
    //  yield (if (x.indexOf("'") > -1) x.substring(filenameIndex - 1) else x.substring(filenameIndex)))
    //  .filter(x => !x.startsWith("."))
    //  .filter(x => (x.toLowerCase.endsWith(".mp3") || x.toLowerCase.endsWith(".wav")))
    // *****************************************************************************

    // The first 3 lines of text returned by running the "ls -la" Linux command
    // don't contain filenames that can be changed.  So drop them.
    varArray.drop(3)
    // The first char of every file returned by the "ls -la" Linux command
    // designates the file type.  If that first char is a '-' it designates
    // a regular file (not a directory file, not a network file, etc.).
    // So obtain only regular file names.
    varArray = varArray.filter(x => x.startsWith("-"))

    // For each line of text returned by the "ls -la" Linux command, strip all leading
    // chars to obtain only the filenames.  NOTE: When a filename contains space char(s),
    // the filenameIndex value must be subtracted by one.  For details, read comments
    // in the getFilenameIndex() method.
    varArray = for (x <- varArray) yield
               (if (x.indexOf("'") > -1)
                 x.substring(filenameIndex - 1)
                else x.substring(filenameIndex))

    // In Linux, all files that begin with the period (.) character
    // are considered "hidden files".  Remove all "hidden files."
    varArray = varArray.filter(x => !x.startsWith("."))

    // Obtain ONLY filenames ending with ".mp3" or ".wav".
    varArray = varArray.filter(x => (x.toLowerCase.endsWith(".mp3") || x.toLowerCase.endsWith(".wav")))
    varArray
  }


  /************************************************************************
  * Each element of the filenameArray passed to this method contains an
  * original filename.  Each element of the ArrayBuffer returned by
  * this method contains a (String, String) tuple.  The first tuple
  * string is the original filename.  The second tuple string contains
  * the changed filename.  Read in-line comments for details.
  ************************************************************************/
  def transformFilenames(filenameArray:Array[String]): ArrayBuffer[StringTuple] =
  {
    val result:ArrayBuffer[StringTuple] = ArrayBuffer() // Fill and return this ArrayBuffer below.
    val ZERO:Char = 0 // Initialize to a char that CAN'T appear in a filename.

    for (origFilename <- filenameArray)
    {
      // Replace whitespace chars in the filename with underscore ('_') chars...
      val str:String = origFilename.replace(" ", "_").replace("\t", "_")
      // Declare a StringBuilder (which is mutable) that we use to build a new String.
      val strBuild:StringBuilder               = StringBuilder.newBuilder
      val strWithIndex:IndexedSeq[(Char, Int)] = str.zipWithIndex
      strWithIndex.foreach // Loop through the strWithIndex collection.
      {
        // For each loop, obtain currentChar from the current strWithIndex element.
        // Obtain previousChar from the previous strWithIndex element.
        x => val currentChar:Char = x._1
          val previousChar:Char = if (x._2 == 0) ZERO // Set the first element of strWithIndex to ZERO, which CAN'T exist in any filename.
          else strWithIndex(x._2 - 1)._1 // previousChar is obtained from the previous element in strWithIndex.

          // Change the filename's chars to uppercase or lowercase based on this criteria:
          // 1) The first char of the filename is always set to uppercase.  If the filename's
          //    first char is '_', setting it to uppercase won't matter.
          // 2) All chars preceded with the '_' char will be set to uppercase.
          // 3) All remaining chars will be set to lowercase.
          val myChar:Char =  if (previousChar == ZERO || (previousChar == '_' && currentChar != '_'))
            currentChar.toUpper
          else
            currentChar.toLower
          // The following if() statement transforms multiple consecutive '_' chars
          // into a single '_' char.  Ensuring that the filename will never contain
          // more than one consecutive '_' char.
          if (myChar != '_'  ||  (myChar == '_'  &&  previousChar != '_'))
            strBuild.append(myChar)
      }

      // If the char preceding the ".mp3" or ".wav" text is an underscore (_), delete it.
      val idxOfDotChar:Int = strBuild.lastIndexOf(".")
      if (strBuild.charAt(idxOfDotChar - 1) == '_')
        strBuild.deleteCharAt(idxOfDotChar - 1)

      // If the first char is an underscore (_), delete it.
      if (strBuild.charAt(0) == '_')
        strBuild.deleteCharAt(0)

      // Add the StringTuple to the ArrayBuffer.
      result += new StringTuple(origFilename, strBuild.toString())
    }
    result
  }


  /************************************************************************
  * Obtains and returns the Linux temporary directory path as a String.
  ************************************************************************/
  def getTempDirectory():Option[String] =
  {
    val sysProps:SystemProperties = new SystemProperties()
    val tempDir:Option[String] = sysProps.get("java.io.tmpdir")
    return(tempDir)
  }


  /************************************************************************
  * @param dirPath - String containing the directory path where the files exist.
  * @param origAndNewFilenames - Each element of this ArrayBuffer is a tuple of
  *                              type (String, String), which contains BOTH
  *                              the original filename and the new filename.
  ************************************************************************/
  def renameFiles(dirPath:String, origAndNewFilenames:ArrayBuffer[StringTuple]):Unit =
  {
    for (x <- origAndNewFilenames)
    {
      // The following println() is used for DEBUGGING.
      println(s"BEFORE=${x._1}\nAFTER =${x._2}\n")

      // NOTE: Both the Files class and the Paths class are Java classes.
      Files.move(Paths.get(dirPath + x._1),  // x._1 is the original filename.
                 Paths.get(dirPath + x._2),  // x._2 is the new filename.
                 StandardCopyOption.REPLACE_EXISTING)
    }
  }


  /************************************************************************
  * When the "ls -la" Linux command is run, it returns text similar to this:
  *
  * total 588
  * drwxr-xr-x 28 tjb  tjb    4096 Sep 29 15:11  ./
  * drwxr-xr-x  3 root root   4096 Dec 17  2021  ../
  * -rw-rw-r--  1 tjb  tjb       0 Sep 29 15:11  aaa.txt
  * -rw-rw-r--  1 tjb  tjb       0 Sep 29 15:05 '     ABC    XYZ    .mp3'
  * drwxrwxr-x  2 tjb  tjb    4096 Dec 18  2021  .android/
  *
  * Notice that the filenames are specified at the end of each line of text.
  * Since the "./" file is a system file that exists in every directory,
  * THIS METHOD RETURNS the Int index of the period (.) char in the "./"
  * filename.  That Int index is identical for all filenames in the list.
  *
  * WARNING: When a filename contains whitespace chars (as shown in above
  *          sample file list), the filename is surrounded by single quote
  *          (') chars.  When that occurs, we know the filename index is
  *          ONE LESS than the Int value returned by this method.  This
  *          possibility is accounted for in the getMp3WavFilenames() method,
  *          which must obtain the correct Int index of all filenames returned
  *          by the "ls -la" Linux command.
  ************************************************************************/
  def getFilenameIndex(filenames:Array[String]):Int =
  {
    filenames(1).indexOf(".")
  }


  /************************************************************************
  * This function creates a Linux script file in the Linux temporary directory.
  * That Linux script file contains the Linux "ls -la" command for the Linux
  * directory path that is passed to this function as an argument.  The script
  * file is then executed and deleted.  Its result is returned as a text String
  * in type Option[String].
  *
  * @param dirPath - The directory in which the "ls -la" Linux command is run.
  * @return - An Option[String] containing the result of the "ls -la" command.
  *           None will be returned if there's a failure.
  ************************************************************************/
  def executeLinuxScriptFile(dirPath:String):Option[String] =
  {
    val osName:String = sys.props("os.name").toLowerCase
    if (false == osName.contains("linux"))
    {
      println("FAIL - The operating system is not Linux.")
      return(None)
    }

    val tempDir:Option[String] = getTempDirectory()
    if (tempDir == None)
    {
      println("FAIL - The operating system's temporary directory not found.")
      return(None)
    }

    // Create a Linux script file in the temporary directory.
    val scriptFilename: String = tempDir.get + "/" + "linuxScriptTester.sh"
    val scriptFile: File = new File(scriptFilename)

    // Write linux command(s) to the Linux script file.
    val pw:PrintWriter = new PrintWriter(scriptFile)
    pw.print("ls -la " + dirPath + "\n")
    scriptFile.setExecutable(true) // Sets the file's Linux user permission to executable.
    pw.flush()
    pw.close()

    // Generate the "command" that'll execute the linux script file.
    val command:Seq[String] = Seq(scriptFilename)

    // Execute the linux script file...
    // NOTE: Calling command.! executes the linuxScriptTester.sh file, but
    //       directs its output to the terminal.  The following line of
    //       code is commented out because we DON'T want that behavior.
    // command.!
    //
    // Calling command.!! executes the Linux linuxScriptTester.sh
    // file, and returns the result as a String.
    val result:String = command.!!
    scriptFile.delete // Delete the Linux script file.
    Option(result)
  }
}
