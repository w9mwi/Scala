The following two code samples show how to obtain:

1) Environment Variables
2) System Properties

import scala.collection.JavaConverters._
object Demo
{
  /********************************************
   * main() function
   ********************************************/
  def main(args: Array[String])
  {
    println("1) Scala Version = " + util.Properties.versionNumberString) // PRINTS: 1) Scala Version = version 2.12.14
    println("2) Scala Version = " + util.Properties.versionString)       // PRINTS: 2) Scala Version = 2.12.14
    println("3) Scala Version = " + util.Properties.versionMsg)
    // PRINTS: 3) Scala Version = Scala library version 2.12.14 -- Copyright 2002-2021, LAMP/EPFL and Lightbend, Inc.
    println("=======================================================")
    println("PRINT ALL ENVIRONMENT VALUES:")
    var envVars = System.getenv().asScala
    for ((k,v) <- envVars) { println(s"key = $k\nvalue = $v\n") }
    println("\n=======================================================")

    println("PRINT ALL SYSTEM PROPERTIES:\n")
    var sysProps = System.getProperties().asScala
    for ((k,v) <- sysProps) { println(s"key = $k\nvalue = $v\n") }
    println("================================================")

    // Obtain a single environment value...
    println("\nUSER = " + envVars.get("USER")) // PRINTS: USER = Some(tjb)

    // Obtain a single system property...
    println("java.version = " + sysProps.get("java.version")) // PRINTS: java.version = Some(11.0.13)
  }
}

=======================================================

import scala.sys.SystemProperties

object Demo
{
  def main(args: Array[String])
  {
    // Print ALL System Properties...
    val sysProps = new SystemProperties()
    for (sp <-sysProps) { println(s"${sp._1},  ${sp._2}") }

    println("=================================")

    // Obtain some individual System Properties and print them...
    var sysProp:Option[String] = sysProps.get("user.name")
    println("user.name = " + getOptionValue(sysProp))

    sysProp = sysProps.get("os.name")
    println("os.name = " + getOptionValue(sysProp))

    sysProp = sysProps.get("user.country")
    println("user.country = " + getOptionValue(sysProp))

    // Attempt to obtain a System Property (named "junk") that doesn't exist.
    // The Option.None value will be returned.
    sysProp = sysProps.get("junk")
    println("junk = " + getOptionValue(sysProp))
  }

  def getOptionValue(opt:Option[String]): String =
  {
    if (opt == None) "None"
    else opt.get.toString
  }
}
