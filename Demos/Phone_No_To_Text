package org.tjb.scala

object Demo
{
  val keypad = Map('0' -> "0",   '1' -> "1",   '2' -> "ABC",  '3' -> "DEF", '4' -> "GHI",
                   '5' -> "JKL", '6' -> "MNO", '7' -> "PQRS", '8' -> "TUV", '9' -> "WXYZ")

  /**
   * main()
   */
  def main(args: Array[String]): Unit = {
    // Print the Scala Version used by this program.
    println("Scala Version = " + util.Properties.versionNumberString)

    val phoneNumber = "12340"
    if (false == validatePhoneNumber(phoneNumber))
      return

    val result:List[String] = letterCombinations(phoneNumber)
    println(result)
  }

  /**
   * THIS IS A RECURSIVE FUNCTION!
   *
   * @param digits - A string of digit chars ('0 to '9') that come from a phone number.
   * @return - A List[String] that contains to all possible text string permuations
   *           of a phone number.  Where those text chars are obtained from the
   *           keypad Map defined at the top of this program.
   */
  def letterCombinations(digits: String): List[String] = {
    if (digits.isEmpty) {
      List("")
    }
    else {
      val idxSeqString:IndexedSeq[String] =
        for {
          char <- keypad(digits.head)
          rest <- letterCombinations(digits.tail)
        } yield char + rest

      idxSeqString.to(List) // Convert IndexedSeq[String] to List[String]
    }
  }

  /**
   * @param phoneNumber - A String consisting of only digit characters ('0' through '9').
   * @return - false if validation fails; true otherwise
   */
  def validatePhoneNumber(phoneNumber:String):Boolean = {
    phoneNumber.foreach {
      myChar => myChar
        if (false == myChar.isDigit) {
          println(s"phoneNumber contains '$myChar', which is an invalid char.  (Must be from '0' to '9')")
          return(false)
        }
    }
    true
  }
}
