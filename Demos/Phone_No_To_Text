package org.tjb.scala

object Demo
{
  val keypadMap = Map('0' -> "0",   '1' -> "1",   '2' -> "ABC",  '3' -> "DEF", '4' -> "GHI",
    '5' -> "JKL", '6' -> "MNO", '7' -> "PQRS", '8' -> "TUV", '9' -> "WXYZ")

  /**
   * main()
   */
  def main(args: Array[String]): Unit = {
    // Print the Scala Version used by this program.
    println("Scala Version = " + util.Properties.versionNumberString)

    val phoneNumber = "4224348"
    if (false == validatePhoneNumber(phoneNumber))
      return

    val result:List[String] = buildList(phoneNumber)
    println(s"\nresult.size = ${result.size} List Elements\n$result")
  }

  /**
   * THIS IS A RECURSIVE FUNCTION!
   *
   * @param phoneNoDigits - A string of digit chars ('0 to '9') that come from a phone number.
   * @return - A List[String] that contains all possible text string permuations of a phone number.
   *           Where those text chars are obtained from the keypadMap defined above.
   */
  def buildList(phoneNoDigits: String): List[String] = {
    if (phoneNoDigits.isEmpty) {
      List("")
    }
    else {
      // The below commented-out for() loop can replace the for{} loop that follows it.
      // for (head <- keypadMap(digits.head);  tail <- buildList(digits.tail)) yield head + tail
      val idxSeqString:IndexedSeq[String] =
        for {
          head <- keypadMap(phoneNoDigits.head)
          tail <- buildList(phoneNoDigits.tail)
        } yield head + tail

      // In Scala versions BEFORE 2.13, the below line of code won't compile.
      // It would need to be replaced with this line:
      // idxSeqString (collection.breakOut)
      idxSeqString.to(List) // Convert IndexedSeq[String] to List[String]
    }
  }

  /**
   * @param phoneNumber - A String consisting of only digit characters ('0' through '9').
   * @return - false if validation fails; true otherwise
   */
  def validatePhoneNumber(phoneNumber:String):Boolean = {
    phoneNumber.foreach {
      myChar => myChar
        if (false == myChar.isDigit) {
          println(s"phoneNumber contains the invalid char: '$myChar'.  All chars must digit chars from '0' to '9')")
          return(false)
        }
    }
    true
  }
}
