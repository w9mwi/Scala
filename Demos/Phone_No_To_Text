import scala.collection.mutable.ArrayBuffer

object Demo
{
  val mapIntToString = Map(0 -> "0",   1 -> "1",   2 -> "ABC",  3 -> "DEF", 4 -> "GHI",
                           5 -> "JKL", 6 -> "MNO", 7 -> "PQRS", 8 -> "TUV", 9 -> "WXYZ")

  def main(args: Array[String]): Unit =
  {
    val strPhoneNo:String = "4224348"
    val arrBuf = new ArrayBuffer[List[Char]]()
    val arrBufResult = new ArrayBuffer[List[Char]]()

    // Populate arrBuf
    strPhoneNo.foreach {
      charInt => charInt // A Char from '0' to '9'
      arrBuf.append(buildListElement(List(charInt), Nil))
    }

    println(s"arrBuf = $arrBuf")

    val range1 = 0 until arrBuf.size
    for (idx <- range1)
    {
      val range2 = 0 until {arrBuf(idx)}.size
      for (jdx <- range2) {
        val outside = arrBuf(idx)
        val inside  = outside(jdx)
        println(s"outside = $outside,  inside = $inside")
      }

    }
  }

  /**********************************************************
   * This is a RECURSIVE FUNCTION.
   *
   * @param inputList - A List[Char] that must contain ONLY Chars '0' through '9'
   *                    because they will all be converted to Int values by invoking
   *                    the Map named mapIntToString
   * @param accum     - An accumulator argument of type List[Char] that gets built
   *                    with each recursive call to this function.
   * @return          - The accum argument.
   **********************************************************/
  def buildListElement(inputList:List[Char], accum:List[Char]):List[Char] =
  {
    // The following commented-out line is for debugging only.
    // println(s"inputList = $inputList,  accum = $accum")

    if (inputList.isEmpty) {
      accum
    }
    else {
      // The head of inputList MUST be a Char of '0' through '9'.
      // The following line of code converts that Char to an Int.
      val intIndex = inputList.head.toString.toInt
      // The following line is a RECURSIVE CALL to this function.
      buildListElement(inputList.tail, accum ++ mapIntToString(intIndex))
    }
  }
}
