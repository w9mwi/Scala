ANNUAL PERCENTAGE GROWTH RATE
=============================

import scala.collection.mutable.ArrayBuffer

object Demo
{
  def main(args: Array[String])
  {
    val yearRange:Range               = 1 to 150
    val annualPercentGrowthRate:Float = 2.0F

    println("YEAR  - UNITS CONSUMED - ANNUAL PERCENT GROWTH RATE") // Prints the header.

    // Calculate the number of units consumed for each year
    // in the yearRange, at the annualPercentGrowthRate...
    val result:ArrayBuffer[(Float, Int)] = calculate(annualPercentGrowthRate * 0.01F, yearRange)

    // Print the ArrayBuffer contents stored in the result val...
    result.foreach(x => printResult(x._1, x._2, annualPercentGrowthRate))
  }

  /**
   * Build an ArrayBuffer that will contain the same number of elements
   * in the yearRange argument passed to this function.  Return a tuple
   * of type (Float, Int).  Where the Float type represents the numerical
   * result (units consumed), and the Int type represents the year.
   */
  def calculate(annualRate:Float, yearRange:Range):ArrayBuffer[(Float, Int)] =
  {
    val result:ArrayBuffer[Float] = new ArrayBuffer()

    // For each element in the yearRange add an element to the ArrayBuffer.
    for (idx <- yearRange)
    {
      if (result.size == 0)
        result += 1.0F  // Add the first element to the ArrayBuffer.
      else {
        // Add all remaining elements to the ArrayBuffer.
        val total: Float = (result(result.size - 1) * annualRate) + result(result.size - 1)
        result += total
      }
    }
    result.zipWithIndex
  }

  /**
   *
   */
  def printResult(result:Float, index:Int, annualPercentGrowthRate:Float):Unit =
  {
    if (index < 9)
      printf("%d     - %14.2f - %5.2f\n", index+1, result, annualPercentGrowthRate )
    else if (index < 99)
      printf("%d    - %14.2f - %5.2f\n", index+1, result, annualPercentGrowthRate)
    else if (index < 999)
      printf("%d   - %14.2f - %5.2f\n", index+1, result, annualPercentGrowthRate)
    else
      printf("%d  - %14.2f - %5.2f\n", index+1, result, annualPercentGrowthRate)
  }
}

======================================================================================
The following program determines if a number is or isn't a prime number.

import java.io.FileNotFoundException

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      val myNumber:Long = 23L
      val answer_SLOW:Boolean = isPrime_SLOW(myNumber)
      val answer_FAST:Boolean = isPrime_FAST(myNumber)

      println("isPrime_SLOW(" + myNumber + ") = " + answer_SLOW)
      println("isPrime_FAST(" + myNumber + ") = " + answer_FAST)
    }
    catch
    {
      case fnfe:FileNotFoundException => println("File Not Found, Jack!")
    }
  }

  /**
    * This method for determining whether a number is/isn't prime is inefficient (slow).
    *
    * @param number
    * @return true if the number passed to this method is prime;
    *         false otherwise
    */
  def isPrime_SLOW(number:Long): Boolean =
  {
    (2L until number).forall(number % _ != 0)
  }

  /**
    * This method for determining whether a number is/isn't prime is efficient (fast).
    *
    * @param number
    * @return true if the number passed to this method is prime;
    *         false otherwise
    */
  def isPrime_FAST(number:Long):Boolean =
  {
    var idx = 2
    while (idx * idx < number + 1  &&  number % idx != 0)
    {
      idx += 1
    }
    number % idx != 0
  }
}

======================================================================================
