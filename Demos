======================================================================================
======================================================================================
ANNUAL PERCENTAGE GROWTH RATE
=============================
object Demo
{
  def main(args: Array[String])
  {
    val yearRange:Range = 1 to 200

    println("ANNUAL GROWTH RATE = 2.0%")
    println("YEAR - UNITS CONSUMED - ANNUAL INCREASE OF UNITS CONSUMED")
    calculate(0.02F, yearRange)

    print("\nANNUAL GROWTH RATE = 3.0%\n")
    println("YEAR - UNITS CONSUMED - ANNUAL INCREASE OF UNITS CONSUMED")
    calculate(0.03F, yearRange)
  }

  def calculate(annualRate:Float, yearRange:Range):Unit =
  {
    println("0    - 1.00")
    var previousTotal:Float = 1.0F
    var total:Float = 1.0F
    for (idx <- yearRange)
    {
      total += total * annualRate
      if (idx < 10)
        printf("%d   - %5.2f           - %5.2f\n", idx, total, total - previousTotal)
      else if (idx < 100)
        printf("%d  - %5.2f           - %5.2f\n",  idx, total, total - previousTotal)
      else if (idx < 1000)
        printf("%d - %5.2f           - %5.2f\n",   idx, total, total - previousTotal)
      previousTotal = total
    }
  }
}

======================================================================================
The following program determines if a number is or isn't a prime number.

import java.io.FileNotFoundException

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      val myNumber:Long = 23L
      val answer_SLOW:Boolean = isPrime_SLOW(myNumber)
      val answer_FAST:Boolean = isPrime_FAST(myNumber)

      println("isPrime_SLOW(" + myNumber + ") = " + answer_SLOW)
      println("isPrime_FAST(" + myNumber + ") = " + answer_FAST)
    }
    catch
    {
      case fnfe:FileNotFoundException => println("File Not Found, Jack!")
    }
  }

  /**
    * This method for determining whether a number is/isn't prime is inefficient (slow).
    *
    * @param number
    * @return true if the number passed to this method is prime;
    *         false otherwise
    */
  def isPrime_SLOW(number:Long): Boolean =
  {
    (2L until number).forall(number % _ != 0)
  }

  /**
    * This method for determining whether a number is/isn't prime is efficient (fast).
    *
    * @param number
    * @return true if the number passed to this method is prime;
    *         false otherwise
    */
  def isPrime_FAST(number:Long):Boolean =
  {
    var idx = 2
    while (idx * idx < number + 1  &&  number % idx != 0)
    {
      idx += 1
    }
    number % idx != 0
  }
}

======================================================================================
