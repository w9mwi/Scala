ANNUAL PERCENTAGE GROWTH RATE
=============================

import scala.collection.mutable.ArrayBuffer
object Demo
{
  def main(args: Array[String])
  {
    val yearRange:Range = 1 to 150
    val annualPercentGrowthRate:Float = 2.0F

    println("YEAR  - UNITS CONSUMED - ANNUAL PERCENT GROWTH RATE") // Prints the header.

    // For each year in yearRange, calculate the number
    // of units consumed at the annualPercentGrowthRate.
    val resultArrayBuf: ArrayBuffer[Float] = calculate(annualPercentGrowthRate * 0.01F, yearRange)
    var yearCount = 1
    // The following line prints every element in the resultArrayBuf.
    resultArrayBuf.foreach{
      x => printResult(yearCount, x, annualPercentGrowthRate)
        yearCount += 1
    }
  }

  def calculate(annualRate:Float, yearRange:Range):ArrayBuffer[Float] =
  {
    val resultArrayBuf:ArrayBuffer[Float] = new ArrayBuffer()

    // For each element in yearRange, add an element to the AresultArrayBuf for that year.
    for (idx <- yearRange)
    {
      if (resultArrayBuf.size == 0)
        resultArrayBuf += 1.0F  // Adds the first element to the resultArrayBuf.
      else {
        val resultInPreviousArrayElement:Float = resultArrayBuf(resultArrayBuf.size - 1)
        // Calculate resultArrayBuf for the new element to be added to resultArrayBuf.
        resultArrayBuf += (resultInPreviousArrayElement * annualRate) + resultInPreviousArrayElement
      }
    }
    resultArrayBuf
  }

  def printResult(count:Int, result:Float,  annualPercentGrowthRate:Float):Unit =
  {
    if (count < 10)
      printf("%d     - %14.2f - %5.2f\n", count, result, annualPercentGrowthRate)
    else if (count < 100)
      printf("%d    - %14.2f - %5.2f\n", count, result, annualPercentGrowthRate)
    else if (count < 1000)
      printf("%d   - %14.2f - %5.2f\n", count, result, annualPercentGrowthRate)
    else
      printf("%d  - %14.2f - %5.2f\n", count, result, annualPercentGrowthRate)
  }
}

======================================================================================
IS AN INTEGER NUMBER PRIME?
===========================

import java.io.FileNotFoundException

object Demo
{
  def main(args: Array[String]): Unit =
  {
    try
    {
      val myNumber:Long = 23L
      val answer_SLOW:Boolean = isPrime_SLOW(myNumber)
      val answer_FAST:Boolean = isPrime_FAST(myNumber)

      println("isPrime_SLOW(" + myNumber + ") = " + answer_SLOW)
      println("isPrime_FAST(" + myNumber + ") = " + answer_FAST)
    }
    catch
    {
      case fnfe:FileNotFoundException => println("File Not Found, Jack!")
    }
  }

  /**
    * This method for determining whether a number is/isn't prime is inefficient (slow).
    *
    * @param number
    * @return true if the number passed to this method is prime;
    *         false otherwise
    */
  def isPrime_SLOW(number:Long): Boolean =
  {
    (2L until number).forall(number % _ != 0)
  }

  /**
    * This method for determining whether a number is/isn't prime is efficient (fast).
    *
    * @param number
    * @return true if the number passed to this method is prime;
    *         false otherwise
    */
  def isPrime_FAST(number:Long):Boolean =
  {
    var idx = 2
    while (idx * idx < number + 1  &&  number % idx != 0)
    {
      idx += 1
    }
    number % idx != 0
  }
}

======================================================================================
