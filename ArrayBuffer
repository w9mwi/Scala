
NOTE: The Scala Vector class is the recommended “go to” class for
      IMMUTABLE, INDEXED SEQUENTIAL collections.

NOTE: The Scala ArrayBuffer class is the recommended “go to” class for
      MUTABLE, INDEXED SEQUENTIAL collections.  ArrayBuffer is an indexed,
      sequential collection.  Use ListBuffer if you prefer a linear,
      sequential collection that is MUTABLE.

Difference Between Array and ArrayBuffer
========================================
A Scala Array is a fixed-size array.  Once an Array is created, its size cannot be changed.
A Scala ArrayBuffer is variable in size--its size can increase or decrease dynamically.

Regarding ArrayBuffer Performance
=================================
Append, update, and random access take constant time (amortized time).
Prepends and removes are linear in the buffer size.  The ArrayBuffer
documentation states: ArrayBuffers are useful for efficiently building
up a large collection whenever the new items are always added to the end.

If you need a mutable sequential collection that works more like
a List (i.e., a linear sequence rather than an indexed sequence)
use ListBuffer instead of ArrayBuffer.  A ListBuffer is like an
ArrayBuffer, except that it uses a linked list internally instead
of an Array.  If you plan to convert the buffer to a List once it's
built, use a ListBuffer instead of an ArrayBuffer.

==================================================================================
Below is sample code demonstrating how an ArrayBuffer is used.

import scala.collection.mutable.{ArrayBuffer, ListBuffer}

object Demo
{
  case class Student(name:String, assignments:List[Double], tests:List[Double])
  case class Section(students:ListBuffer[Student])

  def main(args: Array[String]):Unit =
  {
    // You can create EMPTY ArrayBuffers.  (Once created, this code never uses them.)
    var fruits = ArrayBuffer[String]()
    var ints   = ArrayBuffer[Int]()

    // You can create an initialized ArrayBuffer...
    val nums:ArrayBuffer[Int] = ArrayBuffer(1, 2, 3)

    // Even though nums is a val, you can add/delete elements to/from an ArrayBuffer!...
    nums += 4      // Add one element to the ArrayBuffer.
    nums += (5, 6) // Add two elements to the ArrayBuffer.
    nums ++= List(7, 8, 9) // You can add a List to an ArrayBuffer!  Note that ++= is used to do this.
    println(nums) // PRINTS: ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9)


    nums -= 4 // To remove one or more elements from ArrayBuffer, use the -= operator.
    nums -= (2, 8)
    println(nums) // PRINTS: ArrayBuffer(1, 3, 5, 6, 7, 9)
    nums ++= Array(4, 8, 2) // You can add an Array to an ArrayBuffer!  Note that ++= is used to do this.
    println(nums) // PRINTS: ArrayBuffer(1, 3, 5, 6, 7, 9, 4, 8, 2)

    demoArrayBufferMethods()
  }

  /**
    * This function demonstrates a buncha methods used by the ArrayBuffer type.
    */
  def demoArrayBufferMethods():Unit =
  {
    var arrayBuf_1:ArrayBuffer[Int] = ArrayBuffer(1, 2, 3) // ArrayBuffer(1, 2, 3)
    arrayBuf_1.append(4)           // ArrayBuffer(1, 2, 3, 4)
    arrayBuf_1.append(5, 6)        // ArrayBuffer(1, 2, 3, 4, 5, 6)
    arrayBuf_1.appendAll(Seq(7,8)) // ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8)
    arrayBuf_1.clear               // ArrayBuffer()

    arrayBuf_1 = ArrayBuffer(9, 10)        // ArrayBuffer(9, 10)
    arrayBuf_1.insert(0, 8)                // ArrayBuffer(8, 9, 10)       (Inserts an 8 at element index 0)
    arrayBuf_1.insert(0, 6, 7)             // ArrayBuffer(6, 7, 8, 9, 10) (Inserts a 6, 7 beginning at element index 0)
    arrayBuf_1.insertAll(0, Vector(4, 5))  // ArrayBuffer(4, 5, 6, 7, 8, 9, 10) (Inserts a 4, 5 beginning at element index 0)
    arrayBuf_1.prepend(3)                  // ArrayBuffer(3, 4, 5, 6, 7, 8, 9, 10)
    arrayBuf_1.prepend(1, 2)               // ArrayBuffer(1, 2, 3, 4, 5, 6, 7, 8, 9, 10)
    arrayBuf_1.prependAll(Array(-3, 0, 1)) // ArrayBuffer(-3, 0, 1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10) (Prepends a -3, 0, 1 at the beginning.)
    arrayBuf_1.clear                       // ArrayBuffer()

    var arrayBuf_2:ArrayBuffer[Char] = ArrayBuffer.range('a', 'h') // ArrayBuffer(a, b, c, d, e, f, g)
    arrayBuf_2.remove(0)    // ArrayBuffer(b, c, d, e, f, g) (Removes the 3 elements beginning at index 2.)
    arrayBuf_2.remove(2, 3) // ArrayBuffer(b, c, g)

    arrayBuf_2 = ArrayBuffer.range('a', 'h') // ArrayBuffer(a, b, c, d, e, f, g)
    arrayBuf_2.trimStart(2) // ArrayBuffer(c, d, e, f, g) (Removes all elements BEFORE index 2.)
    arrayBuf_2.trimEnd(2)   // ArrayBuffer(c, d, e) (Removes all elements AFTER index 2.)
  }
}

==================================================================================

