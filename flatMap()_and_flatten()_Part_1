===========================================================================
object Demo
{
  def main(args:Array[String]): Unit =
  {
    // NOTE: The signature of the List.map method is:  map[B](f: (A) => B): List[B]
    var stringList:List[String] = List("Hey", "Neptune")
    val intList1:List[Int] = stringList.map(s => s.length) // Equivalent to the next line of code.
    val intList2:List[Int] = stringList.map(_.length)      // Equivalent to the previous line of code.
    println("A) " + intList1) // PRINTS: A) List(3, 7)
    println("B) " + intList2) // PRINTS: B) List(3, 7)

    // NOTE: The signature of the List.flatMap method is: def flatMap[B](f: (A) => GenTraversableOnce[B]): List[B]
    //       For this example we can simplify that to:    def flatMap[B](f: (A) => List[B]): List[B]
    stringList = List("mucked", "up", "all", "over")
    var stringList1 = stringList.flatMap(s => s.split("ck")) // Equivalent to the next line of code.
    var stringList2 = stringList.flatMap(_.split("ck"))      // Equivalent to the previous line of code.
    var stringList3 = stringList.flatMap(_.split(""))
    println("C) " + stringList1) // PRINTS: C) List(mu, ed, up, all, over)
    println("D) " + stringList2) // PRINTS: D) List(mu, ed, up, all, over)
    println("E) " + stringList3) // PRINTS: E) List(m, u, c, k, e, d, u, p, a, l, l, o, v, e, r)

    stringList1 = List("one", "two", "three")
    stringList2 = List("four", "five", "six", "seven")
    val stringList4:List[List[String]] = List(stringList1, stringList2)

    println("F) " + stringList4)                 // PRINTS: F) List(List(one, two, three), List(four, five, six, seven))
    println("G) " + stringList4.flatten)         // PRINTS: G) List(one, two, three, four, five, six, seven)
    println("H) " + stringList4.flatMap(z => z)) // PRINTS: H) List(one, two, three, four, five, six, seven)
    println("I) " + stringList4.map(s => s.length))         // PRINTS: I) List(3, 4)
    println("J) " + stringList4.flatten.map(s => s.length)) // PRINTS: J) List(3, 3, 5, 4, 4, 3, 5)
  }
}

===========================================================================
The following code sample shows how to use the flatten() method.

import scala.collection.immutable.NumericRange
import scala.collection.immutable

object Demo
{
  def main(args: Array[String]):Unit =
  {
    println("PART 1) ================================")
    // NOTE: This part just calls isPrime(), and has nothing to do with flatten() or flatMap().
    val number = 54321L
    println("isPrime(" + number + ") = " + isPrime(number))

    println("PART 2) ================================")
    val list_1:List[Int]   = List(9, 8, 7, 6, 5)
    val list_2:List[Int]   = List(10, 11, 12)
    val list_3:List[Int]   = List(13, 14, 15, 16)
    val array_1:Array[List[Int]] = Array(list_1, list_2, list_3)
    for (list <- array_1) // Loops through each element of array_1
    {
      // Prints all Int numbers in list_1, then in list_2, then in list_3.
      list.foreach(println) // PRINTS: 9 8 7 6 5 10 11 12 13 14 15 16
    }

    // PART 3) below prints the IDENTICAL results as PART 2) above...
    println("PART 3) ================================")
    val result_1:Array[Int] = array_1.flatten // result_1 = Array(9, 8, 7, 6, 5, 10, 11, 12, 13, 14, 15, 16)
    result_1.foreach(println) // PRINTS: 9 8 7 6 5 10 11 12 13 14 15 16

    // PART 4) below prints the IDENTICAL results as PART 3) above...
    println("PART 4) ================================")
    val array_2:Array[Int] = Array(22, 33, 44)
    val array_3:Array[Int] = Array(55, 66, 77)
    val array_4:Array[Int] = Array(88, 99)
    val list_4:List[Array[Int]] = List(array_2, array_3, array_4)
    for (array <- list_4) // Loops through each element of list_4
    {
      // Prints all Int numbers in array_2, then in array_3, then in array_4
      array.foreach(println) // PRINTS: 9 8 7 6 5 10 11 12 13 14 15 16
    }

    println("PART 5) ================================")
    val result_2:List[Int] = list_4.flatten // result_2 = List(22, 33, 44, 55, 66, 77, 88, 99)
    result_2.foreach(println) // PRINTS: 22 33 44 55 66 77 88 99

    println("PART 6) ================================")
    val list_5:List[List[Int]] = List(list_1, list_2, list_3)
    val result_3 = list_5.flatten.map(x=>x*x)
    result_3.foreach(println) // PRINTS: 81 64 49 36 25 100 121 144 169 196 225 256

    // The following 2 lines of code are used for nothing at this time.
    val immutSet:immutable.Set[Int] = immutable.Set(9, 8, 7, 6, 5)
    val immutSet_2:immutable.Set[Int] = immutable.Set(1, 8, 7, 6, 5)
  }

  /**
    * Determine if a Long value is or isn't prime.
    * @param number
    * @return
    */
  def isPrime(number:Long):Boolean =
  {
    // NOTE: NumericRange is a more generic version of the Range class,
    //       as it's a parametric function that can work with different
    //       data types (Int., Long, BigInt).
    var numericRange = NumericRange(2L, number, 1L)

    // Test ALL elements of numericRange.  If ALL elements of numericRange
    // cannot be divided by 2, true is returned.  Otherwise, false is returned.
    numericRange.forall(number % _ != 0)
  }
}
===================================================================================
The following code sample shows use of the flatten(), flatMap() and map() methods.

IMPORTANT TO REMEMBER
=====================
1) As one of the examples on this page shows (search for "flatten"), it's possible for
   the map() and flatMap() method to fail when called on a List that hasn't first been
   'flattened' enough, in which case an error will be thrown.
2) Once a List is in its most 'flattened' state (i.e., a List[Int]), calling the
   flatten() method on it will throw an error.
3) The name flatMap() is misleading because flatMap() calls the map() method FIRST,
   and then calls the flatten() method SECOND.
4) The flatten() method 'flattens' a List ONLY ONE LEVEL!  So if you call flatten()
   on a List[List[Int]], the result will be a List[Int].  But if you call flatten()
   on a List[List[List[Int]]], the result will be a List[List[Int]], which means
   that List is still NOT fully 'flattened'.  A List that is fully-flattened means
   it's a single-level List (i.e., List[Int]), NOT a List that contains another List.


NOTE: When flatten() and flatMap() is called on a Seq, they return a Seq.
      When flatten() and flatMap() is called on a List, they return a List.
      When flatten() and flatMap() is called on an Array, they return a List!!!

object Demo
{
  def main(args: Array[String]):Unit =
  {
    println("PART 1) uses a Seq data type. ==================================")
    val fruitsSeq:Seq[String] = Seq("apple", "banana", "orange")
    val result_1:Seq[String]  = fruitsSeq.map(_.toUpperCase)
    val result_2:Seq[Char]    = fruitsSeq.flatten
    val result_3:Seq[Char]    = fruitsSeq.flatMap(_.toUpperCase)
    println(result_1) // PRINTS: List(APPLE, BANANA, ORANGE)
    println(result_2) // PRINTS: List(a, p, p, l, e, b, a, n, a, n, a, o, r, a, n, g, e)
    println(result_3) // PRINTS: List(A, P, P, L, E, B, A, N, A, N, A, O, R, A, N, G, E)

    println("PART 2) uses a List data type. ==================================")
    val fruitsList:List[String] = List("apple", "banana", "orange")
    val result_4:List[String]   = fruitsList.map(_.toUpperCase)
    val result_5:List[Char]     = fruitsList.flatten
    val result_6:List[Char]     = fruitsList.flatMap(_.toUpperCase)
    println(result_4) // PRINTS: List(APPLE, BANANA, ORANGE)
    println(result_5) // PRINTS: List(a, p, p, l, e, b, a, n, a, n, a, o, r, a, n, g, e)
    println(result_6) // PRINTS: List(A, P, P, L, E, B, A, N, A, N, A, O, R, A, N, G, E)

    println("PART 3) uses an Array data type. ==================================")
    val fruitsArray:Array[String] = Array("apple", "banana", "orange")
    val result_7:List[Char]       = fruitsList.flatten                // NOTICE: The type returned is List[Char]
    val result_8:List[String]     = fruitsList.map(_.toUpperCase)     // NOTICE: The type returned is List[String]
    val result_9:List[Char]       = fruitsList.flatMap(_.toUpperCase) // NOTICE: The type returned is List[Char]
    result_7.foreach(println) // PRINTS: a  p  p  l  e  b  a  n  a  n  a  o  r  a  n  g  e
    println(result_8)         // PRINTS: List(APPLE, BANANA, ORANGE)
    result_9.foreach(println) // PRINTS: A  P  P  L  E  B  A  N  A  N  A  O  R  A  N  G  E

    println("PART 4) ==================================")
    // NOTE: Sometimes you might think you can call flatMap() when you cannot.
    //       Recall that flatMap() calls map() FIRST, and calls flatten() SECOND.
    //       Calling doubleList_1.flatMap() below won't work because what must be
    //       done is to call flatten() FIRST, and map() SECOND, as is done below.
    val doubleList_1:List[Double]       = List(39.1, 97.3, 224.7, 359.9)
    val doubleList_2:List[Double]       = List(21.7, 77.7, 194.7, 285.2)
    val doubleList_3:List[List[Double]] = List(doubleList_1, doubleList_2)
    val result_10:List[Double]          = doubleList_3.flatten
    val result_11:List[Double]          = result_10.map(math.cos(_))
    println(result_11) // PRINTS the cosine of each number in doubleList_1 and doubleList_2.
  }
}
================================================================================
The following code sample shows use of the flatten(), flatMap() and map() methods.

IMPORTANT TO REMEMBER
=====================
1) As one of the examples on this page shows (search for "flatten"), it's possible for
   the map() and flatMap() method to fail when called on a List that hasn't first been
   'flattened' enough, in which case an error will be thrown.
2) Once a List is in its most 'flattened' state (i.e., a List[Int]), calling the
   flatten() method on it will throw an error.
3) The name flatMap() is misleading because flatMap() calls the map() method FIRST,
   and then calls the flatten() method SECOND.
4) The flatten() method 'flattens' a List ONLY ONE LEVEL!  So if you call flatten()
   on a List[List[Int]], the result will be a List[Int].  But if you call flatten()
   on a List[List[List[Int]]], the result will be a List[List[Int]], which means
   that List is still NOT fully 'flattened'.  A List that is fully-flattened means
   it's a single-level List (i.e., List[Int]), NOT a List that contains another List.

object Demo
{
  def main(args: Array[String]):Unit =
  {
    val list_1:List[Int] = List(1,2,3,4,5)
    println("list_1 = " + list_1) // PRINTS: list_1 = List(1, 2, 3, 4, 5)

    // NOTE: If you attempt to call list_1.flatten() here, an exception will
    //       be thrown because list_1 is already in its 'flattened' state.

    // Calling list_1.map(x => func(x)) will call func() once for each Int
    // contained in list_1.  Each time func() gets called, it will return
    // a List containing 3 Int values.
    val result_1:List[List[Int]] = list_1.map(x => func(x)) // Equivalent to calling list_1.map(func)
    println("result_1 = " + result_1) // PRINTS: result_1 = List(List(0, 1, 2), List(1, 2, 3), List(2, 3, 4), List(3, 4, 5), List(4, 5, 6))

    val result_2:List[Int] = result_1.flatten
    println("result_2 = " + result_2) // PRINTS: result_2 = List(0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6)

    val result_3 = list_1.map(func).flatten // Equivalent to calling: list_1.map(x => func(x)).flatten
    println("result_3 = " + result_3)       // PRINTS: result_3 = List(0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6)

    val result_4 = list_1.flatMap(func) // Equivalent to calling list_1.flatMap(x => func(x))
    println("result_4 = " + result_4)   // PRINTS: result_4 = List(0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6)

    val list_2:List[Int]       = List(1, 2, 3)
    val list_3:List[Int]       = List(4, 5, 6)
    val list_4:List[Int]       = List(7, 8, 9)
    val list_5:List[List[Int]] = List(list_2, list_3, list_4)
    // NOTE: Here, we can successfully call flatMap(func) on list_2, list_3, or list_4
    //       because those Lists are already 'flattened', and flatMap() can be called
    //       ONLY on 'flattened' Lists.  But since list_5 is NOT 'flattened' we must
    //       first 'flatten' it before we can call flatMap() on it.
    val result_5:List[Int] = list_5.flatten.flatMap(func)
    println("result_5 = " + result_5) // PRINTS: result_5 = List(0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6, 5, 6, 7, 6, 7, 8, 7, 8, 9, 8, 9, 10)

    val list_6:List[Int]       = List(10, 11, 12)
    val list_7:List[Int]       = List(13, 14, 15)
    val list_8:List[Int]       = List(16, 17, 18)
    val list_9:List[List[Int]] = List(list_6, list_7, list_8)
    // NOTE: Here, we can successfully call flatMap(func) on list_6, list_7, or list_8
    //       because those Lists are already 'flattened', and flatMap() can be called
    //       ONLY on 'flattened' Lists.  But since list_9 is NOT 'flattened' we must
    //       first 'flatten' it before we can call flatMap() on it.
    val result_6:List[Int] = list_9.flatten.flatMap(func)
    println("result_6 = " + result_6) // PRINTS: result_6 = List(9, 10, 11, 10, 11, 12, 11, 12, 13, 12, 13, 14, 13, 14, 15, 14, 15, 16, 15, 16, 17, 16, 17, 18, 17, 18, 19)

    val list_10:List[List[List[Int]]] = List(list_5, list_9)
    // NOTE: Here, we must call flatten() TWICE before we call flatMap(func) on list_10.
    //       This is because the flatten() method only 'flattens' a List ONE LEVEL!!!
    //       list_10 is a List containing 2 Lists.  And each of those 2 Lists contain 3 Lists.
    val result_7:List[Int] = list_10.flatten.flatten.flatMap(func)
    println("result_7 = " + result_7) // PRINTS: result_7 = List(0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4, 5, 4, 5, 6, 5, 6, 7, 6, 7, 8, 7, 8, 9, 8, 9, 10, 9, 10, 11, 10, 11, 12, 11, 12, 13, 12, 13, 14, 13, 14, 15, 14, 15, 16, 15, 16, 17, 16, 17, 18, 17, 18, 19)

    // Finally, we demonstrate that the following two lines of code are equivalent:
    // list_8.map(func).flatten
    // list_8.flatMap(func)
    val result_8:List[Int] = list_8.map(func).flatten
    val result_9:List[Int] = list_8.flatMap(func)
    if (result_8 == result_9)
    {
      println("result_8 = result_9 = " + result_8) // PRINTS: result_8 = result_9 = List(15, 16, 17, 16, 17, 18, 17, 18, 19)
    }

    // The following two lines of code generate identical results.  The only difference
    // is the first line calls an anonymous function (a function literal), while the
    // second line calls a defined function.  However, both the anonymous function and
    // the defined function perform the same action.  Even though the anonymous function
    // returns a Seq[Int], and the defined function returns a List[Int] they both
    // print as a List[Int].  (Because Seq is very similar to List.)
    val mySeq_1:Seq[Int] = Seq(1,2,3,4) flatMap { x => Seq(x-1, x, x+1) }
    val mySeq_2:Seq[Int] = Seq(1,2,3,4).flatMap(func)
    println("mySeq_1 = " + mySeq_1) // PRINTS: mySeq_1 = List(0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4, 5)
    println("mySeq_2 = " + mySeq_2) // PRINTS: mySeq_2 = List(0, 1, 2, 1, 2, 3, 2, 3, 4, 3, 4, 5)
  }

  /**
    * This function is self-explanatory.
    */
  def func(intNumber:Int):List[Int] = List(intNumber - 1, intNumber, intNumber + 1)
}

===========================================================================
The sample code in this section demonstrates: 

___ the Map[Int, String] type
___ the Option/Some/None type (obtained via the get() method)
___ the Range and NumericRange types
___ the Vector type
___ the IndexedSeq[String] type
___ the List[Int] type
___ the List[List[Int]]
___ the flatMap() function
___ the flatten() function

import scala.collection.immutable.NumericRange
object Demo
{
  def main(args: Array[String]):Unit =
  {
    val myMap:Map[Int, String] = Map(1 -> "one", 2 -> "two", 3 -> "three")
    println("myMap = " + myMap) // PRINTS: myMap = Map(1 -> one, 2 -> two, 3 -> three)
    // FYI: Calling myMap.flatten() will fail cuz myMap is already 'flattened'.
    // This code would fail here cuz myMap is already 'flattened'.  -->  val result_4 = myMap.flatten


    // myRange is the same as "1 to myMap.size" in the line below.
    val myRange:Range = Range(1, myMap.size + 1, 1)
    println("myRange = " + myRange)       // PRINTS: myRange = Range 1 until 4
    val myRangeMap:IndexedSeq[Option[String]] = myRange.map(myMap.get)
    println("myRangeMap = " + myRangeMap) // PRINTS: myRangeMap = Vector(Some(one), Some(two), Some(three))
    myRangeMap.foreach(println)           // PRINTS:                     Some(one)  Some(two)  Some(three)
    for (x <- myRangeMap){ println(x.get) /* PRINTS:                          one        two        three */ }



    // MYSTERY: Printing result_1, result_2, and result_3 below
    //          ALL PRINT THIS: Vector(one, two, three)
    //          However, result_1 and result_2 are of type: IndexedSeq[String],
    //          while result_3 is of type: Vector[String]
    //
    //          FYI, both flatMap() calls below return type: That
    //          FYI, both myMap.get() calls below return type: Option[String]
    val result_1:IndexedSeq[String] = myRange.flatMap(myMap.get)           // Equivalent to the BELOW line.
    val result_2:IndexedSeq[String] = (1 to myMap.size).flatMap(myMap.get) // Equivalent to the ABOVE line.
    val result_3:Vector[String]     = Vector("one", "two", "three")
    println(result_1) // PRINTS: Vector(one, two, three)
    println(result_2) // PRINTS: Vector(one, two, three)
    println(result_3) // PRINTS: Vector(one, two, three)

    val chars:NumericRange[Char] = 'a' to 'z'
    println(chars) // PRINTS: NumericRange a to z

    val list_1:List[Int]       = List(6, 7, 8, 9, 10)
    val list_2:List[Int]       = List(1, 2, 3, 4, 5)
    val list_3:List[List[Int]] = List(list_1, list_2)
    println(list_3.flatten.map(i=>i*i)) // PRINTS: List(36, 49, 64, 81, 100, 1, 4, 9, 16, 25)
  }
}
===========================================================================

import scala.collection.immutable.NumericRange

object Demo
{
  def main(args: Array[String]):Unit =
  {
    val chars:NumericRange[Char] = 'a' to 'z'
    println(chars) // PRINTS: NumericRange a to z

    // The following line is very difficult to understand, so it's rewritten below.
    val perms_1:IndexedSeq[String] = chars.flatMap(a => chars.flatMap(b => if (a != b) Seq("%c%c".format(a, b)) else Seq() ))
    println(perms_1) // PRINTS: Vector(ab, ac, ad, ae, af, ... zw, zx, zy)

    // The following line is a rewritten version of the above line to make it easier to understand.
    val perms_2:IndexedSeq[String] = chars.flatMap(a => chars.flatMap(b => func_1(a, b)))
    println(perms_2) // PRINTS: Vector(ab, ac, ad, ae, af, ... zw, zx, zy)
  }

  /**
    * Calling this func_1 function as: chars.flatMap(func_1(a, b))
    * is equivalent to calling this:   chars.flatMap(b => if (a != b) Seq("%c%c".format(a, b)) else Seq())
    */
  def func_1(a:Char, b:Char):Seq[String] =
  {
    if (a != b)
    {
      val seqString:Seq[String] = Seq("%c%c".format(a, b))
      seqString
    }
    else Seq() // Seq() = List() = Nil
  }
}

// RESUME HERE...
// https://alvinalexander.com/scala/collection-scala-flatmap-examples-map-flatten

===========================================================================

