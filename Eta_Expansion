In Scala you can define a function in 2 different ways:

1) A function can be defined as a val (or a var), so the val/var
   actually stores a function instead of storing a typical data
   value like Int, String, List, etc.

2) A function can be defined by using the 'def' keyword,
   which is the most common way functions are defined.

The following sample code defines a function using both ways,
where doubleIntFunc_1 is stored in a val, and doubleIntFunc_2
is defined using the 'def' keyword.

======================================================================

object Demo
{
  def main(args: Array[String]): Unit = {
    val doubleIntFunc_1:(Int => Int) = (number:Int) => number * 2
    var number:Int = doubleIntFunc_1(222)
    println(number) // PRINTS: 444

    number = doubleIntFunc_2(number)
    println(number) // PRINTS: 888

  def doubleIntFunc_2(number:Int):Int = number * 2
  }
}

======================================================================




Read the in-line comments in the below sample code.  For more details
about "Eta Expansion", do a web search on it.
======================================================================
object Demo
{
  def main(args: Array[String])
  {
    val intList = List(7, 9)

    // When you write your own functions/methods (like mySquare() below),
    // you can convert them to functions which can be used by the map() method.
    // You do this by performing an "Eta Expansion" on the function, as shown
    // in the following line of code by adding the underscore character (_)
    // after the function name.  If you remove the underscore char after
    // the mySquare function name below, that line will NOT compile.  Using the
    // underscore (_) char eliminates the need to declare the squareFunction's
    // data type!!!  Keep reading all comments below...
    val squareFunction = mySquare _

    // When the squareFunction declaration is made above, the Scala compiler
    // translates that code into the following commented-out code, where the
    // "new Function1[Int, Int]" text shown below is optional...
    // val squareFunction:(Int => Int) = new Function1[Int, Int]
    // {
    //   def apply(x: Int):Int = mySquare(x)
    // }

    // If you replace the above squareFunction declaration with either
    // of the two commented-out declarations below, those declarations
    // will compile and function properly...
    // val squareFunction:(Int => Int) = mySquare
    // val squareFunction:(Int => Int) = mySquare _  // NOTE the underscore (_) char.

    var result:List[Int] = intList.map(squareFunction)
    println("result = " + result) // PRINTS: result = List(49, 81)

    // The following result is identical to the result obtained above...
    result = intList.map(i => i*i)
    println("result = " + result) // PRINTS: result = List(49, 81)
  }

  /****************************
  * The mySquare() function.
  ****************************/
  def mySquare(x:Int):Int = { x * x }
}
