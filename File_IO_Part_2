
The majority of classes in the java.io pakage are subtypes of
one of these four different abstract types:

___ InputStream - The basic methods work on bytes  Here are some of them:
                  ___ available():Int
                  ___ close():Unit
                  ___ mark(readLimit:Int):Unit
                  ___ markSupported():Boolean
                  ___ read():Int - An abstract method.  Returns a -1 when the end of stream is reached.
                                   Otherwise, returns the value of the next byte in the stream as an
                                   Int in the range 0-255.
                  ___ read(b:Array[Byte]):Int
                  ___ read(b:Array[Byte], off:Int, len:Int):Int
                  ___ reset():Unit
                  ___ skip(long n):Long
                  
___ OutputStream - The basic methods work on bytes.  Here are some of them:
                   ___ close():Unit
                   ___ flush():Unit
                   ___ write(b:Array[Byte]):Unit
                   ___ write(b:Array[Byte], off:Int, len:Int):Unit
                   ___ write(b:Int):Unit - An abstract method.  The lowest 8 bits of the Int
                                           are written, the other 24 bits are ignored.
___ Reader - The basic operations work on characters.
___ Writer - The basic operations work on characters.

Remember, the above methods come from the java.io package.  Refer to the Java
API for docs:  https://docs.oracle.com/javase/9/docs/api/overview-summary.html

NOTE: InputStream and OutputStream work only with bytes.  If you need to read/write
      data in formats other than individual Bytes (Strings, Chars, Ints, Floats,
      and Doubles, as well as Bytes), use DataInputStream and DataOutputStream.
      To read more about DataInputStream and DataOutputStream (as well as
      BufferedInputStream and BufferedOutputStream), see the File_IO_Part3
      section at: https://github.com/w9mwi/Scala/edit/master/File_IO_Part_3

The InputStream and OutputStream do not actually have any code to read from,
or write to--which is why they're abstract.  Their only purpose is to serve
as a base class for inheritance.  The subtypes are more specific about which
data source/sink they operate on.  The most obvious place to use an InputStream
or OutputStream is with files on a disk drive.  Therefore, the FileInputStream and
FileOutputStream are classes that inherit from InputStream and OutputStream respectively.
=========================================================================================
object Demo
{
  def main(args: Array[String])
  {
    import java.io.FileInputStream

    val fis:FileInputStream  = new FileInputStream("/home/tbouril/ch8.txt")
    var byte:Int = fis.read()
    while (byte > 0)
    {
      print(byte + " ") // PRINTS: Every character of the input file as an 8-bit Int value.
      byte = fis.read()
    }
    fis.close()
  }
}
=========================================================================================
object Demo
{
  def main(args: Array[String])
  {
    import java.io.{FileInputStream, FileNotFoundException, FileOutputStream, IOException}

    try
    {
      // Copy the file designated by the FileInputStream
      // to a new file designated by the FileOutputStream...
      val fis = new FileInputStream("/home/tbouril/ch8.txt")
      val fos = new FileOutputStream("/home/tbouril/ch8_copy.txt")
      var byte = fis.read()
      while (byte > 0)
      {
        fos.write(byte)
        byte = fis.read()
      }
      fis.close()
      fos.close()
    }
    catch
    {
      // NOTE: If an exception is thrown and caught, the value of the "try" block returned
      //       is the value of the "catch" for that particular "case."  If the try block
      //       throws an exception, but that exception is NOT caught in the "catch" block,
      //       the value returned by the "try' block is the Scala type "Nothing".
      case poop:FileNotFoundException => println("The input or output file cannot be found.")
      case poop:IOException => println("There was an IOException related to the input or output file.")
    }
  }
}
=========================================================================================

