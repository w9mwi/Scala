
Combinator - The idea of being able to combine functions
             together like a UNIX command pipeline:
             $ ps aux grep root wc -l

             In Scala, functions can be combined by chaining them like in
             this example.  This is also called "functional composition."
             val result = doThis(a).thenThis(b)andFinallyThis(c)

Expression-Oriented Programming (EOP) - Pure functional programming code is a superset of EOP.
                                        Therefore, pure functional programming is also EOP.

                                        An "expression" (as defined by EOP) is a line of code that
                                        returns a result (evaluates to a result).  A "statement"
                                        doesn't evaluate to a result because a statement doesn't
                                        return a value.  The println() below is a statement (not
                                        an expression) because it doesn't return a result.

                                        println("Print some text to the screen.")

                                        The following code evaluates to 3 expressions (not statements)
                                        because that code evaluates to 3 separate results.

                                        val taxPayment = calculateTax(incomeData)
                                        val getMaxValue = if (a > b) a else b;
                                        val isIntEven:Boolean = myInt match
                                        {
                                           case 0 | 2 | 4 | 6 | 8 => true
                                           case 1 | 3 | 5 | 7 | 9 => false
                                        }

                                        In EOP (and FP), code that returns a result
                                        (evaluates to a result) is an expression.

Functor - Things that can be mapped over.  For example, an Array and a List
          both contain elements.  For each of those elements a function can
          be called that returns a value.  A List is a functor:

          val myList:List[Int] = List(1, 2, 3, 4)
          println(myList.map(_ * 4)) // PRINTS: List(4, 8, 12, 16)


Higher-Order Function - A function that can be passed a function as
                        a parameter, and/or can return a function.


Lambda - Another word for an anonymous function.


Pure Function - A pure function's output (returned result) depends ONLY on the content of
                its input parameters (which aren't modified) and the function's algorithm.
                A pure function doesn't read or modify any values from the "outside world."
                Some examples of the "outside world" are:

                * A global value (a constant) or global variable
                * Getting the date/time
                * Generating a random number
                * File I/O
                * Database I/O
                * Web service I/O
                * Writes to the video screen  (The println function is an example.)

                Also, any function that has no input parameters (i.e., the readLine function),
                or returns nothing (returns type Unit), is NOT a pure function.

                If there is no data dependency between two pure functions,
                then the order in which they get called doesn't matter, or
                they could be run simultaneously (in parallel).  Therefore,
                pure functions are "thread safe."
