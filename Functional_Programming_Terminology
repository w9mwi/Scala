
Combinator - The idea of being able to combine functions
             together like a UNIX command pipeline:
             $ ps aux grep root wc -l

             In Scala, functions can be combined by chaining them like in
             this example.  This is also called "functional composition."
             val result = doThis(a).thenThis(b)andFinallyThis(c)


Functor - Things that can be mapped over.  For example, an Array and a List
          both contain elements.  For each of those elements a function can
          be called that returns a value.  A List is a functor:

          val myList:List[Int] = List(1, 2, 3, 4)
          println(myList.map(_ * 4)) // PRINTS: List(4, 8, 12, 16)


Higher-Order Function - A function that can be passed a function as
                        a parameter, and/or can return a function.


Lambda - Another word for an anonymous function.


Pure Function - A pure function's output (returned result) depends ONLY on the content of
                its input parameters, which aren't modified, and the function's algorithm.
                A pure function doesn't read or modify any values from the "outside world."
                Some examples of the "outside world" are:

                * A global value (a constant) or global variable
                * Getting the date/time
                * Generating a random number
                * File I/O
                * Database I/O
                * Web service
                * Writes to the video screen  (The println function is an example.)

                Also, any function that has no input parameters (i.e., the readLine function),
                or returns nothing (returns type Unit), is NOT a pure function.

