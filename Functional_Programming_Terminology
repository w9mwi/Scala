
Combinator - The idea of being able to combine, or chain, functions
             together like a UNIX command pipeline:
             $ ps aux grep root wc -l


Functor - Things that can be mapped over.  For example, an Array and a List
          both contain elements.  For each of those elements a function can
          be called that returns a value.  A List is a functor:

          val myList:List[Int] = List(1, 2, 3, 4)
          println(myList.map(_ * 4)) // PRINTS: List(4, 8, 12, 16)


Higher-Order Function - A function that can be passed a function as
                        a parameter, and/or can return a function.


Lambda - Another word for an anonymous function.


Pure Function - A function that depends only on its declared input parameters
                and its algorithm to generate its output (returned result).
                It doesn't read or modify any values from the "outside world."
                Some examples of the "outside world" are:

                * A global value
                * Getting the date/time
                * File I/O
                * Database I/O
                * Web service
                * Video screen output

                The function's output (returned result) depends ONLY on the
                content of its input parameters, which aren't modified.

