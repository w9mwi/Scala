
The following code samples show how to pass a variable number
of arguments to a function.  Read in-line comments in the
following examples for details.

============================================================================

object Demo
{
  /**
   * The '*' character in this function's argument list designates that
   * a variable number of arguments can be passed to this function.
   * In this example these arguments are designated as Strings.
   */
  def convertMultipleStringsToOneString(names:String *):String =
  {
    // The following line of code transforms multiple String arguments
    // passed to this function into a single String delimited by commas.
    // EXAMPLE: If these 4 Strings are passed to this function:
    //          "ABC"   "DEF"   "GHI"   "JKL"
    //          This single String will be returned: "ABC,DEF,GHI,JKL"
    names.mkString(",")
  }

  def convertCommaDelimitedStringToList(str:String):List[String] =
  {
    // The following line of code transforms the comma-delimited String passed
    // to this function (i.e., "ABC,DEF,GHI,JKL") into an Array[String].
    // Where each element in the Array[String] corresponds one of the
    // substrings delimited by the commas.
    val strArray:Array[String] = str.split(",")
    strArray.toList // Converts the Array[String] to a List[String]
  }

  /********************************************
   * main() function
   ********************************************/
  def main(args: Array[String])
  {
    val cityString:String     = "Madison,Manitowoc,Milwaukee"
    val cityList:List[String] = List(cityString)

    // The '_*' characters in the following line of code performs "Type Ascription"
    // on the cityList arg.  Type Ascription is basically an up-cast performed
    // at compile time for the sake of the type checker.  The most often used case
    // of Type Ascription is invoking a varargs method with a single Seq parameter.
    //
    // So in this example cityList (which is a Scala 'Seq' type) is up-cast to
    // multiple Strings, where each String is obtained from each String element
    // in cityList.
    var str:String = convertMultipleStringsToOneString(cityList: _*)
    println(str) // PRINTS: Madison,Manitowoc,Milwaukee

    val list:List[String] = convertCommaDelimitedStringToList(cityString)
    println(list) // PRINTS: List(Madison, Manitowoc, Milwaukee)

    // NOTE: Above we passed a List[String] to the convertMultipleStringsToOneString()
    //       function.  But that function also works by passing it an Array[String],
    //       a Vector[String], etc. as shown below.
    val array:Array[String] = Array("123", "456", "789")
    str = convertMultipleStringsToOneString(array: _*)
    println(str) // PRINTS: 123,456,789

    val vector:Vector[String] = Vector("RST", "UVW", "XYZ")
    str = convertMultipleStringsToOneString(vector: _*)
    println(str) // PRINTS: RST,UVW,XYZ
  }
}

============================================================================

============================================================================

object Demo
{
  def main(args: Array[String]): Unit =
  {
    def add(numbers:Double *):Double      = { numbers.reduce(_ + _) }
    def divide(numbers:Double *):Double   = { numbers.reduce(_ / _) }
    def multiply(numbers:Double *):Double = { numbers.reduce(_ * _) }
    def subtract(numbers:Double *):Double = { numbers.reduce(_ - _) }

    val numbersList:List[Double] = List(7777.777D, 2.54D, 33.3D, 10.0D)

    // NOTE: The _* in the following calls to add(), divide(), multiply(), and subtract()
    //       transforms numbersList into 4 SEPARATE numbers of type Double so those
    //       4 functions can handle the "variable number of arguments" they were defined to receive.
    var result:Double = add(numbersList:_*) // Performs this calculation: 7777.777 + 2.54 + 33.3 + 10.0
    println("result = " + result) // PRINTS: result = 7823.617

    result = divide(numbersList:_*) // Performs this calculation: 7777.777 / 2.54 / 33.3 / 10.0
    println("result = " + result) // PRINTS: result = 9.195546333735312

    result = multiply(numbersList:_*) // Performs this calculation: 7777.777 * 2.54 * 33.3 * 10.0
    println("result = " + result) // PRINTS: result = 6578599.342139998

    result = subtract(numbersList:_*) // Performs this calculation: 7777.777 - 2.54 - 33.3 - 10.0
    println("result = " + result) // PRINTS: result = 7731.937
  }
}

============================================================================

object Demo
{
  /**
    * @param str - NOTE: When a variable number of arguments is passed to a function
    *                    as in this example, the asterisk (*) transforms the data type
    *                    into a Seq[].  For example, even though the "str" argument
    *                    is declared as a String, the asterisk transforms it into a
    *                    a Seq[String].
    */
  def display(str:String *):Unit =
  {
    if (str.isInstanceOf[Seq[String]])
      println("str is of type Seq[String]") // PRINTS: str is of type Seq[String]

    // For each String passed to this method, the print function is called.
    str.map(print) // PRINTS: Play Scala Java
  }

  def main(args:Array[String])
  {
    display("Play ", "Scala ", "Java ")
  }
}

============================================================================

object Demo
{
  def main(args:Array[String]): Unit =
  {
    var averageScore:Double = calculateAverage() // PRINTS: numbers IS a Seq[Double] data type.
                                                 //         List()

    printScore(averageScore, "averageScore = ") // PRINTS: The score is not a number.

    averageScore = calculateAverage(1.23, 4.56, 7.89) // PRINTS: numbers IS a Seq[Double] data type.
                                                      //         ArraySeq(1.23, 4.56, 7.89)

    printScore(averageScore, "averageScore = ")  // PRINTS: averageScore = 4.56
  }

  /**
   * @param numbers - NOTE: When a variable number of arguments is passed to a function
   *                        as in this example, the asterisk (*) transforms the data type
   *                        into a Seq[].  For example, even though the "numbers" argument
   *                        is declared as a Double, the asterisk transforms it into a
   *                        a Seq[Double].
   * @return the average of all Double values passed to this function.
   */
  def calculateAverage(numbers:Double *):Double =
  {
    // NOTE: The following if() statement exists to:
    //       1) Demonstrate how to use the isInstanceOf[] method.
    //       2) Demonstrate how to perform pattern matching using the "matches" keyword.
    if (numbers.isInstanceOf[Seq[Double]])
    {
      numbers match
      {
        case a: Seq[Double] => println("numbers IS a Seq[Double] data type.")
        case _              => println("numbers is NOT a Seq[Double] data type.")
      }
    }
    println(numbers)
    numbers.sum / numbers.length // Return the average of all numbers passed to this function.
  }

  def printScore(score:Double, msg:String):Unit =
  {
    if   (score.isNaN) println("The score is not a number.")
    else println(msg + score) // PRINTS: averageScore = 4.56
  }
}

============================================================================

object Demo {
  def main(args: Array[String]) {
    {
      val fruits: List[String] = List("apple", "banana", "blueberry", "cherry")

      // The following 5 calls to the printAll() function shows that
      // printAll() can accept a variable number of arguments.
      printAll() // PRINTS: nothing (no text)
      printAll("ONE") // PRINTS: ONE
      printAll("ONE", "TWO") // PRINTS: ONE
                             //         TWO
      printAll("ONE", "TWO", "THREE") // PRINTS: ONE
                                      //         TWO
                                      //         THREE

      // The _* in the following call to printAll() transforms
      // the List "fruits" into 4 SEPARATE STRINGS.
      printAll(fruits: _*) // PRINTS: apple
                           //         banana
                           //         blueberry
                           //         cherry
      printAll(fruits.toString()) // PRINTS: List(apple, banana, blueberry, cherry)
      println(fruits.flatten)     // PRINTS: List(a, p, p, l, e, b, a, n, a, n, a, b, l, u, e, b, e, r, r, y, c, h, e, r, r, y)
    }

    /**
     * @param strs - A variable number of strings can get passed to this printAll() function.
     */
    def printAll(strs: String*) // The asterisk char (*) designates possible MULTIPLE ARGUMENTS.
    {
      strs.foreach(println)
    }
  }
}
