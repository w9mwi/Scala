VARIABLE NUMBER OF ARGUMENTS (VARARGS)
======================================

The code samples below show how to pass a variable number
of arguments to a method.  Read in-line comments for
detailed explanations.

This section also demonstrates the use of ETA EXPANSIONS.
For more information on ETA EXPANSIONS, see the section
titled: Function_vs_Method
SEE --> https://github.com/w9mwi/Scala/blob/master/Function_vs_Method

============================================================================
object Demo
{
  def main(args: Array[String])
  {
    // The asterisk in the following "words:String *" argument designates
    // that the words argument accepts a variable number of String args.
    def makeSentence(words:String *):String = words.mkString(" ") + "."

    // ***************************************************************************
    // EXAMPLE 1)
    var strResult:String = makeSentence("Make", "these", "words", "into", "a", "single", "sentence")
    println(s"strResult 1) = $strResult") // PRINTS:  strResult 1) = Make these words into a single sentence.

    // ***************************************************************************
    // EXAMPLE 2)  The '_*' characters in the below call to makeSentence()
    //             performs "TYPE ASCRIPTION" at compile time, which up-casts
    //             listOfWords from type List[String] into multiple String
    //             arguments, which makeSentence() requires.
    val listOfWords:List[String] = List("Tomorrow", "is", "a", "different", "day")
    strResult = makeSentence(listOfWords: _*)
    println(s"strResult 2) = $strResult") // PRINTS: strResult 2) = Tomorrow is a different day.

    // ***************************************************************************
    // EXAMPLE 3) This is identical to EXAMPLE 2) above, except makeSentence()
    //            gets passed an Array[String] instead of a List[String], but
    //            the result is identical.
    val arrayOfWords:Array[String] = listOfWords.toArray
    strResult = makeSentence(arrayOfWords: _*)
    println(s"strResult 3) = $strResult")  // PRINTS: strResult 3) = Tomorrow is a different day.

    // ***************************************************************************
    // EXAMPLE 4) First, let's review what is meant by an "ETA EXPANSION."
    //
    //            A Scala method is bound to a class/object/trait.  In other
    //            words, a method IS A MEMBER of a class/object/trait.
    //            A Scala method is ALWAYS created using the "def" keyword.
    //
    //            A Scala function is NOT bound to a class/object/trait.  You
    //            CAN'T create a Scala function using the "def" keyword because
    //            using the "def" keyword makes it a method.
    //
    //            A function CAN be assigned to a val/var.
    //            A method CAN'T be assigned to a val/var.
    //
    //            In this example we demonstrate how to transform a Scala method
    //            (the makeSentence() method) into a function by performing an
    //            ETA EXAPANSION on it, and then assigning that function to
    //            the var etaExpand.
    //
    var etaExpand:Seq[String]=>String = makeSentence
    strResult = etaExpand(listOfWords)
    println(s"strResult 4) = $strResult") // PRINTS: strResult 4) = Tomorrow is a different day.

    // ***************************************************************************
    // EXAMPLE 5) The following ETA EXPANSION performed on makeSentence is
    //            IDENTICAL to EXAMPLE 4).  Only the syntax is different
    //            by including the underscore (_) char.
    etaExpand = makeSentence _
    strResult = etaExpand(listOfWords)
    println(s"strResult 5) = $strResult") // PRINTS: strResult 5) = Tomorrow is a different day.

    // NOTE: If you uncomment the following commented-out line it WON'T COMPILE.
    //       The underscore char must NOT be enclosed in parenthesis.
    // etaExpand = makeSentence(_) // WON'T COMPILE!
  }
}

============================================================================
When a method argument accepts a variable number of arguments, as
designated by the asterisk (*) char, the Scala compiler designates
that argument as type Seq.  So in the following code sample, the
getString() method's "str" argument has the data type Seq[String].

object Demo
{
  def getString(str:String *):String =
  {
    if (str.isInstanceOf[Seq[String]])
      println("str is of type: Seq[String]") // PRINTS: str is of type: Seq[String]

    str.mkString(" ")
  }

  def main(args:Array[String])
  {
    var strResult:String = getString("Cat", "Dog", "Mouse")
    println(s"strResult 1) = $strResult") // PRINTS: strResult 1) = Cat Dog Mouse

    val seqOfStrings:Seq[String] = Seq("Alpha", "Beta", "Xray", "Zulu")
    // NOTE: Although the getString() method's argument "str" is of type
    //       Seq[String], you CAN'T pass getString() an argument having
    //       that data type.  If you uncomment the following line of
    //       code, it WON'T COMPILE because the getString() method MUST
    //       be called with one or more String arguments.
    // getString(seqOfStrings)  // WON'T COMPILE!

    // You can call getString() by passing it a Seq[String], but you MUST add
    // the ":_*" text as shown below.  Doing that performs TYPE ASCRIPTION,
    // as is described in the previous sample program above.
    strResult = getString(seqOfStrings:_*)
    println(s"strResult 2) = $strResult") // PRINTS: strResult 2) = Alpha Beta Xray Zulu

    // Scala Array and List classes are subtypes of Seq, so they can also
    // be passed as arguments to the getString() method, as long as they
    // also include the ":_*" text when they're called.  Examples...
    val arrayOfStrings:Array[String] = seqOfStrings.toArray
    strResult = getString(arrayOfStrings:_*)
    println(s"strResult 3) = $strResult") // PRINTS: strResult 3) = Alpha Beta Xray Zulu

    val listOfStrings:List[String] = seqOfStrings.toList
    strResult = getString(listOfStrings:_*)
    println(s"strResult 4) = $strResult") // PRINTS: strResult 4) = Alpha Beta Xray Zulu
  }
}
