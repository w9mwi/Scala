
A method, function, or constructor can have ONLY ONE implicit parameter
list, and it must be THE LAST PARAMETER LIST specified.  If an implicit
method is called without passing its implicit parameter, Scala will
determine if it can obtain an implicit value of the correct type,
and if it can, pass it automatically.

The implicit keyword can be used to mark a val/var, a method/function,
or an object.

The Scala "implicit" keyword is used in these THREE (3) scenarios:

1) CONVERSIONS TO AN EXPECTED TYPE.
   This allows the programmer to use one type in a context where another type is expected.
   When the compiler references a data type of X, but a data type of Y is required, Scala
   first looks for an implicit conversion to see if that will resolve the problem.  If
   an implicit conversion is not found, Scala will throw an error.  EXAMPLE:

   object Demo {
   implicit def doubleToInt(x:Double):Int = x.toInt

     def main(args: Array[String]): Unit = {
     // Without the implicit doubleToInt() method defined above, the
     // following assignment to myInt would generate a compile error.
     val myInt:Int = -12.9876D
     println(s"myInt = $myInt") // PRINTS: myInt = -12
  }
}

2) CONVERSIONS OF THE RECEIVER OF A SELECTION.


3) IMPLICIT PARAMETERS.


Read in-line comments in the below sample programs for details.
==========================================================================

object Demo
{
  def main(args: Array[String])
  {
    // The second parameter list in printIntIfTrue()() is designated as an
    // implicit parameter.  Therefore, you can call printIntIfTrue()() with
    // only its first parameter list.
    def printIntIfTrue(a: Int)(implicit b: Boolean): Unit = { if (b) {println(a)} }

    printIntIfTrue(123)(false) // Prints nothing because the second param is false.
    printIntIfTrue(456)(true)  // PRINTS: 456

    // Because the printIntIfTrue()() function below accepts an implicit parameter
    // of type Boolean, and because an implicit val/var of type Boolean is declared
    // BEFORE printIntIfTrue() gets called, printIntIfTrue()() will execute when it's
    // called WITHOUT a second parameter!
    //
    // NOTE: In this example, ONLY ONE implicit val of type Boolean can exist when you
    //       invoke printIntIfTrue()() without its second parameter.  If you were to
    //       declare two or more implicit Boolean vals here, the code WON'T COMPILE.
    //       Multiple implicit vals/vars can exist (without causing an error) as long as they
    //       have different data types., as shown below.
    implicit val string_1:String   = "BEER"  // Because printIntIfTrue()() accepts no String
                                             // argument, this implicit declaration has no effect.
    implicit val boolean_1:Boolean = true
    printIntIfTrue(420) // PRINTS: 420
  }
}

===============================================================================
The following code sample shows another example of using an implicit parameter.
Here, we make the add() function a parametric function so it takes a Numeric
type implicit parameter, so it will work properly on all Numeric types, such
as Long, Int, Float, Double, etc.

As is always the case with implicit functions, if it's called without specifying
the implicit parameter, Scala will determine if it can obtain an implicit value
of the correct type, and if it can, pass it automatically.

In the following example, the implicit parameter is never designated so Scala
passes that parameter for us, making the add() function work as we want with
all Numeric types.

object Demo
{
  // The following add()() function is defined with two (2) parameter lists,
  // which usually means it's a curried function.  However, because its
  // second  parameter list contains an implicit argument, it's NOT a
  // curried function.  The Scala compiler automatically invokes the
  // implicit parameter when the add()() function is called with only
  // one of its two parameter lists.
  //
  // This code shows how to define an add function so it will work with
  // different data types (Byte, Int, Long, Float, Double).  The returned
  // data type will be "upcast" to the highest of the two data types passed
  // to the function.
  def add[A](x:A, y:A)(implicit numeric:Numeric[A]):A = numeric.plus(x, y)

  def main(args:Array[String]): Unit =
  {
    val myByte:Byte     = 123
    val myInt:Int       = 456
    val myLong:Long     = 999999999L
    val myFloat:Float   = 876.543F
    val myDouble:Double = 1234567.890123D

    println("add(myByte, myInt)     = " + add(myByte, myInt))     // PRINTS: add(myByte, myInt)     = 579
    println("add(myInt, myLong)     = " + add(myInt, myLong))     // PRINTS: add(myInt, myLong)     = 1000000455
    println("add(myLong, myFloat)   = " + add(myLong, myFloat))   // PRINTS: add(myLong, myFloat)   = 1.0000009E9
    println("add(myFloat, myDouble) = " + add(myFloat, myDouble)) // PRINTS: add(myFloat, myDouble) = 1235444.433152785
    println("add(myByte, myDouble)  = " + add(myByte, myDouble))  // PRINTS: add(myByte, myDouble)  = 1234690.890123
    println("add(myInt, myFloat)    = " + add(myInt, myFloat))    // PRINTS: add(myInt, myFloat)    = 1332.543
  }
}


==========================================================================

The code below shows another example of using implicit parameters.
Read in-line comments for explanations.

object Demo
{
  def main(args: Array[String]): Unit =
  {
    trait Animal
    class Person(name:String) extends Animal
    {
      override def toString() = "Person"
    }
    class Employee(name:String) extends Person(name)
    {
      override def toString() = "Employee"
    }
    implicit val p:Person   = new Person("Person")
    implicit val e:Employee = new Employee("Employee")

    // NOTICE: You CAN pass an Employee to the printPerson()() function because
    //         an Employee extends Person, which means an Employee is defined
    //         to also be a Person.
    printPerson(true)     // PRINTS: p = Employee  (Why does this always print "p = Employee" and never "p = Person" ???)
    printPerson(false)    // PRINTS:
    printPerson(true)(e)  // PRINTS: p = Employee
    printPerson(true)(p)  // PRINTS: p = Person
    printPerson(false)(e) // PRINTS:
    printPerson(false)(p) // PRINTS:

    // NOTICE: You CAN'T pass a Person to the printEmployee()() function because a
    //         Person doesn't extend Employee.
    printEmployee(true)     // PRINTS: e = Employee
    printEmployee(false)    // PRINTS:
    printEmployee(true)(e)  // PRINTS: e = Employee
    printEmployee(false)(e) // PRINTS:
    // The following 2 lines are commented out because they won't compile.
    // As they both require an Employee to be passed as the 2nd parameter.
    // printEmployee(true)(p)  // Won't compile!
    // printEmployee(false)(p) // Won't compile!

    def printPerson(b:Boolean)(implicit p: Person) =
    {
      if (b) { println("p = " + p) }
    }

    def printEmployee(b:Boolean)(implicit e: Employee) =
    {
      if (b) { println("e = " + e) }
    }
  }
}

==========================================================================
An ALTERNATIVE to using implicit parameters is to use default parameters,
as shown in the code example below.  However, when you use default params,
you MUST include empty parenthesis () when calling the function.  Whereas
calling functions that have implicit params don't require empty parenthesis ().

object Demo
{
  def main(args: Array[String]): Unit =
  {
    // Demonstrate calling the add_1()() function...
    var number:Int = add_1()()
    println("number = " + number) // PRINTS: number = 10
    number = add_1(1)()
    println("number = " + number) // PRINTS: number = 8
    number = add_1()(2)
    println("number = " + number) // PRINTS: number = 5
    number = add_1(4)(5)
    println("number = " + number) // PRINTS: number = 9

    // Demonstrate calling the add_2()() function...
    number = add_2()()
    println("number = " + number) // PRINTS: number = 22
    number = add_2(1)()
    println("number = " + number) // PRINTS: number = 2
    number = add_2()(2)
    println("number = " + number) // PRINTS: number = 13
    number = add_2(11)(4)
    println("number = " + number) // PRINTS: number = 15
  }

  /**
   * This function contains 2 default parameters.  So when it's called with
   * one or two empty params, it uses the default values specified below.
   */
  def add_1(a: Int = 3)(b:Int = 7) =
  {
    a + b
  }

  /**
   * This function contains 2 default parameters, similar to the above
   * add_1()() function.  However, this function demonstrates how the
   * 2nd parameter (b) uses the first parameter (a) as a default value.
  **/
  def add_2(a: Int = 11)(b:Int = a) =
  {
    a + b
  }
}

==========================================================================
