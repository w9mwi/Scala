A method can have an implicit parameter list, marked by the
'implicit' keyword at the start of the parameter list.  If
the parameters in that parameter list are not passed as usual,
Scala will determine if it can obtain an implicit value of the
correct type, and if it can, pass it automatically.

A method or constructor can have ONLY ONE implicit paramater list,
and it must be the last parameter list specified.

In the following code sample, if the main() function were to declare more
than one 'implicit String' val, or declare more than one 'implicit Boolean'
val, the code wouldn't compile.  It wouldn't compile because the compiler
can't determine which of the multiple 'implicit String' vals, or which of
the multiple 'implicit Boolean' vals, to pass as the implicit parameter.

In other words, there can be ONLY ONE implicit val/var of a given data type
declared in a function.

==========================================================================

object Demo
{
  def main(args: Array[String]): Unit =
  {
    implicit val str:String = "Fred" // This implicit MIGHT get used by the howdy() function.
    howdy("Jack") // PRINTS: Howdy, Jack
    howdy         // PRINTS: Howdy, Fred


    val number:Int = 54220
    implicit val test:Boolean = true  // This implicit val MIGHT get used by the printIntIfTrue()
                                      // or printIntAndNameIfTrue() functions.
    printIntIfTrue(number)(true)  // PRINTS: a = 54220
    printIntIfTrue(number)(false) // PRINTS NOTHING!
    printIntIfTrue(number)        // PRINTS: a = 54220
  }

  def howdy(implicit s: String) = println("Howdy, " + s)

  def printIntIfTrue(a:Int)(implicit test:Boolean):Unit =
  {
    if (test) { println("a = " + a) }
  }
}

==========================================================================
The code below shows another example of using implicit parameters.
Read in-line comments for explanations.

object Demo
{
  def main(args: Array[String]): Unit =
  {
    trait Animal
    class Person(name:String) extends Animal
    {
      override def toString() = "Person"
    }
    class Employee(name:String) extends Person(name)
    {
      override def toString() = "Employee"
    }
    implicit val p:Person   = new Person("Person")
    implicit val e:Employee = new Employee("Employee")

    // NOTICE: You CAN pass an Employee to the printPerson()() function because
    //         an Employee extends Person, which means an Employee is defined
    //         to also be a Person.
    printPerson(true)     // PRINTS: p = Employee
    printPerson(false)    // PRINTS NOTHING!
    printPerson(true)(e)  // PRINTS: p = Employee
    printPerson(true)(p)  // PRINTS: p = Person
    printPerson(false)(e) // PRINTS NOTHING!
    printPerson(false)(p) // PRINTS NOTHING!

    // NOTICE: You CAN'T pass a Person to the printEmployee()() function because a
    //         Person doesn't extend Employee, which means a Person isn't defined
    //         to be an Employee.
    printEmployee(true)     // PRINTS: e = Employee
    printEmployee(false)    // PRINTS NOTHING!
    printEmployee(true)(e)  // PRINTS: e = Employee
    printEmployee(false)(e) // PRINTS NOTHING!
    // The following 2 lines are commented out because they won't compile.
    // As they both require an Employee to be passed as the 2nd parameter.
    // printEmployee(true)(p)  // Won't compile!
    // printEmployee(false)(p) // Won't compile!

    def printPerson(b:Boolean)(implicit p: Person) =
    {
      if (b) { println("p = " + p) }
    }

    def printEmployee(b:Boolean)(implicit e: Employee) =
    {
      if (b) { println("e = " + e) }
    }
  }
}

==========================================================================
