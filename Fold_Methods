
The following code sample demonstrates how to write two parametric methods
named myFoldLeft() and myFoldRight().  Both these methods generate results
identical to the foldLeft() and foldRight() methods in the Scala API.

The Scala API foldLeft() and foldRight() methods are invoked on an instance
of a class.  But the myFoldLeft() and myFoldRight() methods defined below are
invoked independent of a class instance--instead, the class they operate on
(a List class) is passed to the myFoldLeft() and myFoldRight() methods as an
argument.

Review this basic math...
 
COMMUTATIVE: When the order of a mathematical operation DOESN'T matter, it's commutative.
Example:     (4 X 3 X 2)  =  (2 X 3 X 4)  =  (3 X 2 X 4) = 24
             (4 + 3 + 2)  =  (2 + 3 + 4)  =  (3 + 2 + 4) = 9

ASSOCIATIVE: When the order of a mathematical operation DOES matter, it's associative.
Example:     (4 ÷ 3 ÷ 2)  ≠  (2 ÷ 3 ÷ 4)  ≠  (3 ÷ 2 ÷ 4)
             (4 - 3 - 2)  ≠  (2 - 3 - 4)  ≠  (3 - 2 - 4)

The Scala API fold() and foldLeft() methods generate identical results
on a collection that is COMMUTATIVE, but they operate differently.

The Scala foldLeft() method ALWAYS processes the collection from
left to right (first element to last element).

The Scala fold() method DOESN'T process a collection in any particular order.
The processing order of Scala's fold() method can change every time it's
invoked.  This means the fold() method's operator is associative.  Therefore...

Scala's fold() method should be used ONLY on collections that are COMMUTATIVE,
where the order in which the collection is processed doesn't matter.

===============================================================================

object Demo
{
  def main(args:Array[String]): Unit =
  {
    println("SECTION 1) ============================================")
    // In this section we write the following two methods as parametric
    // methods, so they'll operate on different data types.
    // 1) myFoldRight()
    // 2) myFoldLeft()
    // We test both these methods by passing to them a List[Int]
    // and a List[String] data type.
    val intList:List[Int] = List(1, 2, 3, 4, 5, 6)
    var intResult:Int = myFoldRight(intList, 0)(_-_)
    println("myFoldRight() #1 = " + intResult)

    intResult = myFoldLeft(intList, 0)(_-_)
    println("myFoldLeft() #1 = " + intResult)

    val strList:List[String] = List("A", "B", "C", "D")
    var strResult:String = myFoldRight(strList, "")(_+_)
    println("myFoldRight() #2 = " + strResult)
    // PRINTS: myFoldRight() #2 = ABCD

    // myFoldLeft() generates the reverse of the String passed
    // to it because myFoldLeft() begins its operation on the
    // end of the String, and the "+" operator on a String is
    // a concatenation operator.
    strResult = myFoldLeft(strList, "")(_+_)
    println("myFoldLeft() #2 = " + strResult)
    // PRINTS: myFoldLeft() #2 = DCBA

    println("SECTION 2) ============================================")
    // The following code calls the Scala API fold(), foldLeft(),
    // and foldRight() methods to confirm they generate the same
    // results as the the myFoldLeft() and myFoldRight() methods.
    intResult = intList.fold(0)(_-_)
    println("intList.fold(0) = " + intResult)  // PRINTS: intList.fold(0) = -21

    intResult = intList.foldLeft(0)(_-_)
    println("intList.foldLeft(0) #1 = " + intResult) // PRINTS: intList.foldLeft(0) #1 = -21

    intResult = intList.foldRight(0)(_-_)
    println("intList.foldRight(0) = " + intResult) // PRINTS: intList.foldRight(0) = -3

    println("SECTION 3) ============================================")
    // The following code shows an alternative way of passing
    // the "_-_" function to a method.
    intResult = intList.foldLeft(0)((param_1: Int, param_2: Int) => param_1 - param_2)
    println("intList.foldLeft(0) #2 = " + intResult) // PRINTS: intList.foldLeft(0) #2 = -21

    // NOTICE: By changing the above text from ("param_1 - param_2") to ("param_2 - param_1")
    //         generates THE SAME RESULT as calling:  intList.foldRight(0)(_-_)
    intResult = intList.foldLeft(0)((param_1: Int, param_2: Int) => param_2 - param_1)
    println("intList.foldLeft(0) #3 = " + intResult) // PRINTS: intList.foldLeft(0) #3 = 3

    println("SECTION 4) ============================================")
  }

  /**
   * myFoldRight() - This method processes all elements in a collection by performing
   *                 a binary operation on each element in the collection.  The first
   *                 operation is performed on the base argument (passed to this method)
   *                 and the RIGHT-most element (the last element) in the collection.
   *                 Moving RIGHT to left, the last operation is performed on the
   *                 accumulated result and the left-most element (the first element)
   *                 in the collection.
   *
   * This is a RECURSIVE METHOD.  The elements of the list argument passed
   * to this method must work with any operators contained within the func
   * argument passed to this method.  For Example:  If the func argument
   * passed to this method contains the '+' operator, the data type of
   * the List's elements must be able to work with that operator
   * (i.e., Int, Float, Double, String).
   *
   * EXAMPLE:
   * Assume this myFoldRight() method is called by passing it these 3 arguments:
   * list: List(1, 2, 3, 4, 5, 6)
   * base: 0 (zero)
   * func:  _-_  (Subtract operation performed on two values.)
   *
   * When myFoldRight() is called recursively it invokes this line of code,
   * which is the func argument passed that performs the subtraction:
   *
   * func(list.head, myFoldRight(list.tail, base)(func))
   *
   * In this example, the func argument passed to myFoldRight() is a subtract operation
   * which performs this subtraction:   (list.tail - myFoldRight(list.tail, base)))
   *
   * myFoldRight() is first invoked from the main() method.  myFoldRightt() is then
   * invoked 6 more times, recursively.  The 6 recursive calls PUSH the following
   * items onto the stack in this order:
   * list.head = 1,  list.tail = List(2, 3, 4, 5, 6)
   * list.head = 2,  list.tail = List(3, 4, 5, 6)
   * list.head = 3,  list.tail = List(4, 5, 6)
   * list.head = 4,  list.tail = List(5, 6)
   * list.head = 5,  list.tail = List(6)
   * list.head = 6,  list.tail = List()
   * When those items are POPPED from the stack, the following subtract
   * operations are performed in right-to-left order.  Beginning with the
   * inner-most parenthesis (6-0).  (The 0 comes from the base argument.)
   *
   * (1-(2-(3-(4-(5-(6−0))))) = -3
   */
  def myFoldRight[A](list:List[A], base:A)(func:(A,A) => A):A =
  {
    if (list.isEmpty)
      base
    else {
      // The following println() is for testing/debugging only.
      // println(s"myFoldRight():  list.head = ${list.head},  list.tail = ${list.tail}")

      func(list.head, myFoldRight(list.tail, base)(func))
    }
  }

  /**
   * myFoldLeft() - This method processes all elements in a collection by performing
   *                a binary operation on each element in the collection.  The first
   *                operation is performed on the base argument (passed to this method)
   *                and the LEFT-most element (the first element) in the collection.
   *                Moving LEFT to right, the last operation is performed on the
   *                accumulated result and the right-most element (the last element)
   *                in the collection.
   *
   * This is a RECURSIVE METHOD.  The elements of the list argument passed
   * to this method must work with any operators contained within the func
   * argument passed to this method.  For Example:  If the func argument
   * passed to this method contains the '+' operator, the data type of
   * the List's elements must be able to work with that operator
   * (i.e., Int, Float, Double, String).
   *
   * EXAMPLE:
   * Assume this myFoldLeft() method is called by passing it these 3 arguments:
   * list: List(1, 2, 3, 4, 5, 6)
   * base: 0 (zero)
   * func:  _-_  (Subtract operation performed on two values.)
   *
   * When myFoldLeft() is called recursively it invokes this line of code,
   * which is the func argument passed that performs the subtraction:
   *
   * func(myFoldLeft(list.tail, base)(func), list.head)
   *
   * In this example, the func argument passed to myFoldRight() is a subtract operation
   * which performs this subtraction:   (myFoldLeft(list.tail, base) - list.head)
   *
   * myFoldLeft() is first invoked from the main() method.  myFoldLeft() is then
   * invoked 6 more times, recursively.  The 6 recursive calls PUSH the following
   * items onto the stack in this order:
   * list.tail = List(2, 3, 4, 5, 6),  list.head = 1
   * list.tail = List(3, 4, 5, 6),     list.head = 2
   * list.tail = List(4, 5, 6),        list.head = 3
   * list.tail = List(5, 6),           list.head = 4
   * list.tail = List(6),              list.head = 5
   * list.tail = List(),               list.head = 6
   * When those items are POPPED from the stack, the following subtract
   * operations are performed, in left-to-right order.  Beginning with
   * 0-6.  (The 0 comes from the base argument.)
   *
   * 0−6-5-4-3-2-1 = -21
   */
  def myFoldLeft[A](list:List[A], base:A)(func:(A,A) => A):A = {
    if (list.isEmpty)
      base
    else {
      // The following println() is for testing/debugging only.
      // println(s"myFoldLeft():  list.tail = ${list.tail},  list.head = ${list.head}")

      func(myFoldLeft(list.tail, base)(func), list.head)
    }
  }
}
