import scala.::

object Demo
{
  object ListUtils
  {
    def dropFirstMatch[A](seq:Seq[A], value:A): Seq[A] =
    {
      val index:Int = seq.indexOf(value)
      if (index < 0) { seq }  // index = -1 if there is no match.
      else if (index == 0) { seq.tail }
      else
      {
        // splitAt() splits a Seq into a prefix and suffix.
        // The prefix contains Seq elements 0 through index.
        // The suffix contains the remaining Seq, beginning
        // with element index+1, which is the matching element.
        val (a:Seq[A], b:Seq[A]) = seq.splitAt(index)
        a ++ b.tail // The returned Seq drops the head of Seq b.
      }
    }
  }

  type Money = BigDecimal
  object Price
  {
    val pizzaBase:Money         = BigDecimal(10.00)
    val pizzaTopping:Money      = BigDecimal(1.00)
    val pizzaRegularCrust:Money = BigDecimal(0.00)
    val pizzaThinCrust:Money    = BigDecimal(1.00)
    val pizzaThickCrust:Money   = BigDecimal(1.00)
    val pizzaSmallCrust:Money   = BigDecimal(0.00)
    val pizzaMediumCrust:Money  = BigDecimal(1.00)
    val pizzaLargeCrust:Money   = BigDecimal(2.00)
  }

  sealed trait Topping
  case object Cheese    extends Topping
  case object Pepperoni extends Topping
  case object Sausage   extends Topping
  case object Mushrooms extends Topping
  case object Onions    extends Topping
  case object Olives    extends Topping

  sealed trait CrustSize
  case object SmallCrustSize  extends CrustSize
  case object MediumCrustSize extends CrustSize
  case object LargeCrustSize  extends CrustSize

  sealed trait CrustType
  case object RegularCrustType extends CrustType
  case object ThinCrustType    extends CrustType
  case object ThickCrustType   extends CrustType

  case class Address (street1: String,
                      street2: Option[String],
                      city: String,
                      state: String,
                      zipCode: String)
  {
    override def toString = s"Address($street1, $street2, $city, $state, $zipCode)"
  }

  case class Pizza(crustSize: CrustSize,
                   crustType: CrustType,
                   toppings:  Seq[Topping])
  {
    override def toString = s"Pizza($crustSize, $crustType, $toppings)"
    def addTopping(t:Topping):Pizza =
    {
      this.copy(toppings = this.toppings :+ t)
    }
    def removeTopping(t:Topping):Pizza =
    {
      this.copy(toppings = ListUtils.dropFirstMatch(toppings, t))
    }
    def removeAllToppings(p:Pizza):Pizza =
    {
      this.copy(toppings = Seq[Topping]()) // NOTE: Seq[Topping]() = Nil
    }
    def updateCrustSize(p:Pizza, cs:CrustSize):Pizza =
    {
      this.copy(crustSize = cs)
    }
    def updateCrustType(p:Pizza, ct:CrustType):Pizza =
    {
      this.copy(crustType = ct)
    }
    def getPrice(toppingsPrices:Map[Topping, Money],
                 crustSizePrices:Map[CrustSize, Money],
                 crustTypePrices:Map[CrustType, Money]):Money =
    {
      val numToppings:Int = this.toppings.size
      val price:Money     = Price.pizzaBase + (Price.pizzaTopping * numToppings)
      price
    }
  }

  case class Customer(name:String, phone:String, address:Address)
  {
    override def toString = s"Customer($name, $phone, $address)"
  }

  case class Order(pizzas:Seq[Pizza], customer:Customer)
  {
    override def toString = s"Order($customer, $pizzas)"
  }

  trait PizzaDaoInterface // NOTE: Dao = Data Access Object
  {
    def getToppingPrices():Map[Topping, Money]
    def getCrustSizePrices():Map[CrustSize, Money]
    def getCrustTypePrices():Map[CrustType, Money]
  }

  object MockPizzaDao extends PizzaDaoInterface
  {
    def getToppingPrices(): Map[Topping, Money] =
    {
      Map(Cheese    -> Price.pizzaTopping,
          Pepperoni -> Price.pizzaTopping,
          Sausage   -> Price.pizzaTopping,
          Mushrooms -> Price.pizzaTopping)
    }

    def getCrustSizePrices(): Map[CrustSize, Money] =
    {
      Map(SmallCrustSize  -> Price.pizzaSmallCrust,
          MediumCrustSize -> Price.pizzaMediumCrust,
          LargeCrustSize  -> Price.pizzaLargeCrust)
    }

    def getCrustTypePrices(): Map[CrustType, Money] =
    {
      Map(RegularCrustType -> Price.pizzaRegularCrust,
          ThickCrustType   -> Price.pizzaThickCrust,
          ThinCrustType    -> Price.pizzaThinCrust)
    }
  }

//  object MockDbOrderService extends AbstractOrderService
//  {
//    val database = MockPizzaDao
//  }

//  trait OrderServiceInterface
//  {
//    protected def database:PizzaDaoInterface
//    def calculateOrderPrice(o:Order):Money
//  }

//  trait AbstractOrderService extends OrderServiceInterface
//  {
//    object PizzaService extends PizzaService
//    import PizzaService.calculatePizzaPrice
//    private lazy val toppingPricesMap   = database.getToppingPrices()
//    private lazy val crustSizePricesMap = database.getCrustSizePrices()
//    private lazy val crustTypePricesMap = database.getCrustTypePrices()
//    def calculateOrderPrice(o:Order):Money = calculateOrderPriceInternal(o,
//      toppingPricesMap,
//      crustSizePricesMap,
//      crustTypePricesMap)
//    private def calculateOrderPriceInternal(o:Order,
//                                            toppingPrices:Map[Topping, Money],
//                                            crustSizePrices:Map[CrustSize, Money],
//                                            crustTypePrices:Map[CrustType, Money]):Money =
//    {
//      val pizzaPrices:Seq[Money] = for (pizza <- o.pizzas)
//        yield { calculatePizzaPrice(pizza,
//          toppingPrices,
//          crustSizePrices,
//          crustTypePrices) }
//      pizzaPrices.sum
//    }
//  }

  /********************************************
   * main() function
   ********************************************/
  def main(args: Array[String])
  {
    val toppingsPrices:Map[Topping, Money]    = MockPizzaDao.getToppingPrices()
    val crustSizePrices:Map[CrustSize, Money] = MockPizzaDao.getCrustSizePrices()
    val crustTypePrices:Map[CrustType, Money] = MockPizzaDao.getCrustTypePrices()

    val address:Address = Address("1717 Philippen St.", None, "Manitowoc", "Wisconsin", "54220")
    val customer:Customer = Customer("Joe Blow", "920-682-1882", address)
    println(s"customer = $customer\n")

    val pizza_1:Pizza = Pizza(LargeCrustSize, RegularCrustType, Seq(Pepperoni, Cheese))
    println(s"pizza_1 = $pizza_1")

//    var price:Money = Price.pizzaTopping
//    val toppingsPrice = for (top <- pizza_1.toppings)
//    {
//      println(s"price = $price")
//      price = (price + toppingsPrices.get(top).get)
//    }
//    println(s"price = $price")

//    def getPrice(toppingsPrices:Map[Topping, Money],
//                 crustSizePrices:Map[CrustSize, Money],
//                 crustTypePrices:Map[CrustType, Money]):Money =
//     var pizzaPrice = pizza_1.getPrice(pizza_1.toppings, pizza_1.crustSize, pizza_1.crustType)

    val pizza_2:Pizza = Pizza(SmallCrustSize, ThickCrustType, Seq(Sausage, Mushrooms, Onions))
    println(s"pizza_2 = $pizza_2\n")

    // ********************
    var pizzaUpdated = pizza_2.addTopping(Olives)
    println(s"pizzaUpdated = $pizzaUpdated")

    pizzaUpdated = pizzaUpdated.removeTopping(Olives)
    println(s"pizzaUpdated = $pizzaUpdated")
    // ********************

    val order = Order(Seq(pizza_1, pizza_2), customer)
    println(s"order = $order\n")
  }
}

==================================================================
CODE FROM PAGE 581
==================

import scala.collection.IndexedSeqLike
import scala.collection.mutable.{ArrayBuilder, Builder}
import scala.collection.generic.CanBuildFrom

object Demo
{
  object Base
  {
    // Both of the following vals fromInt() and toInt() are FUNCTIONS.
    val fromInt:(Int=>Base) = Array(A, G, T, U)
    val toInt:(Base=>Int) = Map(A -> 0, G -> 1, T -> 2, U -> 3)
  }

  abstract class Base
  case object A extends Base // A = Adenine
  case object G extends Base // G = Guanine
  case object T extends Base // T = Thymine
  case object U extends Base // U = Uracil

  /** ***********************************
   * OBJECT: RNA1
   * ********************************** */
  object RNA1
  {
    private val S:Int = 2
    private val N:Int = 32
    private val M:Int = (1 << S) - 1
    def apply(bases:Base*) = fromSeq(bases)
    def fromSeq(buf:Seq[Base]): RNA1 =
    {
      val groups:Array[Int] = Array[Int]((buf.length + N - 1) / N)
      for (idx <- 0 until buf.length) { groups(idx / N) |= Base.toInt(buf(idx)) << (idx % N * S) }
      new RNA1(groups, buf.length)
    }
  }

  /*************************************
   * CLASS: RNA1(groups, length)
   ************************************/
  final class RNA1 private (val groups:Array[Int], val length:Int) extends IndexedSeq[Base]
  {
    def apply(idx:Int):Base = {
      if (idx < 0 || length <= idx)
        throw new IndexOutOfBoundsException

      Base.fromInt(groups(idx / RNA1.N) >> (idx % RNA1.N * RNA1.S) & RNA1.M)
    }
  }



  /********************************************
   * main() function
   ********************************************/
  def main(args: Array[String])
  {
    val xs:List[Base] = List(A,U,G,G,T)
    val rna_1:List[Base] = List(A,U,G,G,T)
  }
}
==================================================================


